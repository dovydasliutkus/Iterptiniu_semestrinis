
SSD1306I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c260  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001118  0800c320  0800c320  0001c320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d438  0800d438  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d440  0800d440  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d440  0800d440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001d8  0800d620  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800d620  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120d0  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281c  00000000  00000000  00032313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00034b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1e  00000000  00000000  00035c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170c2  00000000  00000000  00036926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bc6  00000000  00000000  0004d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c70d  00000000  00000000  000625ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005390  00000000  00000000  000eecbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c308 	.word	0x0800c308

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800c308 	.word	0x0800c308

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd03 	bl	8001e48 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcf5 	bl	8001e48 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fceb 	bl	8001e48 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7b 	bl	8001d7c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc71 	bl	8001d7c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb3b 	bl	8002bd4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ff94 	bl	8002494 <__aeabi_dsub>
 800056c:	f002 fb32 	bl	8002bd4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fca3 	bl	8001f10 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb66 	bl	8002ca0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fc9a 	bl	8001f10 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff56 	bl	8002494 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb1f 	bl	8002c40 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fc83 	bl	8001f10 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb46 	bl	8002ca0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fd20 	bl	800105c <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc3e 	bl	8002ec4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc39 	bl	8002ec4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	4647      	mov	r7, r8
 80007c0:	46ce      	mov	lr, r9
 80007c2:	024a      	lsls	r2, r1, #9
 80007c4:	0243      	lsls	r3, r0, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	0fc4      	lsrs	r4, r0, #31
 80007ca:	0a50      	lsrs	r0, r2, #9
 80007cc:	4680      	mov	r8, r0
 80007ce:	0048      	lsls	r0, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0e00      	lsrs	r0, r0, #24
 80007d4:	0992      	lsrs	r2, r2, #6
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	001e      	movs	r6, r3
 80007dc:	4681      	mov	r9, r0
 80007de:	0002      	movs	r2, r0
 80007e0:	0e2d      	lsrs	r5, r5, #24
 80007e2:	00df      	lsls	r7, r3, #3
 80007e4:	0fc9      	lsrs	r1, r1, #31
 80007e6:	428c      	cmp	r4, r1
 80007e8:	d024      	beq.n	8000834 <__aeabi_fadd+0x78>
 80007ea:	1a28      	subs	r0, r5, r0
 80007ec:	2800      	cmp	r0, #0
 80007ee:	dd0e      	ble.n	800080e <__aeabi_fadd+0x52>
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d13e      	bne.n	8000872 <__aeabi_fadd+0xb6>
 80007f4:	4662      	mov	r2, ip
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e0fd      	b.n	80009f8 <__aeabi_fadd+0x23c>
 80007fc:	1e42      	subs	r2, r0, #1
 80007fe:	2801      	cmp	r0, #1
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x48>
 8000802:	e137      	b.n	8000a74 <__aeabi_fadd+0x2b8>
 8000804:	28ff      	cmp	r0, #255	; 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x4e>
 8000808:	e0a9      	b.n	800095e <__aeabi_fadd+0x1a2>
 800080a:	0010      	movs	r0, r2
 800080c:	e039      	b.n	8000882 <__aeabi_fadd+0xc6>
 800080e:	2800      	cmp	r0, #0
 8000810:	d063      	beq.n	80008da <__aeabi_fadd+0x11e>
 8000812:	464b      	mov	r3, r9
 8000814:	1b52      	subs	r2, r2, r5
 8000816:	2d00      	cmp	r5, #0
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x60>
 800081a:	e0e0      	b.n	80009de <__aeabi_fadd+0x222>
 800081c:	2f00      	cmp	r7, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x66>
 8000820:	e0ce      	b.n	80009c0 <__aeabi_fadd+0x204>
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	2a01      	cmp	r2, #1
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0x6e>
 8000828:	e155      	b.n	8000ad6 <__aeabi_fadd+0x31a>
 800082a:	2aff      	cmp	r2, #255	; 0xff
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e094      	b.n	800095a <__aeabi_fadd+0x19e>
 8000830:	001a      	movs	r2, r3
 8000832:	e0d9      	b.n	80009e8 <__aeabi_fadd+0x22c>
 8000834:	1a2a      	subs	r2, r5, r0
 8000836:	2a00      	cmp	r2, #0
 8000838:	dc00      	bgt.n	800083c <__aeabi_fadd+0x80>
 800083a:	e099      	b.n	8000970 <__aeabi_fadd+0x1b4>
 800083c:	2800      	cmp	r0, #0
 800083e:	d062      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000840:	2dff      	cmp	r5, #255	; 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x8a>
 8000844:	e08b      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	4661      	mov	r1, ip
 800084a:	04db      	lsls	r3, r3, #19
 800084c:	4319      	orrs	r1, r3
 800084e:	468c      	mov	ip, r1
 8000850:	2a1b      	cmp	r2, #27
 8000852:	dc00      	bgt.n	8000856 <__aeabi_fadd+0x9a>
 8000854:	e0d2      	b.n	80009fc <__aeabi_fadd+0x240>
 8000856:	2301      	movs	r3, #1
 8000858:	19db      	adds	r3, r3, r7
 800085a:	015a      	lsls	r2, r3, #5
 800085c:	d56a      	bpl.n	8000934 <__aeabi_fadd+0x178>
 800085e:	3501      	adds	r5, #1
 8000860:	2dff      	cmp	r5, #255	; 0xff
 8000862:	d05b      	beq.n	800091c <__aeabi_fadd+0x160>
 8000864:	2201      	movs	r2, #1
 8000866:	49a3      	ldr	r1, [pc, #652]	; (8000af4 <__aeabi_fadd+0x338>)
 8000868:	401a      	ands	r2, r3
 800086a:	085b      	lsrs	r3, r3, #1
 800086c:	400b      	ands	r3, r1
 800086e:	4313      	orrs	r3, r2
 8000870:	e01c      	b.n	80008ac <__aeabi_fadd+0xf0>
 8000872:	2dff      	cmp	r5, #255	; 0xff
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0xbc>
 8000876:	e072      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	4662      	mov	r2, ip
 800087c:	04db      	lsls	r3, r3, #19
 800087e:	431a      	orrs	r2, r3
 8000880:	4694      	mov	ip, r2
 8000882:	281b      	cmp	r0, #27
 8000884:	dc00      	bgt.n	8000888 <__aeabi_fadd+0xcc>
 8000886:	e090      	b.n	80009aa <__aeabi_fadd+0x1ee>
 8000888:	2301      	movs	r3, #1
 800088a:	1afb      	subs	r3, r7, r3
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	d551      	bpl.n	8000934 <__aeabi_fadd+0x178>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	099e      	lsrs	r6, r3, #6
 8000894:	0030      	movs	r0, r6
 8000896:	f002 faf7 	bl	8002e88 <__clzsi2>
 800089a:	0033      	movs	r3, r6
 800089c:	3805      	subs	r0, #5
 800089e:	4083      	lsls	r3, r0
 80008a0:	4285      	cmp	r5, r0
 80008a2:	dc00      	bgt.n	80008a6 <__aeabi_fadd+0xea>
 80008a4:	e075      	b.n	8000992 <__aeabi_fadd+0x1d6>
 80008a6:	4a94      	ldr	r2, [pc, #592]	; (8000af8 <__aeabi_fadd+0x33c>)
 80008a8:	1a2d      	subs	r5, r5, r0
 80008aa:	4013      	ands	r3, r2
 80008ac:	075a      	lsls	r2, r3, #29
 80008ae:	d004      	beq.n	80008ba <__aeabi_fadd+0xfe>
 80008b0:	220f      	movs	r2, #15
 80008b2:	401a      	ands	r2, r3
 80008b4:	2a04      	cmp	r2, #4
 80008b6:	d000      	beq.n	80008ba <__aeabi_fadd+0xfe>
 80008b8:	3304      	adds	r3, #4
 80008ba:	015a      	lsls	r2, r3, #5
 80008bc:	d53c      	bpl.n	8000938 <__aeabi_fadd+0x17c>
 80008be:	1c68      	adds	r0, r5, #1
 80008c0:	2dfe      	cmp	r5, #254	; 0xfe
 80008c2:	d02b      	beq.n	800091c <__aeabi_fadd+0x160>
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	0a5e      	lsrs	r6, r3, #9
 80008c8:	b2c0      	uxtb	r0, r0
 80008ca:	05c0      	lsls	r0, r0, #23
 80008cc:	4330      	orrs	r0, r6
 80008ce:	07e4      	lsls	r4, r4, #31
 80008d0:	4320      	orrs	r0, r4
 80008d2:	bcc0      	pop	{r6, r7}
 80008d4:	46b9      	mov	r9, r7
 80008d6:	46b0      	mov	r8, r6
 80008d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008da:	20fe      	movs	r0, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4210      	tst	r0, r2
 80008e0:	d172      	bne.n	80009c8 <__aeabi_fadd+0x20c>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fadd+0x12c>
 80008e6:	e0ae      	b.n	8000a46 <__aeabi_fadd+0x28a>
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fadd+0x132>
 80008ec:	e0ec      	b.n	8000ac8 <__aeabi_fadd+0x30c>
 80008ee:	4663      	mov	r3, ip
 80008f0:	2000      	movs	r0, #0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0e9      	beq.n	80008ca <__aeabi_fadd+0x10e>
 80008f6:	1afb      	subs	r3, r7, r3
 80008f8:	015a      	lsls	r2, r3, #5
 80008fa:	d400      	bmi.n	80008fe <__aeabi_fadd+0x142>
 80008fc:	e0f3      	b.n	8000ae6 <__aeabi_fadd+0x32a>
 80008fe:	4663      	mov	r3, ip
 8000900:	000c      	movs	r4, r1
 8000902:	1bdb      	subs	r3, r3, r7
 8000904:	e7d2      	b.n	80008ac <__aeabi_fadd+0xf0>
 8000906:	4661      	mov	r1, ip
 8000908:	2900      	cmp	r1, #0
 800090a:	d05b      	beq.n	80009c4 <__aeabi_fadd+0x208>
 800090c:	1e51      	subs	r1, r2, #1
 800090e:	2a01      	cmp	r2, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x158>
 8000912:	e0a7      	b.n	8000a64 <__aeabi_fadd+0x2a8>
 8000914:	2aff      	cmp	r2, #255	; 0xff
 8000916:	d022      	beq.n	800095e <__aeabi_fadd+0x1a2>
 8000918:	000a      	movs	r2, r1
 800091a:	e799      	b.n	8000850 <__aeabi_fadd+0x94>
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	2600      	movs	r6, #0
 8000920:	e7d3      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000922:	21fe      	movs	r1, #254	; 0xfe
 8000924:	1c6a      	adds	r2, r5, #1
 8000926:	4211      	tst	r1, r2
 8000928:	d073      	beq.n	8000a12 <__aeabi_fadd+0x256>
 800092a:	2aff      	cmp	r2, #255	; 0xff
 800092c:	d0f6      	beq.n	800091c <__aeabi_fadd+0x160>
 800092e:	0015      	movs	r5, r2
 8000930:	4467      	add	r7, ip
 8000932:	087b      	lsrs	r3, r7, #1
 8000934:	075a      	lsls	r2, r3, #29
 8000936:	d1bb      	bne.n	80008b0 <__aeabi_fadd+0xf4>
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	2dff      	cmp	r5, #255	; 0xff
 800093c:	d00f      	beq.n	800095e <__aeabi_fadd+0x1a2>
 800093e:	025b      	lsls	r3, r3, #9
 8000940:	0a5e      	lsrs	r6, r3, #9
 8000942:	b2e8      	uxtb	r0, r5
 8000944:	e7c1      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000946:	4662      	mov	r2, ip
 8000948:	2a00      	cmp	r2, #0
 800094a:	d008      	beq.n	800095e <__aeabi_fadd+0x1a2>
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	03d2      	lsls	r2, r2, #15
 8000950:	4213      	tst	r3, r2
 8000952:	d004      	beq.n	800095e <__aeabi_fadd+0x1a2>
 8000954:	4640      	mov	r0, r8
 8000956:	4210      	tst	r0, r2
 8000958:	d101      	bne.n	800095e <__aeabi_fadd+0x1a2>
 800095a:	000c      	movs	r4, r1
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0dc      	beq.n	800091c <__aeabi_fadd+0x160>
 8000962:	2680      	movs	r6, #128	; 0x80
 8000964:	03f6      	lsls	r6, r6, #15
 8000966:	431e      	orrs	r6, r3
 8000968:	0276      	lsls	r6, r6, #9
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	0a76      	lsrs	r6, r6, #9
 800096e:	e7ac      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000970:	2a00      	cmp	r2, #0
 8000972:	d0d6      	beq.n	8000922 <__aeabi_fadd+0x166>
 8000974:	1b42      	subs	r2, r0, r5
 8000976:	2d00      	cmp	r5, #0
 8000978:	d05c      	beq.n	8000a34 <__aeabi_fadd+0x278>
 800097a:	28ff      	cmp	r0, #255	; 0xff
 800097c:	d0ee      	beq.n	800095c <__aeabi_fadd+0x1a0>
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	04db      	lsls	r3, r3, #19
 8000982:	431f      	orrs	r7, r3
 8000984:	2a1b      	cmp	r2, #27
 8000986:	dc00      	bgt.n	800098a <__aeabi_fadd+0x1ce>
 8000988:	e082      	b.n	8000a90 <__aeabi_fadd+0x2d4>
 800098a:	2301      	movs	r3, #1
 800098c:	464d      	mov	r5, r9
 800098e:	4463      	add	r3, ip
 8000990:	e763      	b.n	800085a <__aeabi_fadd+0x9e>
 8000992:	2220      	movs	r2, #32
 8000994:	1b40      	subs	r0, r0, r5
 8000996:	3001      	adds	r0, #1
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	0019      	movs	r1, r3
 800099c:	4093      	lsls	r3, r2
 800099e:	40c1      	lsrs	r1, r0
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	4193      	sbcs	r3, r2
 80009a4:	2500      	movs	r5, #0
 80009a6:	430b      	orrs	r3, r1
 80009a8:	e780      	b.n	80008ac <__aeabi_fadd+0xf0>
 80009aa:	2320      	movs	r3, #32
 80009ac:	4661      	mov	r1, ip
 80009ae:	1a1b      	subs	r3, r3, r0
 80009b0:	4099      	lsls	r1, r3
 80009b2:	4662      	mov	r2, ip
 80009b4:	000b      	movs	r3, r1
 80009b6:	40c2      	lsrs	r2, r0
 80009b8:	1e59      	subs	r1, r3, #1
 80009ba:	418b      	sbcs	r3, r1
 80009bc:	4313      	orrs	r3, r2
 80009be:	e764      	b.n	800088a <__aeabi_fadd+0xce>
 80009c0:	000c      	movs	r4, r1
 80009c2:	4643      	mov	r3, r8
 80009c4:	0015      	movs	r5, r2
 80009c6:	e7b8      	b.n	800093a <__aeabi_fadd+0x17e>
 80009c8:	4663      	mov	r3, ip
 80009ca:	1afe      	subs	r6, r7, r3
 80009cc:	0173      	lsls	r3, r6, #5
 80009ce:	d445      	bmi.n	8000a5c <__aeabi_fadd+0x2a0>
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fadd+0x21a>
 80009d4:	e75e      	b.n	8000894 <__aeabi_fadd+0xd8>
 80009d6:	2400      	movs	r4, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	2600      	movs	r6, #0
 80009dc:	e775      	b.n	80008ca <__aeabi_fadd+0x10e>
 80009de:	2bff      	cmp	r3, #255	; 0xff
 80009e0:	d0bb      	beq.n	800095a <__aeabi_fadd+0x19e>
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	04db      	lsls	r3, r3, #19
 80009e6:	431f      	orrs	r7, r3
 80009e8:	2a1b      	cmp	r2, #27
 80009ea:	dd47      	ble.n	8000a7c <__aeabi_fadd+0x2c0>
 80009ec:	2301      	movs	r3, #1
 80009ee:	4662      	mov	r2, ip
 80009f0:	000c      	movs	r4, r1
 80009f2:	464d      	mov	r5, r9
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	e749      	b.n	800088c <__aeabi_fadd+0xd0>
 80009f8:	0005      	movs	r5, r0
 80009fa:	e79e      	b.n	800093a <__aeabi_fadd+0x17e>
 80009fc:	4661      	mov	r1, ip
 80009fe:	2320      	movs	r3, #32
 8000a00:	40d1      	lsrs	r1, r2
 8000a02:	1a9b      	subs	r3, r3, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	e722      	b.n	8000858 <__aeabi_fadd+0x9c>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d146      	bne.n	8000aa4 <__aeabi_fadd+0x2e8>
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d062      	beq.n	8000ae0 <__aeabi_fadd+0x324>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fadd+0x268>
 8000a22:	e752      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000a24:	003b      	movs	r3, r7
 8000a26:	4463      	add	r3, ip
 8000a28:	015a      	lsls	r2, r3, #5
 8000a2a:	d583      	bpl.n	8000934 <__aeabi_fadd+0x178>
 8000a2c:	4a32      	ldr	r2, [pc, #200]	; (8000af8 <__aeabi_fadd+0x33c>)
 8000a2e:	3501      	adds	r5, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	e77f      	b.n	8000934 <__aeabi_fadd+0x178>
 8000a34:	2f00      	cmp	r7, #0
 8000a36:	d0c4      	beq.n	80009c2 <__aeabi_fadd+0x206>
 8000a38:	1e53      	subs	r3, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d012      	beq.n	8000a64 <__aeabi_fadd+0x2a8>
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d08c      	beq.n	800095c <__aeabi_fadd+0x1a0>
 8000a42:	001a      	movs	r2, r3
 8000a44:	e79e      	b.n	8000984 <__aeabi_fadd+0x1c8>
 8000a46:	2f00      	cmp	r7, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fadd+0x290>
 8000a4a:	e77c      	b.n	8000946 <__aeabi_fadd+0x18a>
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d183      	bne.n	800095a <__aeabi_fadd+0x19e>
 8000a52:	2680      	movs	r6, #128	; 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	03f6      	lsls	r6, r6, #15
 8000a5a:	e736      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	000c      	movs	r4, r1
 8000a60:	1bde      	subs	r6, r3, r7
 8000a62:	e717      	b.n	8000894 <__aeabi_fadd+0xd8>
 8000a64:	003b      	movs	r3, r7
 8000a66:	4463      	add	r3, ip
 8000a68:	2501      	movs	r5, #1
 8000a6a:	015a      	lsls	r2, r3, #5
 8000a6c:	d400      	bmi.n	8000a70 <__aeabi_fadd+0x2b4>
 8000a6e:	e761      	b.n	8000934 <__aeabi_fadd+0x178>
 8000a70:	2502      	movs	r5, #2
 8000a72:	e6f7      	b.n	8000864 <__aeabi_fadd+0xa8>
 8000a74:	4663      	mov	r3, ip
 8000a76:	2501      	movs	r5, #1
 8000a78:	1afb      	subs	r3, r7, r3
 8000a7a:	e707      	b.n	800088c <__aeabi_fadd+0xd0>
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	0038      	movs	r0, r7
 8000a82:	409f      	lsls	r7, r3
 8000a84:	003b      	movs	r3, r7
 8000a86:	40d0      	lsrs	r0, r2
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	4193      	sbcs	r3, r2
 8000a8c:	4303      	orrs	r3, r0
 8000a8e:	e7ae      	b.n	80009ee <__aeabi_fadd+0x232>
 8000a90:	2320      	movs	r3, #32
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	0039      	movs	r1, r7
 8000a96:	409f      	lsls	r7, r3
 8000a98:	003b      	movs	r3, r7
 8000a9a:	40d1      	lsrs	r1, r2
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	4193      	sbcs	r3, r2
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	e773      	b.n	800098c <__aeabi_fadd+0x1d0>
 8000aa4:	2f00      	cmp	r7, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fadd+0x2ee>
 8000aa8:	e758      	b.n	800095c <__aeabi_fadd+0x1a0>
 8000aaa:	4662      	mov	r2, ip
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000ab0:	e755      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x300>
 8000aba:	e750      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000abc:	4641      	mov	r1, r8
 8000abe:	4211      	tst	r1, r2
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fadd+0x308>
 8000ac2:	e74c      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	e74a      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d083      	beq.n	80009d6 <__aeabi_fadd+0x21a>
 8000ace:	000c      	movs	r4, r1
 8000ad0:	4646      	mov	r6, r8
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	e6f9      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	000c      	movs	r4, r1
 8000ada:	1bdb      	subs	r3, r3, r7
 8000adc:	3501      	adds	r5, #1
 8000ade:	e6d5      	b.n	800088c <__aeabi_fadd+0xd0>
 8000ae0:	4646      	mov	r6, r8
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e6f1      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_fadd+0x330>
 8000aea:	e723      	b.n	8000934 <__aeabi_fadd+0x178>
 8000aec:	2400      	movs	r4, #0
 8000aee:	2600      	movs	r6, #0
 8000af0:	e6eb      	b.n	80008ca <__aeabi_fadd+0x10e>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	7dffffff 	.word	0x7dffffff
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__aeabi_fdiv>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	464f      	mov	r7, r9
 8000b00:	4646      	mov	r6, r8
 8000b02:	46d6      	mov	lr, sl
 8000b04:	0245      	lsls	r5, r0, #9
 8000b06:	b5c0      	push	{r6, r7, lr}
 8000b08:	0047      	lsls	r7, r0, #1
 8000b0a:	1c0c      	adds	r4, r1, #0
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	0e3f      	lsrs	r7, r7, #24
 8000b10:	0fc6      	lsrs	r6, r0, #31
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fdiv+0x1c>
 8000b16:	e06f      	b.n	8000bf8 <__aeabi_fdiv+0xfc>
 8000b18:	2fff      	cmp	r7, #255	; 0xff
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fdiv+0x22>
 8000b1c:	e074      	b.n	8000c08 <__aeabi_fdiv+0x10c>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	4699      	mov	r9, r3
 8000b24:	469a      	mov	sl, r3
 8000b26:	00ed      	lsls	r5, r5, #3
 8000b28:	04d2      	lsls	r2, r2, #19
 8000b2a:	4315      	orrs	r5, r2
 8000b2c:	3f7f      	subs	r7, #127	; 0x7f
 8000b2e:	0263      	lsls	r3, r4, #9
 8000b30:	0a5b      	lsrs	r3, r3, #9
 8000b32:	4698      	mov	r8, r3
 8000b34:	0063      	lsls	r3, r4, #1
 8000b36:	0e1b      	lsrs	r3, r3, #24
 8000b38:	0fe4      	lsrs	r4, r4, #31
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d04d      	beq.n	8000bda <__aeabi_fdiv+0xde>
 8000b3e:	2bff      	cmp	r3, #255	; 0xff
 8000b40:	d045      	beq.n	8000bce <__aeabi_fdiv+0xd2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	00d2      	lsls	r2, r2, #3
 8000b48:	04c9      	lsls	r1, r1, #19
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	3b7f      	subs	r3, #127	; 0x7f
 8000b52:	0031      	movs	r1, r6
 8000b54:	1aff      	subs	r7, r7, r3
 8000b56:	464b      	mov	r3, r9
 8000b58:	4061      	eors	r1, r4
 8000b5a:	b2c9      	uxtb	r1, r1
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d900      	bls.n	8000b62 <__aeabi_fdiv+0x66>
 8000b60:	e0b8      	b.n	8000cd4 <__aeabi_fdiv+0x1d8>
 8000b62:	4870      	ldr	r0, [pc, #448]	; (8000d24 <__aeabi_fdiv+0x228>)
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	58c3      	ldr	r3, [r0, r3]
 8000b68:	469f      	mov	pc, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0026      	movs	r6, r4
 8000b70:	4645      	mov	r5, r8
 8000b72:	4692      	mov	sl, r2
 8000b74:	4653      	mov	r3, sl
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fdiv+0x80>
 8000b7a:	e08d      	b.n	8000c98 <__aeabi_fdiv+0x19c>
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fdiv+0x86>
 8000b80:	e0a1      	b.n	8000cc6 <__aeabi_fdiv+0x1ca>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d018      	beq.n	8000bb8 <__aeabi_fdiv+0xbc>
 8000b86:	003b      	movs	r3, r7
 8000b88:	337f      	adds	r3, #127	; 0x7f
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dd6d      	ble.n	8000c6a <__aeabi_fdiv+0x16e>
 8000b8e:	076a      	lsls	r2, r5, #29
 8000b90:	d004      	beq.n	8000b9c <__aeabi_fdiv+0xa0>
 8000b92:	220f      	movs	r2, #15
 8000b94:	402a      	ands	r2, r5
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fdiv+0xa0>
 8000b9a:	3504      	adds	r5, #4
 8000b9c:	012a      	lsls	r2, r5, #4
 8000b9e:	d503      	bpl.n	8000ba8 <__aeabi_fdiv+0xac>
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <__aeabi_fdiv+0x22c>)
 8000ba2:	401d      	ands	r5, r3
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	3380      	adds	r3, #128	; 0x80
 8000ba8:	2bfe      	cmp	r3, #254	; 0xfe
 8000baa:	dd00      	ble.n	8000bae <__aeabi_fdiv+0xb2>
 8000bac:	e074      	b.n	8000c98 <__aeabi_fdiv+0x19c>
 8000bae:	01aa      	lsls	r2, r5, #6
 8000bb0:	0a52      	lsrs	r2, r2, #9
 8000bb2:	b2d8      	uxtb	r0, r3
 8000bb4:	e002      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000bb6:	000e      	movs	r6, r1
 8000bb8:	2000      	movs	r0, #0
 8000bba:	2200      	movs	r2, #0
 8000bbc:	05c0      	lsls	r0, r0, #23
 8000bbe:	07f6      	lsls	r6, r6, #31
 8000bc0:	4310      	orrs	r0, r2
 8000bc2:	4330      	orrs	r0, r6
 8000bc4:	bce0      	pop	{r5, r6, r7}
 8000bc6:	46ba      	mov	sl, r7
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	46a8      	mov	r8, r5
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bce:	4643      	mov	r3, r8
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d13f      	bne.n	8000c54 <__aeabi_fdiv+0x158>
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	3fff      	subs	r7, #255	; 0xff
 8000bd8:	e003      	b.n	8000be2 <__aeabi_fdiv+0xe6>
 8000bda:	4643      	mov	r3, r8
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12d      	bne.n	8000c3c <__aeabi_fdiv+0x140>
 8000be0:	2201      	movs	r2, #1
 8000be2:	0031      	movs	r1, r6
 8000be4:	464b      	mov	r3, r9
 8000be6:	4061      	eors	r1, r4
 8000be8:	b2c9      	uxtb	r1, r1
 8000bea:	4313      	orrs	r3, r2
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d838      	bhi.n	8000c62 <__aeabi_fdiv+0x166>
 8000bf0:	484e      	ldr	r0, [pc, #312]	; (8000d2c <__aeabi_fdiv+0x230>)
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	58c3      	ldr	r3, [r0, r3]
 8000bf6:	469f      	mov	pc, r3
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d113      	bne.n	8000c24 <__aeabi_fdiv+0x128>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	4699      	mov	r9, r3
 8000c00:	3b03      	subs	r3, #3
 8000c02:	2700      	movs	r7, #0
 8000c04:	469a      	mov	sl, r3
 8000c06:	e792      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_fdiv+0x11c>
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	4699      	mov	r9, r3
 8000c10:	3b06      	subs	r3, #6
 8000c12:	27ff      	movs	r7, #255	; 0xff
 8000c14:	469a      	mov	sl, r3
 8000c16:	e78a      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	3b09      	subs	r3, #9
 8000c1e:	27ff      	movs	r7, #255	; 0xff
 8000c20:	469a      	mov	sl, r3
 8000c22:	e784      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c24:	0028      	movs	r0, r5
 8000c26:	f002 f92f 	bl	8002e88 <__clzsi2>
 8000c2a:	2776      	movs	r7, #118	; 0x76
 8000c2c:	1f43      	subs	r3, r0, #5
 8000c2e:	409d      	lsls	r5, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	427f      	negs	r7, r7
 8000c34:	4699      	mov	r9, r3
 8000c36:	469a      	mov	sl, r3
 8000c38:	1a3f      	subs	r7, r7, r0
 8000c3a:	e778      	b.n	8000b2e <__aeabi_fdiv+0x32>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	f002 f923 	bl	8002e88 <__clzsi2>
 8000c42:	4642      	mov	r2, r8
 8000c44:	1f43      	subs	r3, r0, #5
 8000c46:	409a      	lsls	r2, r3
 8000c48:	2376      	movs	r3, #118	; 0x76
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	4690      	mov	r8, r2
 8000c4e:	1a1b      	subs	r3, r3, r0
 8000c50:	2200      	movs	r2, #0
 8000c52:	e77e      	b.n	8000b52 <__aeabi_fdiv+0x56>
 8000c54:	2303      	movs	r3, #3
 8000c56:	464a      	mov	r2, r9
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	33fc      	adds	r3, #252	; 0xfc
 8000c5e:	2203      	movs	r2, #3
 8000c60:	e777      	b.n	8000b52 <__aeabi_fdiv+0x56>
 8000c62:	000e      	movs	r6, r1
 8000c64:	20ff      	movs	r0, #255	; 0xff
 8000c66:	2200      	movs	r2, #0
 8000c68:	e7a8      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b1b      	cmp	r3, #27
 8000c70:	dca2      	bgt.n	8000bb8 <__aeabi_fdiv+0xbc>
 8000c72:	379e      	adds	r7, #158	; 0x9e
 8000c74:	002a      	movs	r2, r5
 8000c76:	40bd      	lsls	r5, r7
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	1e6b      	subs	r3, r5, #1
 8000c7c:	419d      	sbcs	r5, r3
 8000c7e:	4315      	orrs	r5, r2
 8000c80:	076a      	lsls	r2, r5, #29
 8000c82:	d004      	beq.n	8000c8e <__aeabi_fdiv+0x192>
 8000c84:	220f      	movs	r2, #15
 8000c86:	402a      	ands	r2, r5
 8000c88:	2a04      	cmp	r2, #4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fdiv+0x192>
 8000c8c:	3504      	adds	r5, #4
 8000c8e:	016a      	lsls	r2, r5, #5
 8000c90:	d544      	bpl.n	8000d1c <__aeabi_fdiv+0x220>
 8000c92:	2001      	movs	r0, #1
 8000c94:	2200      	movs	r2, #0
 8000c96:	e791      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e78e      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	03d2      	lsls	r2, r2, #15
 8000ca6:	e789      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4698      	mov	r8, r3
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	03d2      	lsls	r2, r2, #15
 8000cb0:	4215      	tst	r5, r2
 8000cb2:	d008      	beq.n	8000cc6 <__aeabi_fdiv+0x1ca>
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	4213      	tst	r3, r2
 8000cb8:	d105      	bne.n	8000cc6 <__aeabi_fdiv+0x1ca>
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	0252      	lsls	r2, r2, #9
 8000cbe:	0026      	movs	r6, r4
 8000cc0:	20ff      	movs	r0, #255	; 0xff
 8000cc2:	0a52      	lsrs	r2, r2, #9
 8000cc4:	e77a      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	03d2      	lsls	r2, r2, #15
 8000cca:	432a      	orrs	r2, r5
 8000ccc:	0252      	lsls	r2, r2, #9
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	0a52      	lsrs	r2, r2, #9
 8000cd2:	e773      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	016b      	lsls	r3, r5, #5
 8000cd8:	0155      	lsls	r5, r2, #5
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d21a      	bcs.n	8000d14 <__aeabi_fdiv+0x218>
 8000cde:	201b      	movs	r0, #27
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	3f01      	subs	r7, #1
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	001c      	movs	r4, r3
 8000ce8:	0052      	lsls	r2, r2, #1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	db01      	blt.n	8000cf4 <__aeabi_fdiv+0x1f8>
 8000cf0:	429d      	cmp	r5, r3
 8000cf2:	d801      	bhi.n	8000cf8 <__aeabi_fdiv+0x1fc>
 8000cf4:	1b5b      	subs	r3, r3, r5
 8000cf6:	4332      	orrs	r2, r6
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d1f3      	bne.n	8000ce6 <__aeabi_fdiv+0x1ea>
 8000cfe:	1e58      	subs	r0, r3, #1
 8000d00:	4183      	sbcs	r3, r0
 8000d02:	4313      	orrs	r3, r2
 8000d04:	001d      	movs	r5, r3
 8000d06:	003b      	movs	r3, r7
 8000d08:	337f      	adds	r3, #127	; 0x7f
 8000d0a:	000e      	movs	r6, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_fdiv+0x216>
 8000d10:	e73d      	b.n	8000b8e <__aeabi_fdiv+0x92>
 8000d12:	e7aa      	b.n	8000c6a <__aeabi_fdiv+0x16e>
 8000d14:	201a      	movs	r0, #26
 8000d16:	2201      	movs	r2, #1
 8000d18:	1b5b      	subs	r3, r3, r5
 8000d1a:	e7e3      	b.n	8000ce4 <__aeabi_fdiv+0x1e8>
 8000d1c:	01aa      	lsls	r2, r5, #6
 8000d1e:	2000      	movs	r0, #0
 8000d20:	0a52      	lsrs	r2, r2, #9
 8000d22:	e74b      	b.n	8000bbc <__aeabi_fdiv+0xc0>
 8000d24:	0800c354 	.word	0x0800c354
 8000d28:	f7ffffff 	.word	0xf7ffffff
 8000d2c:	0800c394 	.word	0x0800c394

08000d30 <__aeabi_fmul>:
 8000d30:	0243      	lsls	r3, r0, #9
 8000d32:	0a5b      	lsrs	r3, r3, #9
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d36:	464f      	mov	r7, r9
 8000d38:	4646      	mov	r6, r8
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	46d6      	mov	lr, sl
 8000d3e:	0fc3      	lsrs	r3, r0, #31
 8000d40:	0045      	lsls	r5, r0, #1
 8000d42:	4698      	mov	r8, r3
 8000d44:	b5c0      	push	{r6, r7, lr}
 8000d46:	464b      	mov	r3, r9
 8000d48:	1c0f      	adds	r7, r1, #0
 8000d4a:	0e2d      	lsrs	r5, r5, #24
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fmul+0x20>
 8000d4e:	e0cb      	b.n	8000ee8 <__aeabi_fmul+0x1b8>
 8000d50:	2dff      	cmp	r5, #255	; 0xff
 8000d52:	d100      	bne.n	8000d56 <__aeabi_fmul+0x26>
 8000d54:	e0cf      	b.n	8000ef6 <__aeabi_fmul+0x1c6>
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	04d2      	lsls	r2, r2, #19
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	2300      	movs	r3, #0
 8000d60:	4691      	mov	r9, r2
 8000d62:	2600      	movs	r6, #0
 8000d64:	469a      	mov	sl, r3
 8000d66:	3d7f      	subs	r5, #127	; 0x7f
 8000d68:	027c      	lsls	r4, r7, #9
 8000d6a:	007b      	lsls	r3, r7, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e1b      	lsrs	r3, r3, #24
 8000d70:	0fff      	lsrs	r7, r7, #31
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fmul+0x48>
 8000d76:	e0a9      	b.n	8000ecc <__aeabi_fmul+0x19c>
 8000d78:	2bff      	cmp	r3, #255	; 0xff
 8000d7a:	d011      	beq.n	8000da0 <__aeabi_fmul+0x70>
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	00e4      	lsls	r4, r4, #3
 8000d80:	04d2      	lsls	r2, r2, #19
 8000d82:	4314      	orrs	r4, r2
 8000d84:	4642      	mov	r2, r8
 8000d86:	3b7f      	subs	r3, #127	; 0x7f
 8000d88:	195b      	adds	r3, r3, r5
 8000d8a:	407a      	eors	r2, r7
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	1c5d      	adds	r5, r3, #1
 8000d92:	2e0a      	cmp	r6, #10
 8000d94:	dd13      	ble.n	8000dbe <__aeabi_fmul+0x8e>
 8000d96:	003a      	movs	r2, r7
 8000d98:	2e0b      	cmp	r6, #11
 8000d9a:	d047      	beq.n	8000e2c <__aeabi_fmul+0xfc>
 8000d9c:	4647      	mov	r7, r8
 8000d9e:	e03f      	b.n	8000e20 <__aeabi_fmul+0xf0>
 8000da0:	002b      	movs	r3, r5
 8000da2:	33ff      	adds	r3, #255	; 0xff
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d11e      	bne.n	8000de6 <__aeabi_fmul+0xb6>
 8000da8:	2202      	movs	r2, #2
 8000daa:	4316      	orrs	r6, r2
 8000dac:	4642      	mov	r2, r8
 8000dae:	3501      	adds	r5, #1
 8000db0:	407a      	eors	r2, r7
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	35ff      	adds	r5, #255	; 0xff
 8000db6:	2e0a      	cmp	r6, #10
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_fmul+0x8c>
 8000dba:	e0e4      	b.n	8000f86 <__aeabi_fmul+0x256>
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	2e02      	cmp	r6, #2
 8000dc0:	dc1c      	bgt.n	8000dfc <__aeabi_fmul+0xcc>
 8000dc2:	3e01      	subs	r6, #1
 8000dc4:	2e01      	cmp	r6, #1
 8000dc6:	d842      	bhi.n	8000e4e <__aeabi_fmul+0x11e>
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d03d      	beq.n	8000e48 <__aeabi_fmul+0x118>
 8000dcc:	2801      	cmp	r0, #1
 8000dce:	d166      	bne.n	8000e9e <__aeabi_fmul+0x16e>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	05c0      	lsls	r0, r0, #23
 8000dd6:	4308      	orrs	r0, r1
 8000dd8:	07d2      	lsls	r2, r2, #31
 8000dda:	4310      	orrs	r0, r2
 8000ddc:	bce0      	pop	{r5, r6, r7}
 8000dde:	46ba      	mov	sl, r7
 8000de0:	46b1      	mov	r9, r6
 8000de2:	46a8      	mov	r8, r5
 8000de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de6:	2203      	movs	r2, #3
 8000de8:	4316      	orrs	r6, r2
 8000dea:	4642      	mov	r2, r8
 8000dec:	3501      	adds	r5, #1
 8000dee:	407a      	eors	r2, r7
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	35ff      	adds	r5, #255	; 0xff
 8000df4:	2e0a      	cmp	r6, #10
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_fmul+0xca>
 8000df8:	e0e4      	b.n	8000fc4 <__aeabi_fmul+0x294>
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	40b1      	lsls	r1, r6
 8000e00:	26a6      	movs	r6, #166	; 0xa6
 8000e02:	00f6      	lsls	r6, r6, #3
 8000e04:	4231      	tst	r1, r6
 8000e06:	d10a      	bne.n	8000e1e <__aeabi_fmul+0xee>
 8000e08:	2690      	movs	r6, #144	; 0x90
 8000e0a:	00b6      	lsls	r6, r6, #2
 8000e0c:	4231      	tst	r1, r6
 8000e0e:	d116      	bne.n	8000e3e <__aeabi_fmul+0x10e>
 8000e10:	3eb9      	subs	r6, #185	; 0xb9
 8000e12:	3eff      	subs	r6, #255	; 0xff
 8000e14:	420e      	tst	r6, r1
 8000e16:	d01a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e18:	46a1      	mov	r9, r4
 8000e1a:	4682      	mov	sl, r0
 8000e1c:	e000      	b.n	8000e20 <__aeabi_fmul+0xf0>
 8000e1e:	0017      	movs	r7, r2
 8000e20:	4653      	mov	r3, sl
 8000e22:	003a      	movs	r2, r7
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d00f      	beq.n	8000e48 <__aeabi_fmul+0x118>
 8000e28:	464c      	mov	r4, r9
 8000e2a:	4650      	mov	r0, sl
 8000e2c:	2803      	cmp	r0, #3
 8000e2e:	d1cd      	bne.n	8000dcc <__aeabi_fmul+0x9c>
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	03c9      	lsls	r1, r1, #15
 8000e34:	4321      	orrs	r1, r4
 8000e36:	0249      	lsls	r1, r1, #9
 8000e38:	20ff      	movs	r0, #255	; 0xff
 8000e3a:	0a49      	lsrs	r1, r1, #9
 8000e3c:	e7ca      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	2200      	movs	r2, #0
 8000e42:	20ff      	movs	r0, #255	; 0xff
 8000e44:	03c9      	lsls	r1, r1, #15
 8000e46:	e7c5      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	e7c2      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	4649      	mov	r1, r9
 8000e52:	0424      	lsls	r4, r4, #16
 8000e54:	0c24      	lsrs	r4, r4, #16
 8000e56:	0027      	movs	r7, r4
 8000e58:	0c0e      	lsrs	r6, r1, #16
 8000e5a:	0409      	lsls	r1, r1, #16
 8000e5c:	0c09      	lsrs	r1, r1, #16
 8000e5e:	4374      	muls	r4, r6
 8000e60:	434f      	muls	r7, r1
 8000e62:	4346      	muls	r6, r0
 8000e64:	4348      	muls	r0, r1
 8000e66:	0c39      	lsrs	r1, r7, #16
 8000e68:	1900      	adds	r0, r0, r4
 8000e6a:	1809      	adds	r1, r1, r0
 8000e6c:	428c      	cmp	r4, r1
 8000e6e:	d903      	bls.n	8000e78 <__aeabi_fmul+0x148>
 8000e70:	2080      	movs	r0, #128	; 0x80
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	4684      	mov	ip, r0
 8000e76:	4466      	add	r6, ip
 8000e78:	043f      	lsls	r7, r7, #16
 8000e7a:	0408      	lsls	r0, r1, #16
 8000e7c:	0c3f      	lsrs	r7, r7, #16
 8000e7e:	19c0      	adds	r0, r0, r7
 8000e80:	0184      	lsls	r4, r0, #6
 8000e82:	1e67      	subs	r7, r4, #1
 8000e84:	41bc      	sbcs	r4, r7
 8000e86:	0c09      	lsrs	r1, r1, #16
 8000e88:	0e80      	lsrs	r0, r0, #26
 8000e8a:	1989      	adds	r1, r1, r6
 8000e8c:	4304      	orrs	r4, r0
 8000e8e:	0189      	lsls	r1, r1, #6
 8000e90:	430c      	orrs	r4, r1
 8000e92:	0109      	lsls	r1, r1, #4
 8000e94:	d571      	bpl.n	8000f7a <__aeabi_fmul+0x24a>
 8000e96:	2301      	movs	r3, #1
 8000e98:	0861      	lsrs	r1, r4, #1
 8000e9a:	401c      	ands	r4, r3
 8000e9c:	430c      	orrs	r4, r1
 8000e9e:	002b      	movs	r3, r5
 8000ea0:	337f      	adds	r3, #127	; 0x7f
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd51      	ble.n	8000f4a <__aeabi_fmul+0x21a>
 8000ea6:	0761      	lsls	r1, r4, #29
 8000ea8:	d004      	beq.n	8000eb4 <__aeabi_fmul+0x184>
 8000eaa:	210f      	movs	r1, #15
 8000eac:	4021      	ands	r1, r4
 8000eae:	2904      	cmp	r1, #4
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_fmul+0x184>
 8000eb2:	3404      	adds	r4, #4
 8000eb4:	0121      	lsls	r1, r4, #4
 8000eb6:	d503      	bpl.n	8000ec0 <__aeabi_fmul+0x190>
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <__aeabi_fmul+0x298>)
 8000eba:	401c      	ands	r4, r3
 8000ebc:	002b      	movs	r3, r5
 8000ebe:	3380      	adds	r3, #128	; 0x80
 8000ec0:	2bfe      	cmp	r3, #254	; 0xfe
 8000ec2:	dcc1      	bgt.n	8000e48 <__aeabi_fmul+0x118>
 8000ec4:	01a1      	lsls	r1, r4, #6
 8000ec6:	0a49      	lsrs	r1, r1, #9
 8000ec8:	b2d8      	uxtb	r0, r3
 8000eca:	e783      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d12c      	bne.n	8000f2a <__aeabi_fmul+0x1fa>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	431e      	orrs	r6, r3
 8000ed6:	002b      	movs	r3, r5
 8000ed8:	407a      	eors	r2, r7
 8000eda:	2001      	movs	r0, #1
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	1c5d      	adds	r5, r3, #1
 8000ee0:	2e0a      	cmp	r6, #10
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_fmul+0x1b6>
 8000ee4:	e757      	b.n	8000d96 <__aeabi_fmul+0x66>
 8000ee6:	e76a      	b.n	8000dbe <__aeabi_fmul+0x8e>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d110      	bne.n	8000f0e <__aeabi_fmul+0x1de>
 8000eec:	2301      	movs	r3, #1
 8000eee:	2604      	movs	r6, #4
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	e738      	b.n	8000d68 <__aeabi_fmul+0x38>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fmul+0x1d4>
 8000efa:	2302      	movs	r3, #2
 8000efc:	2608      	movs	r6, #8
 8000efe:	25ff      	movs	r5, #255	; 0xff
 8000f00:	469a      	mov	sl, r3
 8000f02:	e731      	b.n	8000d68 <__aeabi_fmul+0x38>
 8000f04:	2303      	movs	r3, #3
 8000f06:	260c      	movs	r6, #12
 8000f08:	25ff      	movs	r5, #255	; 0xff
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	e72c      	b.n	8000d68 <__aeabi_fmul+0x38>
 8000f0e:	4648      	mov	r0, r9
 8000f10:	f001 ffba 	bl	8002e88 <__clzsi2>
 8000f14:	464a      	mov	r2, r9
 8000f16:	1f43      	subs	r3, r0, #5
 8000f18:	2576      	movs	r5, #118	; 0x76
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	426d      	negs	r5, r5
 8000f20:	4691      	mov	r9, r2
 8000f22:	2600      	movs	r6, #0
 8000f24:	469a      	mov	sl, r3
 8000f26:	1a2d      	subs	r5, r5, r0
 8000f28:	e71e      	b.n	8000d68 <__aeabi_fmul+0x38>
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	f001 ffac 	bl	8002e88 <__clzsi2>
 8000f30:	4642      	mov	r2, r8
 8000f32:	1f43      	subs	r3, r0, #5
 8000f34:	409c      	lsls	r4, r3
 8000f36:	1a2b      	subs	r3, r5, r0
 8000f38:	3b76      	subs	r3, #118	; 0x76
 8000f3a:	407a      	eors	r2, r7
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	1c5d      	adds	r5, r3, #1
 8000f42:	2e0a      	cmp	r6, #10
 8000f44:	dd00      	ble.n	8000f48 <__aeabi_fmul+0x218>
 8000f46:	e726      	b.n	8000d96 <__aeabi_fmul+0x66>
 8000f48:	e739      	b.n	8000dbe <__aeabi_fmul+0x8e>
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	1acb      	subs	r3, r1, r3
 8000f4e:	2b1b      	cmp	r3, #27
 8000f50:	dd00      	ble.n	8000f54 <__aeabi_fmul+0x224>
 8000f52:	e73d      	b.n	8000dd0 <__aeabi_fmul+0xa0>
 8000f54:	359e      	adds	r5, #158	; 0x9e
 8000f56:	0021      	movs	r1, r4
 8000f58:	40ac      	lsls	r4, r5
 8000f5a:	40d9      	lsrs	r1, r3
 8000f5c:	1e63      	subs	r3, r4, #1
 8000f5e:	419c      	sbcs	r4, r3
 8000f60:	4321      	orrs	r1, r4
 8000f62:	074b      	lsls	r3, r1, #29
 8000f64:	d004      	beq.n	8000f70 <__aeabi_fmul+0x240>
 8000f66:	230f      	movs	r3, #15
 8000f68:	400b      	ands	r3, r1
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_fmul+0x240>
 8000f6e:	3104      	adds	r1, #4
 8000f70:	014b      	lsls	r3, r1, #5
 8000f72:	d504      	bpl.n	8000f7e <__aeabi_fmul+0x24e>
 8000f74:	2001      	movs	r0, #1
 8000f76:	2100      	movs	r1, #0
 8000f78:	e72c      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000f7a:	001d      	movs	r5, r3
 8000f7c:	e78f      	b.n	8000e9e <__aeabi_fmul+0x16e>
 8000f7e:	0189      	lsls	r1, r1, #6
 8000f80:	2000      	movs	r0, #0
 8000f82:	0a49      	lsrs	r1, r1, #9
 8000f84:	e726      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000f86:	2302      	movs	r3, #2
 8000f88:	2e0f      	cmp	r6, #15
 8000f8a:	d10c      	bne.n	8000fa6 <__aeabi_fmul+0x276>
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	464b      	mov	r3, r9
 8000f90:	03c9      	lsls	r1, r1, #15
 8000f92:	420b      	tst	r3, r1
 8000f94:	d00d      	beq.n	8000fb2 <__aeabi_fmul+0x282>
 8000f96:	420c      	tst	r4, r1
 8000f98:	d10b      	bne.n	8000fb2 <__aeabi_fmul+0x282>
 8000f9a:	4321      	orrs	r1, r4
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	003a      	movs	r2, r7
 8000fa0:	20ff      	movs	r0, #255	; 0xff
 8000fa2:	0a49      	lsrs	r1, r1, #9
 8000fa4:	e716      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000fa6:	2e0b      	cmp	r6, #11
 8000fa8:	d000      	beq.n	8000fac <__aeabi_fmul+0x27c>
 8000faa:	e6f7      	b.n	8000d9c <__aeabi_fmul+0x6c>
 8000fac:	46a1      	mov	r9, r4
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e736      	b.n	8000e20 <__aeabi_fmul+0xf0>
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	03c9      	lsls	r1, r1, #15
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	0249      	lsls	r1, r1, #9
 8000fbc:	4642      	mov	r2, r8
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a49      	lsrs	r1, r1, #9
 8000fc2:	e707      	b.n	8000dd4 <__aeabi_fmul+0xa4>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e7df      	b.n	8000f88 <__aeabi_fmul+0x258>
 8000fc8:	f7ffffff 	.word	0xf7ffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 ff59 	bl	8002e88 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	d02c      	beq.n	800103e <__aeabi_ui2f+0x72>
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	408c      	lsls	r4, r1
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4320      	orrs	r0, r4
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd0a      	ble.n	8001014 <__aeabi_ui2f+0x48>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0020      	movs	r0, r4
 8001002:	321b      	adds	r2, #27
 8001004:	4090      	lsls	r0, r2
 8001006:	0002      	movs	r2, r0
 8001008:	1e50      	subs	r0, r2, #1
 800100a:	4182      	sbcs	r2, r0
 800100c:	2005      	movs	r0, #5
 800100e:	1a40      	subs	r0, r0, r1
 8001010:	40c4      	lsrs	r4, r0
 8001012:	4314      	orrs	r4, r2
 8001014:	2905      	cmp	r1, #5
 8001016:	dc16      	bgt.n	8001046 <__aeabi_ui2f+0x7a>
 8001018:	0022      	movs	r2, r4
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <__aeabi_ui2f+0x8c>)
 800101c:	4002      	ands	r2, r0
 800101e:	0765      	lsls	r5, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001022:	250f      	movs	r5, #15
 8001024:	402c      	ands	r4, r5
 8001026:	2c04      	cmp	r4, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 800102a:	3204      	adds	r2, #4
 800102c:	0154      	lsls	r4, r2, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_ui2f+0x6a>
 8001030:	239f      	movs	r3, #159	; 0x9f
 8001032:	4002      	ands	r2, r0
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	0192      	lsls	r2, r2, #6
 8001038:	0a54      	lsrs	r4, r2, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e7da      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103e:	0264      	lsls	r4, r4, #9
 8001040:	2096      	movs	r0, #150	; 0x96
 8001042:	0a64      	lsrs	r4, r4, #9
 8001044:	e7d6      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8001046:	1f4a      	subs	r2, r1, #5
 8001048:	4094      	lsls	r4, r2
 800104a:	0022      	movs	r2, r4
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <__aeabi_ui2f+0x8c>)
 800104e:	4002      	ands	r2, r0
 8001050:	0765      	lsls	r5, r4, #29
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001054:	e7e5      	b.n	8001022 <__aeabi_ui2f+0x56>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	4646      	mov	r6, r8
 8001062:	46d6      	mov	lr, sl
 8001064:	0004      	movs	r4, r0
 8001066:	b5c0      	push	{r6, r7, lr}
 8001068:	001f      	movs	r7, r3
 800106a:	030b      	lsls	r3, r1, #12
 800106c:	0010      	movs	r0, r2
 800106e:	004e      	lsls	r6, r1, #1
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	0fcd      	lsrs	r5, r1, #31
 8001074:	0f61      	lsrs	r1, r4, #29
 8001076:	007a      	lsls	r2, r7, #1
 8001078:	4319      	orrs	r1, r3
 800107a:	00e3      	lsls	r3, r4, #3
 800107c:	033c      	lsls	r4, r7, #12
 800107e:	0fff      	lsrs	r7, r7, #31
 8001080:	46bc      	mov	ip, r7
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	0f47      	lsrs	r7, r0, #29
 8001086:	4327      	orrs	r7, r4
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b9      	mov	r9, r7
 8001090:	4680      	mov	r8, r0
 8001092:	1ab7      	subs	r7, r6, r2
 8001094:	4565      	cmp	r5, ip
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x3e>
 8001098:	e09b      	b.n	80011d2 <__aeabi_dadd+0x176>
 800109a:	2f00      	cmp	r7, #0
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x44>
 800109e:	e084      	b.n	80011aa <__aeabi_dadd+0x14e>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x4a>
 80010a4:	e0be      	b.n	8001224 <__aeabi_dadd+0x1c8>
 80010a6:	4ac8      	ldr	r2, [pc, #800]	; (80013c8 <__aeabi_dadd+0x36c>)
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x52>
 80010ac:	e124      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	464c      	mov	r4, r9
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	46a1      	mov	r9, r4
 80010b8:	2f38      	cmp	r7, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x62>
 80010bc:	e167      	b.n	800138e <__aeabi_dadd+0x332>
 80010be:	2f1f      	cmp	r7, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dadd+0x68>
 80010c2:	e1d6      	b.n	8001472 <__aeabi_dadd+0x416>
 80010c4:	2220      	movs	r2, #32
 80010c6:	464c      	mov	r4, r9
 80010c8:	1bd2      	subs	r2, r2, r7
 80010ca:	4094      	lsls	r4, r2
 80010cc:	46a2      	mov	sl, r4
 80010ce:	4644      	mov	r4, r8
 80010d0:	40fc      	lsrs	r4, r7
 80010d2:	0020      	movs	r0, r4
 80010d4:	4654      	mov	r4, sl
 80010d6:	4304      	orrs	r4, r0
 80010d8:	4640      	mov	r0, r8
 80010da:	4090      	lsls	r0, r2
 80010dc:	1e42      	subs	r2, r0, #1
 80010de:	4190      	sbcs	r0, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	40fa      	lsrs	r2, r7
 80010e4:	4304      	orrs	r4, r0
 80010e6:	1a89      	subs	r1, r1, r2
 80010e8:	1b1c      	subs	r4, r3, r4
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4192      	sbcs	r2, r2
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a8b      	subs	r3, r1, r2
 80010f2:	469a      	mov	sl, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0xa0>
 80010fa:	e0d4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	025a      	lsls	r2, r3, #9
 8001100:	0a53      	lsrs	r3, r2, #9
 8001102:	469a      	mov	sl, r3
 8001104:	4653      	mov	r3, sl
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0xb0>
 800110a:	e104      	b.n	8001316 <__aeabi_dadd+0x2ba>
 800110c:	4650      	mov	r0, sl
 800110e:	f001 febb 	bl	8002e88 <__clzsi2>
 8001112:	0003      	movs	r3, r0
 8001114:	3b08      	subs	r3, #8
 8001116:	2220      	movs	r2, #32
 8001118:	0020      	movs	r0, r4
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	4651      	mov	r1, sl
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4099      	lsls	r1, r3
 8001122:	0002      	movs	r2, r0
 8001124:	409c      	lsls	r4, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	42b3      	cmp	r3, r6
 800112a:	da00      	bge.n	800112e <__aeabi_dadd+0xd2>
 800112c:	e102      	b.n	8001334 <__aeabi_dadd+0x2d8>
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	291f      	cmp	r1, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0xdc>
 8001136:	e0a7      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001138:	2320      	movs	r3, #32
 800113a:	0010      	movs	r0, r2
 800113c:	0026      	movs	r6, r4
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	409c      	lsls	r4, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	40ce      	lsrs	r6, r1
 8001146:	40ca      	lsrs	r2, r1
 8001148:	1e63      	subs	r3, r4, #1
 800114a:	419c      	sbcs	r4, r3
 800114c:	4330      	orrs	r0, r6
 800114e:	4692      	mov	sl, r2
 8001150:	2600      	movs	r6, #0
 8001152:	4304      	orrs	r4, r0
 8001154:	0763      	lsls	r3, r4, #29
 8001156:	d009      	beq.n	800116c <__aeabi_dadd+0x110>
 8001158:	230f      	movs	r3, #15
 800115a:	4023      	ands	r3, r4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x110>
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	42a3      	cmp	r3, r4
 8001164:	41a4      	sbcs	r4, r4
 8001166:	4264      	negs	r4, r4
 8001168:	44a2      	add	sl, r4
 800116a:	001c      	movs	r4, r3
 800116c:	4653      	mov	r3, sl
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x118>
 8001172:	e09b      	b.n	80012ac <__aeabi_dadd+0x250>
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001176:	3601      	adds	r6, #1
 8001178:	429e      	cmp	r6, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x122>
 800117c:	e0b8      	b.n	80012f0 <__aeabi_dadd+0x294>
 800117e:	4653      	mov	r3, sl
 8001180:	4992      	ldr	r1, [pc, #584]	; (80013cc <__aeabi_dadd+0x370>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	400b      	ands	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4323      	orrs	r3, r4
 800118c:	0572      	lsls	r2, r6, #21
 800118e:	024c      	lsls	r4, r1, #9
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	0512      	lsls	r2, r2, #20
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	4322      	orrs	r2, r4
 800119a:	432a      	orrs	r2, r5
 800119c:	0018      	movs	r0, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	bce0      	pop	{r5, r6, r7}
 80011a2:	46ba      	mov	sl, r7
 80011a4:	46b1      	mov	r9, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d048      	beq.n	8001240 <__aeabi_dadd+0x1e4>
 80011ae:	1b97      	subs	r7, r2, r6
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x15a>
 80011b4:	e10e      	b.n	80013d4 <__aeabi_dadd+0x378>
 80011b6:	000c      	movs	r4, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x162>
 80011bc:	e1b7      	b.n	800152e <__aeabi_dadd+0x4d2>
 80011be:	1e7c      	subs	r4, r7, #1
 80011c0:	2f01      	cmp	r7, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x16a>
 80011c4:	e226      	b.n	8001614 <__aeabi_dadd+0x5b8>
 80011c6:	4d80      	ldr	r5, [pc, #512]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x172>
 80011cc:	e1d5      	b.n	800157a <__aeabi_dadd+0x51e>
 80011ce:	0027      	movs	r7, r4
 80011d0:	e107      	b.n	80013e2 <__aeabi_dadd+0x386>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x17c>
 80011d6:	e0b2      	b.n	800133e <__aeabi_dadd+0x2e2>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d047      	beq.n	800126c <__aeabi_dadd+0x210>
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011de:	4296      	cmp	r6, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x188>
 80011e2:	e089      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464c      	mov	r4, r9
 80011e8:	0412      	lsls	r2, r2, #16
 80011ea:	4314      	orrs	r4, r2
 80011ec:	46a1      	mov	r9, r4
 80011ee:	2f38      	cmp	r7, #56	; 0x38
 80011f0:	dc6b      	bgt.n	80012ca <__aeabi_dadd+0x26e>
 80011f2:	2f1f      	cmp	r7, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x19c>
 80011f6:	e16e      	b.n	80014d6 <__aeabi_dadd+0x47a>
 80011f8:	003a      	movs	r2, r7
 80011fa:	4648      	mov	r0, r9
 80011fc:	3a20      	subs	r2, #32
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	4684      	mov	ip, r0
 8001202:	2f20      	cmp	r7, #32
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x1ba>
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	4648      	mov	r0, r9
 800120a:	1bd2      	subs	r2, r2, r7
 800120c:	4090      	lsls	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4310      	orrs	r0, r2
 8001214:	4680      	mov	r8, r0
 8001216:	4640      	mov	r0, r8
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	4662      	mov	r2, ip
 800121e:	0004      	movs	r4, r0
 8001220:	4314      	orrs	r4, r2
 8001222:	e057      	b.n	80012d4 <__aeabi_dadd+0x278>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1d0>
 800122a:	e103      	b.n	8001434 <__aeabi_dadd+0x3d8>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1d8>
 8001232:	e193      	b.n	800155c <__aeabi_dadd+0x500>
 8001234:	4c64      	ldr	r4, [pc, #400]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e18a      	b.n	8001552 <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e73b      	b.n	80010b8 <__aeabi_dadd+0x5c>
 8001240:	4c63      	ldr	r4, [pc, #396]	; (80013d0 <__aeabi_dadd+0x374>)
 8001242:	1c72      	adds	r2, r6, #1
 8001244:	4222      	tst	r2, r4
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e0e0      	b.n	800140c <__aeabi_dadd+0x3b0>
 800124a:	000a      	movs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1f8>
 8001252:	e174      	b.n	800153e <__aeabi_dadd+0x4e2>
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1fe>
 8001258:	e1d0      	b.n	80015fc <__aeabi_dadd+0x5a0>
 800125a:	464a      	mov	r2, r9
 800125c:	4302      	orrs	r2, r0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x206>
 8001260:	e1e3      	b.n	800162a <__aeabi_dadd+0x5ce>
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	e029      	b.n	80012c0 <__aeabi_dadd+0x264>
 800126c:	464a      	mov	r2, r9
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e17d      	b.n	8001570 <__aeabi_dadd+0x514>
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	2f01      	cmp	r7, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x220>
 800127a:	e0e0      	b.n	800143e <__aeabi_dadd+0x3e2>
 800127c:	4c52      	ldr	r4, [pc, #328]	; (80013c8 <__aeabi_dadd+0x36c>)
 800127e:	42a7      	cmp	r7, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x228>
 8001282:	e166      	b.n	8001552 <__aeabi_dadd+0x4f6>
 8001284:	0017      	movs	r7, r2
 8001286:	e7b2      	b.n	80011ee <__aeabi_dadd+0x192>
 8001288:	0010      	movs	r0, r2
 800128a:	3b1f      	subs	r3, #31
 800128c:	40d8      	lsrs	r0, r3
 800128e:	2920      	cmp	r1, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	409a      	lsls	r2, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	1e63      	subs	r3, r4, #1
 800129c:	419c      	sbcs	r4, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	469a      	mov	sl, r3
 80012a4:	4304      	orrs	r4, r0
 80012a6:	0763      	lsls	r3, r4, #29
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x250>
 80012aa:	e755      	b.n	8001158 <__aeabi_dadd+0xfc>
 80012ac:	4652      	mov	r2, sl
 80012ae:	08e3      	lsrs	r3, r4, #3
 80012b0:	0752      	lsls	r2, r2, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	4652      	mov	r2, sl
 80012b6:	0037      	movs	r7, r6
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012bc:	4297      	cmp	r7, r2
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x2a4>
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	057a      	lsls	r2, r7, #21
 80012c4:	0b0c      	lsrs	r4, r1, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e764      	b.n	8001194 <__aeabi_dadd+0x138>
 80012ca:	4642      	mov	r2, r8
 80012cc:	464c      	mov	r4, r9
 80012ce:	4314      	orrs	r4, r2
 80012d0:	1e62      	subs	r2, r4, #1
 80012d2:	4194      	sbcs	r4, r2
 80012d4:	18e4      	adds	r4, r4, r3
 80012d6:	429c      	cmp	r4, r3
 80012d8:	4192      	sbcs	r2, r2
 80012da:	4252      	negs	r2, r2
 80012dc:	4692      	mov	sl, r2
 80012de:	448a      	add	sl, r1
 80012e0:	4653      	mov	r3, sl
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	d5df      	bpl.n	80012a6 <__aeabi_dadd+0x24a>
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dadd+0x3fc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2400      	movs	r4, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74d      	b.n	8001194 <__aeabi_dadd+0x138>
 80012f8:	074a      	lsls	r2, r1, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	001a      	movs	r2, r3
 8001302:	430a      	orrs	r2, r1
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2ac>
 8001306:	e200      	b.n	800170a <__aeabi_dadd+0x6ae>
 8001308:	2480      	movs	r4, #128	; 0x80
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	430c      	orrs	r4, r1
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e73e      	b.n	8001194 <__aeabi_dadd+0x138>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fdb6 	bl	8002e88 <__clzsi2>
 800131c:	0003      	movs	r3, r0
 800131e:	3318      	adds	r3, #24
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e6f7      	b.n	8001116 <__aeabi_dadd+0xba>
 8001326:	0022      	movs	r2, r4
 8001328:	3808      	subs	r0, #8
 800132a:	4082      	lsls	r2, r0
 800132c:	2400      	movs	r4, #0
 800132e:	42b3      	cmp	r3, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d8>
 8001332:	e6fc      	b.n	800112e <__aeabi_dadd+0xd2>
 8001334:	1af6      	subs	r6, r6, r3
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <__aeabi_dadd+0x370>)
 8001338:	401a      	ands	r2, r3
 800133a:	4692      	mov	sl, r2
 800133c:	e70a      	b.n	8001154 <__aeabi_dadd+0xf8>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d02b      	beq.n	800139a <__aeabi_dadd+0x33e>
 8001342:	1b97      	subs	r7, r2, r6
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x2ee>
 8001348:	e0b8      	b.n	80014bc <__aeabi_dadd+0x460>
 800134a:	4c1f      	ldr	r4, [pc, #124]	; (80013c8 <__aeabi_dadd+0x36c>)
 800134c:	42a2      	cmp	r2, r4
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x2f6>
 8001350:	e11c      	b.n	800158c <__aeabi_dadd+0x530>
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	0424      	lsls	r4, r4, #16
 8001356:	4321      	orrs	r1, r4
 8001358:	2f38      	cmp	r7, #56	; 0x38
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x302>
 800135c:	e11e      	b.n	800159c <__aeabi_dadd+0x540>
 800135e:	2f1f      	cmp	r7, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x308>
 8001362:	e19e      	b.n	80016a2 <__aeabi_dadd+0x646>
 8001364:	2620      	movs	r6, #32
 8001366:	000c      	movs	r4, r1
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	0018      	movs	r0, r3
 800136c:	40b3      	lsls	r3, r6
 800136e:	40b4      	lsls	r4, r6
 8001370:	40f8      	lsrs	r0, r7
 8001372:	1e5e      	subs	r6, r3, #1
 8001374:	41b3      	sbcs	r3, r6
 8001376:	40f9      	lsrs	r1, r7
 8001378:	4304      	orrs	r4, r0
 800137a:	431c      	orrs	r4, r3
 800137c:	4489      	add	r9, r1
 800137e:	4444      	add	r4, r8
 8001380:	4544      	cmp	r4, r8
 8001382:	419b      	sbcs	r3, r3
 8001384:	425b      	negs	r3, r3
 8001386:	444b      	add	r3, r9
 8001388:	469a      	mov	sl, r3
 800138a:	0016      	movs	r6, r2
 800138c:	e7a8      	b.n	80012e0 <__aeabi_dadd+0x284>
 800138e:	4642      	mov	r2, r8
 8001390:	464c      	mov	r4, r9
 8001392:	4314      	orrs	r4, r2
 8001394:	1e62      	subs	r2, r4, #1
 8001396:	4194      	sbcs	r4, r2
 8001398:	e6a6      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800139a:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__aeabi_dadd+0x374>)
 800139c:	1c72      	adds	r2, r6, #1
 800139e:	4222      	tst	r2, r4
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x348>
 80013a2:	e0a8      	b.n	80014f6 <__aeabi_dadd+0x49a>
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x352>
 80013ac:	e10a      	b.n	80015c4 <__aeabi_dadd+0x568>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x358>
 80013b2:	e15e      	b.n	8001672 <__aeabi_dadd+0x616>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x360>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x624>
 80013bc:	074a      	lsls	r2, r1, #29
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	e77c      	b.n	80012c0 <__aeabi_dadd+0x264>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	4ccf      	ldr	r4, [pc, #828]	; (8001714 <__aeabi_dadd+0x6b8>)
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x380>
 80013da:	e0ce      	b.n	800157a <__aeabi_dadd+0x51e>
 80013dc:	2480      	movs	r4, #128	; 0x80
 80013de:	0424      	lsls	r4, r4, #16
 80013e0:	4321      	orrs	r1, r4
 80013e2:	2f38      	cmp	r7, #56	; 0x38
 80013e4:	dc5b      	bgt.n	800149e <__aeabi_dadd+0x442>
 80013e6:	2f1f      	cmp	r7, #31
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x390>
 80013ea:	e0dc      	b.n	80015a6 <__aeabi_dadd+0x54a>
 80013ec:	2520      	movs	r5, #32
 80013ee:	000c      	movs	r4, r1
 80013f0:	1bed      	subs	r5, r5, r7
 80013f2:	001e      	movs	r6, r3
 80013f4:	40ab      	lsls	r3, r5
 80013f6:	40ac      	lsls	r4, r5
 80013f8:	40fe      	lsrs	r6, r7
 80013fa:	1e5d      	subs	r5, r3, #1
 80013fc:	41ab      	sbcs	r3, r5
 80013fe:	4334      	orrs	r4, r6
 8001400:	40f9      	lsrs	r1, r7
 8001402:	431c      	orrs	r4, r3
 8001404:	464b      	mov	r3, r9
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4699      	mov	r9, r3
 800140a:	e04c      	b.n	80014a6 <__aeabi_dadd+0x44a>
 800140c:	464a      	mov	r2, r9
 800140e:	1a1c      	subs	r4, r3, r0
 8001410:	1a88      	subs	r0, r1, r2
 8001412:	42a3      	cmp	r3, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	4252      	negs	r2, r2
 8001418:	4692      	mov	sl, r2
 800141a:	0002      	movs	r2, r0
 800141c:	4650      	mov	r0, sl
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	4692      	mov	sl, r2
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	d478      	bmi.n	8001518 <__aeabi_dadd+0x4bc>
 8001426:	4653      	mov	r3, sl
 8001428:	4323      	orrs	r3, r4
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3d2>
 800142c:	e66a      	b.n	8001104 <__aeabi_dadd+0xa8>
 800142e:	2100      	movs	r1, #0
 8001430:	2500      	movs	r5, #0
 8001432:	e745      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001434:	074a      	lsls	r2, r1, #29
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	08c9      	lsrs	r1, r1, #3
 800143c:	e73d      	b.n	80012ba <__aeabi_dadd+0x25e>
 800143e:	181c      	adds	r4, r3, r0
 8001440:	429c      	cmp	r4, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	4449      	add	r1, r9
 8001446:	468a      	mov	sl, r1
 8001448:	425b      	negs	r3, r3
 800144a:	449a      	add	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2601      	movs	r6, #1
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x3fa>
 8001454:	e727      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001456:	2602      	movs	r6, #2
 8001458:	4652      	mov	r2, sl
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <__aeabi_dadd+0x6bc>)
 800145c:	2101      	movs	r1, #1
 800145e:	401a      	ands	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4021      	ands	r1, r4
 8001464:	0862      	lsrs	r2, r4, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	07dc      	lsls	r4, r3, #31
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	469a      	mov	sl, r3
 800146e:	4314      	orrs	r4, r2
 8001470:	e670      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001472:	003a      	movs	r2, r7
 8001474:	464c      	mov	r4, r9
 8001476:	3a20      	subs	r2, #32
 8001478:	40d4      	lsrs	r4, r2
 800147a:	46a4      	mov	ip, r4
 800147c:	2f20      	cmp	r7, #32
 800147e:	d007      	beq.n	8001490 <__aeabi_dadd+0x434>
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4648      	mov	r0, r9
 8001484:	1bd2      	subs	r2, r2, r7
 8001486:	4090      	lsls	r0, r2
 8001488:	0002      	movs	r2, r0
 800148a:	4640      	mov	r0, r8
 800148c:	4310      	orrs	r0, r2
 800148e:	4680      	mov	r8, r0
 8001490:	4640      	mov	r0, r8
 8001492:	1e42      	subs	r2, r0, #1
 8001494:	4190      	sbcs	r0, r2
 8001496:	4662      	mov	r2, ip
 8001498:	0004      	movs	r4, r0
 800149a:	4314      	orrs	r4, r2
 800149c:	e624      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800149e:	4319      	orrs	r1, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4643      	mov	r3, r8
 80014a8:	1b1c      	subs	r4, r3, r4
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4649      	mov	r1, r9
 80014b0:	425b      	negs	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	469a      	mov	sl, r3
 80014b6:	4665      	mov	r5, ip
 80014b8:	0016      	movs	r6, r2
 80014ba:	e61b      	b.n	80010f4 <__aeabi_dadd+0x98>
 80014bc:	000c      	movs	r4, r1
 80014be:	431c      	orrs	r4, r3
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x468>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x5f8>
 80014c4:	1e7c      	subs	r4, r7, #1
 80014c6:	2f01      	cmp	r7, #1
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x470>
 80014ca:	e0f9      	b.n	80016c0 <__aeabi_dadd+0x664>
 80014cc:	4e91      	ldr	r6, [pc, #580]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014ce:	42b7      	cmp	r7, r6
 80014d0:	d05c      	beq.n	800158c <__aeabi_dadd+0x530>
 80014d2:	0027      	movs	r7, r4
 80014d4:	e740      	b.n	8001358 <__aeabi_dadd+0x2fc>
 80014d6:	2220      	movs	r2, #32
 80014d8:	464c      	mov	r4, r9
 80014da:	4640      	mov	r0, r8
 80014dc:	1bd2      	subs	r2, r2, r7
 80014de:	4094      	lsls	r4, r2
 80014e0:	40f8      	lsrs	r0, r7
 80014e2:	4304      	orrs	r4, r0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4090      	lsls	r0, r2
 80014e8:	1e42      	subs	r2, r0, #1
 80014ea:	4190      	sbcs	r0, r2
 80014ec:	464a      	mov	r2, r9
 80014ee:	40fa      	lsrs	r2, r7
 80014f0:	4304      	orrs	r4, r0
 80014f2:	1889      	adds	r1, r1, r2
 80014f4:	e6ee      	b.n	80012d4 <__aeabi_dadd+0x278>
 80014f6:	4c87      	ldr	r4, [pc, #540]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x4a2>
 80014fc:	e6f9      	b.n	80012f2 <__aeabi_dadd+0x296>
 80014fe:	1818      	adds	r0, r3, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	4449      	add	r1, r9
 8001506:	425b      	negs	r3, r3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	469a      	mov	sl, r3
 8001512:	0016      	movs	r6, r2
 8001514:	4304      	orrs	r4, r0
 8001516:	e6c6      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001518:	4642      	mov	r2, r8
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	45a0      	cmp	r8, r4
 800151e:	4180      	sbcs	r0, r0
 8001520:	464b      	mov	r3, r9
 8001522:	4240      	negs	r0, r0
 8001524:	1a59      	subs	r1, r3, r1
 8001526:	1a0b      	subs	r3, r1, r0
 8001528:	469a      	mov	sl, r3
 800152a:	4665      	mov	r5, ip
 800152c:	e5ea      	b.n	8001104 <__aeabi_dadd+0xa8>
 800152e:	464b      	mov	r3, r9
 8001530:	464a      	mov	r2, r9
 8001532:	08c0      	lsrs	r0, r0, #3
 8001534:	075b      	lsls	r3, r3, #29
 8001536:	4665      	mov	r5, ip
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e6bd      	b.n	80012ba <__aeabi_dadd+0x25e>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x4e8>
 8001542:	e08e      	b.n	8001662 <__aeabi_dadd+0x606>
 8001544:	464b      	mov	r3, r9
 8001546:	4303      	orrs	r3, r0
 8001548:	d117      	bne.n	800157a <__aeabi_dadd+0x51e>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	2500      	movs	r5, #0
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	e6da      	b.n	8001308 <__aeabi_dadd+0x2ac>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c9      	lsrs	r1, r1, #3
 800155a:	e6d1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800155c:	1a1c      	subs	r4, r3, r0
 800155e:	464a      	mov	r2, r9
 8001560:	42a3      	cmp	r3, r4
 8001562:	419b      	sbcs	r3, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	425b      	negs	r3, r3
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	469a      	mov	sl, r3
 800156c:	2601      	movs	r6, #1
 800156e:	e5c1      	b.n	80010f4 <__aeabi_dadd+0x98>
 8001570:	074a      	lsls	r2, r1, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	e69f      	b.n	80012ba <__aeabi_dadd+0x25e>
 800157a:	4643      	mov	r3, r8
 800157c:	08d8      	lsrs	r0, r3, #3
 800157e:	464b      	mov	r3, r9
 8001580:	464a      	mov	r2, r9
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4303      	orrs	r3, r0
 8001588:	08d1      	lsrs	r1, r2, #3
 800158a:	e6b9      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800158c:	4643      	mov	r3, r8
 800158e:	08d8      	lsrs	r0, r3, #3
 8001590:	464b      	mov	r3, r9
 8001592:	464a      	mov	r2, r9
 8001594:	075b      	lsls	r3, r3, #29
 8001596:	4303      	orrs	r3, r0
 8001598:	08d1      	lsrs	r1, r2, #3
 800159a:	e6b1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800159c:	4319      	orrs	r1, r3
 800159e:	000c      	movs	r4, r1
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	e6eb      	b.n	800137e <__aeabi_dadd+0x322>
 80015a6:	003c      	movs	r4, r7
 80015a8:	000d      	movs	r5, r1
 80015aa:	3c20      	subs	r4, #32
 80015ac:	40e5      	lsrs	r5, r4
 80015ae:	2f20      	cmp	r7, #32
 80015b0:	d003      	beq.n	80015ba <__aeabi_dadd+0x55e>
 80015b2:	2440      	movs	r4, #64	; 0x40
 80015b4:	1be4      	subs	r4, r4, r7
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	430b      	orrs	r3, r1
 80015ba:	001c      	movs	r4, r3
 80015bc:	1e63      	subs	r3, r4, #1
 80015be:	419c      	sbcs	r4, r3
 80015c0:	432c      	orrs	r4, r5
 80015c2:	e770      	b.n	80014a6 <__aeabi_dadd+0x44a>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d0e1      	beq.n	800158c <__aeabi_dadd+0x530>
 80015c8:	464a      	mov	r2, r9
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d0c1      	beq.n	8001552 <__aeabi_dadd+0x4f6>
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4211      	tst	r1, r2
 80015dc:	d008      	beq.n	80015f0 <__aeabi_dadd+0x594>
 80015de:	4648      	mov	r0, r9
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	4214      	tst	r4, r2
 80015e4:	d104      	bne.n	80015f0 <__aeabi_dadd+0x594>
 80015e6:	4643      	mov	r3, r8
 80015e8:	0021      	movs	r1, r4
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0742      	lsls	r2, r0, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0f5a      	lsrs	r2, r3, #29
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0752      	lsls	r2, r2, #29
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	e681      	b.n	8001300 <__aeabi_dadd+0x2a4>
 80015fc:	464b      	mov	r3, r9
 80015fe:	4303      	orrs	r3, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x5a8>
 8001602:	e714      	b.n	800142e <__aeabi_dadd+0x3d2>
 8001604:	464b      	mov	r3, r9
 8001606:	464a      	mov	r2, r9
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	4665      	mov	r5, ip
 800160e:	4303      	orrs	r3, r0
 8001610:	08d1      	lsrs	r1, r2, #3
 8001612:	e655      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001614:	1ac4      	subs	r4, r0, r3
 8001616:	45a0      	cmp	r8, r4
 8001618:	4180      	sbcs	r0, r0
 800161a:	464b      	mov	r3, r9
 800161c:	4240      	negs	r0, r0
 800161e:	1a59      	subs	r1, r3, r1
 8001620:	1a0b      	subs	r3, r1, r0
 8001622:	469a      	mov	sl, r3
 8001624:	4665      	mov	r5, ip
 8001626:	2601      	movs	r6, #1
 8001628:	e564      	b.n	80010f4 <__aeabi_dadd+0x98>
 800162a:	1a1c      	subs	r4, r3, r0
 800162c:	464a      	mov	r2, r9
 800162e:	42a3      	cmp	r3, r4
 8001630:	4180      	sbcs	r0, r0
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	4240      	negs	r0, r0
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	4692      	mov	sl, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d549      	bpl.n	80016d2 <__aeabi_dadd+0x676>
 800163e:	4642      	mov	r2, r8
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	45a0      	cmp	r8, r4
 8001644:	4180      	sbcs	r0, r0
 8001646:	464b      	mov	r3, r9
 8001648:	4240      	negs	r0, r0
 800164a:	1a59      	subs	r1, r3, r1
 800164c:	1a0b      	subs	r3, r1, r0
 800164e:	469a      	mov	sl, r3
 8001650:	4665      	mov	r5, ip
 8001652:	e57f      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001654:	464b      	mov	r3, r9
 8001656:	464a      	mov	r2, r9
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4303      	orrs	r3, r0
 800165e:	08d1      	lsrs	r1, r2, #3
 8001660:	e62b      	b.n	80012ba <__aeabi_dadd+0x25e>
 8001662:	464a      	mov	r2, r9
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4302      	orrs	r2, r0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x680>
 800166a:	074a      	lsls	r2, r1, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e646      	b.n	8001300 <__aeabi_dadd+0x2a4>
 8001672:	464b      	mov	r3, r9
 8001674:	464a      	mov	r2, r9
 8001676:	08c0      	lsrs	r0, r0, #3
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	4303      	orrs	r3, r0
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	e61f      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4449      	add	r1, r9
 8001688:	468a      	mov	sl, r1
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dadd+0x63a>
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001696:	4652      	mov	r2, sl
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <__aeabi_dadd+0x6bc>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e601      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016a2:	003c      	movs	r4, r7
 80016a4:	000e      	movs	r6, r1
 80016a6:	3c20      	subs	r4, #32
 80016a8:	40e6      	lsrs	r6, r4
 80016aa:	2f20      	cmp	r7, #32
 80016ac:	d003      	beq.n	80016b6 <__aeabi_dadd+0x65a>
 80016ae:	2440      	movs	r4, #64	; 0x40
 80016b0:	1be4      	subs	r4, r4, r7
 80016b2:	40a1      	lsls	r1, r4
 80016b4:	430b      	orrs	r3, r1
 80016b6:	001c      	movs	r4, r3
 80016b8:	1e63      	subs	r3, r4, #1
 80016ba:	419c      	sbcs	r4, r3
 80016bc:	4334      	orrs	r4, r6
 80016be:	e65e      	b.n	800137e <__aeabi_dadd+0x322>
 80016c0:	4443      	add	r3, r8
 80016c2:	4283      	cmp	r3, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4449      	add	r1, r9
 80016c8:	468a      	mov	sl, r1
 80016ca:	4240      	negs	r0, r0
 80016cc:	001c      	movs	r4, r3
 80016ce:	4482      	add	sl, r0
 80016d0:	e6bc      	b.n	800144c <__aeabi_dadd+0x3f0>
 80016d2:	4653      	mov	r3, sl
 80016d4:	4323      	orrs	r3, r4
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x67e>
 80016d8:	e6a9      	b.n	800142e <__aeabi_dadd+0x3d2>
 80016da:	e5e4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016dc:	074a      	lsls	r2, r1, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	4211      	tst	r1, r2
 80016e8:	d009      	beq.n	80016fe <__aeabi_dadd+0x6a2>
 80016ea:	4648      	mov	r0, r9
 80016ec:	08c4      	lsrs	r4, r0, #3
 80016ee:	4214      	tst	r4, r2
 80016f0:	d105      	bne.n	80016fe <__aeabi_dadd+0x6a2>
 80016f2:	4643      	mov	r3, r8
 80016f4:	4665      	mov	r5, ip
 80016f6:	0021      	movs	r1, r4
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0742      	lsls	r2, r0, #29
 80016fc:	4313      	orrs	r3, r2
 80016fe:	0f5a      	lsrs	r2, r3, #29
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	0752      	lsls	r2, r2, #29
 8001706:	4313      	orrs	r3, r2
 8001708:	e5fa      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800170a:	2300      	movs	r3, #0
 800170c:	4a01      	ldr	r2, [pc, #4]	; (8001714 <__aeabi_dadd+0x6b8>)
 800170e:	001c      	movs	r4, r3
 8001710:	e540      	b.n	8001194 <__aeabi_dadd+0x138>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	ff7fffff 	.word	0xff7fffff

0800171c <__aeabi_ddiv>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	030c      	lsls	r4, r1, #12
 800172a:	001f      	movs	r7, r3
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	4681      	mov	r9, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0005      	movs	r5, r0
 8001734:	b085      	sub	sp, #20
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	0fce      	lsrs	r6, r1, #31
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x26>
 8001740:	e152      	b.n	80019e8 <__aeabi_ddiv+0x2cc>
 8001742:	4ad2      	ldr	r2, [pc, #840]	; (8001a8c <__aeabi_ddiv+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2e>
 8001748:	e16e      	b.n	8001a28 <__aeabi_ddiv+0x30c>
 800174a:	0f42      	lsrs	r2, r0, #29
 800174c:	00e4      	lsls	r4, r4, #3
 800174e:	4314      	orrs	r4, r2
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4322      	orrs	r2, r4
 8001756:	4690      	mov	r8, r2
 8001758:	4acd      	ldr	r2, [pc, #820]	; (8001a90 <__aeabi_ddiv+0x374>)
 800175a:	00c5      	lsls	r5, r0, #3
 800175c:	4693      	mov	fp, r2
 800175e:	449b      	add	fp, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4699      	mov	r9, r3
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	033c      	lsls	r4, r7, #12
 8001768:	007b      	lsls	r3, r7, #1
 800176a:	4650      	mov	r0, sl
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	0fff      	lsrs	r7, r7, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x5c>
 8001776:	e11a      	b.n	80019ae <__aeabi_ddiv+0x292>
 8001778:	4ac4      	ldr	r2, [pc, #784]	; (8001a8c <__aeabi_ddiv+0x370>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x64>
 800177e:	e15e      	b.n	8001a3e <__aeabi_ddiv+0x322>
 8001780:	0f42      	lsrs	r2, r0, #29
 8001782:	00e4      	lsls	r4, r4, #3
 8001784:	4322      	orrs	r2, r4
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	4314      	orrs	r4, r2
 800178c:	4ac0      	ldr	r2, [pc, #768]	; (8001a90 <__aeabi_ddiv+0x374>)
 800178e:	00c1      	lsls	r1, r0, #3
 8001790:	4694      	mov	ip, r2
 8001792:	465a      	mov	r2, fp
 8001794:	4463      	add	r3, ip
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	469b      	mov	fp, r3
 800179a:	2000      	movs	r0, #0
 800179c:	0033      	movs	r3, r6
 800179e:	407b      	eors	r3, r7
 80017a0:	469a      	mov	sl, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d827      	bhi.n	80017f8 <__aeabi_ddiv+0xdc>
 80017a8:	4aba      	ldr	r2, [pc, #744]	; (8001a94 <__aeabi_ddiv+0x378>)
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	469f      	mov	pc, r3
 80017b0:	46b2      	mov	sl, r6
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d016      	beq.n	80017e6 <__aeabi_ddiv+0xca>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0xa2>
 80017bc:	e287      	b.n	8001cce <__aeabi_ddiv+0x5b2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d000      	beq.n	80017c4 <__aeabi_ddiv+0xa8>
 80017c2:	e0d5      	b.n	8001970 <__aeabi_ddiv+0x254>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4652      	mov	r2, sl
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	0019      	movs	r1, r3
 80017d8:	b005      	add	sp, #20
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2200      	movs	r2, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <__aeabi_ddiv+0x370>)
 80017ec:	e7ed      	b.n	80017ca <__aeabi_ddiv+0xae>
 80017ee:	46ba      	mov	sl, r7
 80017f0:	46a0      	mov	r8, r4
 80017f2:	000d      	movs	r5, r1
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	e7dc      	b.n	80017b2 <__aeabi_ddiv+0x96>
 80017f8:	4544      	cmp	r4, r8
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0xe2>
 80017fc:	e1c4      	b.n	8001b88 <__aeabi_ddiv+0x46c>
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0xe6>
 8001800:	e1bf      	b.n	8001b82 <__aeabi_ddiv+0x466>
 8001802:	2301      	movs	r3, #1
 8001804:	425b      	negs	r3, r3
 8001806:	469c      	mov	ip, r3
 8001808:	002e      	movs	r6, r5
 800180a:	4640      	mov	r0, r8
 800180c:	2500      	movs	r5, #0
 800180e:	44e3      	add	fp, ip
 8001810:	0223      	lsls	r3, r4, #8
 8001812:	0e0c      	lsrs	r4, r1, #24
 8001814:	431c      	orrs	r4, r3
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	4699      	mov	r9, r3
 800181a:	0423      	lsls	r3, r4, #16
 800181c:	020a      	lsls	r2, r1, #8
 800181e:	0c1f      	lsrs	r7, r3, #16
 8001820:	4649      	mov	r1, r9
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9701      	str	r7, [sp, #4]
 8001826:	f7fe fd11 	bl	800024c <__aeabi_uidivmod>
 800182a:	0002      	movs	r2, r0
 800182c:	437a      	muls	r2, r7
 800182e:	040b      	lsls	r3, r1, #16
 8001830:	0c31      	lsrs	r1, r6, #16
 8001832:	4680      	mov	r8, r0
 8001834:	4319      	orrs	r1, r3
 8001836:	428a      	cmp	r2, r1
 8001838:	d907      	bls.n	800184a <__aeabi_ddiv+0x12e>
 800183a:	2301      	movs	r3, #1
 800183c:	425b      	negs	r3, r3
 800183e:	469c      	mov	ip, r3
 8001840:	1909      	adds	r1, r1, r4
 8001842:	44e0      	add	r8, ip
 8001844:	428c      	cmp	r4, r1
 8001846:	d800      	bhi.n	800184a <__aeabi_ddiv+0x12e>
 8001848:	e201      	b.n	8001c4e <__aeabi_ddiv+0x532>
 800184a:	1a88      	subs	r0, r1, r2
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcfd 	bl	800024c <__aeabi_uidivmod>
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	4342      	muls	r2, r0
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	0003      	movs	r3, r0
 800185e:	430e      	orrs	r6, r1
 8001860:	42b2      	cmp	r2, r6
 8001862:	d904      	bls.n	800186e <__aeabi_ddiv+0x152>
 8001864:	1936      	adds	r6, r6, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	42b4      	cmp	r4, r6
 800186a:	d800      	bhi.n	800186e <__aeabi_ddiv+0x152>
 800186c:	e1e9      	b.n	8001c42 <__aeabi_ddiv+0x526>
 800186e:	1ab0      	subs	r0, r6, r2
 8001870:	4642      	mov	r2, r8
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	0c33      	lsrs	r3, r6, #16
 800187a:	001f      	movs	r7, r3
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4690      	mov	r8, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	0413      	lsls	r3, r2, #16
 8001884:	0432      	lsls	r2, r6, #16
 8001886:	0c16      	lsrs	r6, r2, #16
 8001888:	0032      	movs	r2, r6
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	9603      	str	r6, [sp, #12]
 8001890:	437b      	muls	r3, r7
 8001892:	434e      	muls	r6, r1
 8001894:	4379      	muls	r1, r7
 8001896:	0c17      	lsrs	r7, r2, #16
 8001898:	46bc      	mov	ip, r7
 800189a:	199b      	adds	r3, r3, r6
 800189c:	4463      	add	r3, ip
 800189e:	429e      	cmp	r6, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x18e>
 80018a2:	2680      	movs	r6, #128	; 0x80
 80018a4:	0276      	lsls	r6, r6, #9
 80018a6:	46b4      	mov	ip, r6
 80018a8:	4461      	add	r1, ip
 80018aa:	0c1e      	lsrs	r6, r3, #16
 80018ac:	1871      	adds	r1, r6, r1
 80018ae:	0416      	lsls	r6, r2, #16
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	199e      	adds	r6, r3, r6
 80018b6:	4288      	cmp	r0, r1
 80018b8:	d302      	bcc.n	80018c0 <__aeabi_ddiv+0x1a4>
 80018ba:	d112      	bne.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018bc:	42b5      	cmp	r5, r6
 80018be:	d210      	bcs.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018c0:	4643      	mov	r3, r8
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	469c      	mov	ip, r3
 80018c8:	4465      	add	r5, ip
 80018ca:	001f      	movs	r7, r3
 80018cc:	429d      	cmp	r5, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	425b      	negs	r3, r3
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	18c0      	adds	r0, r0, r3
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x1c0>
 80018da:	e19e      	b.n	8001c1a <__aeabi_ddiv+0x4fe>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x1c4>
 80018de:	e199      	b.n	8001c14 <__aeabi_ddiv+0x4f8>
 80018e0:	4690      	mov	r8, r2
 80018e2:	1bae      	subs	r6, r5, r6
 80018e4:	42b5      	cmp	r5, r6
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	1a40      	subs	r0, r0, r1
 80018ea:	426d      	negs	r5, r5
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x1d8>
 80018f2:	e1d2      	b.n	8001c9a <__aeabi_ddiv+0x57e>
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	040b      	lsls	r3, r1, #16
 80018fe:	4342      	muls	r2, r0
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	0005      	movs	r5, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d900      	bls.n	800190c <__aeabi_ddiv+0x1f0>
 800190a:	e16c      	b.n	8001be6 <__aeabi_ddiv+0x4ca>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fc9c 	bl	800024c <__aeabi_uidivmod>
 8001914:	9a01      	ldr	r2, [sp, #4]
 8001916:	0436      	lsls	r6, r6, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c36      	lsrs	r6, r6, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430e      	orrs	r6, r1
 8001922:	42b2      	cmp	r2, r6
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x20c>
 8001926:	e153      	b.n	8001bd0 <__aeabi_ddiv+0x4b4>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0002      	movs	r2, r0
 800192e:	042d      	lsls	r5, r5, #16
 8001930:	431d      	orrs	r5, r3
 8001932:	9f02      	ldr	r7, [sp, #8]
 8001934:	042b      	lsls	r3, r5, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	437b      	muls	r3, r7
 800193c:	469c      	mov	ip, r3
 800193e:	0c29      	lsrs	r1, r5, #16
 8001940:	4348      	muls	r0, r1
 8001942:	0c13      	lsrs	r3, r2, #16
 8001944:	4484      	add	ip, r0
 8001946:	4463      	add	r3, ip
 8001948:	4379      	muls	r1, r7
 800194a:	4298      	cmp	r0, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x23a>
 800194e:	2080      	movs	r0, #128	; 0x80
 8001950:	0240      	lsls	r0, r0, #9
 8001952:	4684      	mov	ip, r0
 8001954:	4461      	add	r1, ip
 8001956:	0c18      	lsrs	r0, r3, #16
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	1840      	adds	r0, r0, r1
 8001960:	189b      	adds	r3, r3, r2
 8001962:	4286      	cmp	r6, r0
 8001964:	d200      	bcs.n	8001968 <__aeabi_ddiv+0x24c>
 8001966:	e100      	b.n	8001b6a <__aeabi_ddiv+0x44e>
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x250>
 800196a:	e0fb      	b.n	8001b64 <__aeabi_ddiv+0x448>
 800196c:	2301      	movs	r3, #1
 800196e:	431d      	orrs	r5, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <__aeabi_ddiv+0x37c>)
 8001972:	445b      	add	r3, fp
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_ddiv+0x25e>
 8001978:	e0aa      	b.n	8001ad0 <__aeabi_ddiv+0x3b4>
 800197a:	076a      	lsls	r2, r5, #29
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x264>
 800197e:	e13d      	b.n	8001bfc <__aeabi_ddiv+0x4e0>
 8001980:	08e9      	lsrs	r1, r5, #3
 8001982:	4642      	mov	r2, r8
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_ddiv+0x27a>
 8001988:	4642      	mov	r2, r8
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <__aeabi_ddiv+0x380>)
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	4690      	mov	r8, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	445b      	add	r3, fp
 8001996:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <__aeabi_ddiv+0x384>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x282>
 800199c:	e723      	b.n	80017e6 <__aeabi_ddiv+0xca>
 800199e:	4642      	mov	r2, r8
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	0755      	lsls	r5, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	430d      	orrs	r5, r1
 80019a8:	0b12      	lsrs	r2, r2, #12
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	e70d      	b.n	80017ca <__aeabi_ddiv+0xae>
 80019ae:	4651      	mov	r1, sl
 80019b0:	4321      	orrs	r1, r4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x29a>
 80019b4:	e07c      	b.n	8001ab0 <__aeabi_ddiv+0x394>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2a0>
 80019ba:	e0fb      	b.n	8001bb4 <__aeabi_ddiv+0x498>
 80019bc:	0020      	movs	r0, r4
 80019be:	f001 fa63 	bl	8002e88 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	3a0b      	subs	r2, #11
 80019c6:	231d      	movs	r3, #29
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	0001      	movs	r1, r0
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	3908      	subs	r1, #8
 80019d4:	408b      	lsls	r3, r1
 80019d6:	408c      	lsls	r4, r1
 80019d8:	0019      	movs	r1, r3
 80019da:	4314      	orrs	r4, r2
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <__aeabi_ddiv+0x388>)
 80019de:	4458      	add	r0, fp
 80019e0:	469b      	mov	fp, r3
 80019e2:	4483      	add	fp, r0
 80019e4:	2000      	movs	r0, #0
 80019e6:	e6d9      	b.n	800179c <__aeabi_ddiv+0x80>
 80019e8:	0003      	movs	r3, r0
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	d044      	beq.n	8001a7a <__aeabi_ddiv+0x35e>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2da>
 80019f4:	e0cf      	b.n	8001b96 <__aeabi_ddiv+0x47a>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f001 fa46 	bl	8002e88 <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	390b      	subs	r1, #11
 8001a02:	231d      	movs	r3, #29
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	0010      	movs	r0, r2
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	464d      	mov	r5, r9
 8001a14:	4323      	orrs	r3, r4
 8001a16:	4698      	mov	r8, r3
 8001a18:	4085      	lsls	r5, r0
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_ddiv+0x38c>)
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	469b      	mov	fp, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4699      	mov	r9, r3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	e69e      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	d11d      	bne.n	8001a6c <__aeabi_ddiv+0x350>
 8001a30:	2208      	movs	r2, #8
 8001a32:	469b      	mov	fp, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	4691      	mov	r9, r2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e693      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a3e:	4651      	mov	r1, sl
 8001a40:	4321      	orrs	r1, r4
 8001a42:	d109      	bne.n	8001a58 <__aeabi_ddiv+0x33c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	464a      	mov	r2, r9
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a4c:	4691      	mov	r9, r2
 8001a4e:	469c      	mov	ip, r3
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	44e3      	add	fp, ip
 8001a56:	e6a1      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	464a      	mov	r2, r9
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a60:	4691      	mov	r9, r2
 8001a62:	469c      	mov	ip, r3
 8001a64:	4651      	mov	r1, sl
 8001a66:	2003      	movs	r0, #3
 8001a68:	44e3      	add	fp, ip
 8001a6a:	e697      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	469b      	mov	fp, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	46a0      	mov	r8, r4
 8001a74:	4691      	mov	r9, r2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	e675      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	469b      	mov	fp, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	2500      	movs	r5, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	e66d      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff
 8001a90:	fffffc01 	.word	0xfffffc01
 8001a94:	0800c3d4 	.word	0x0800c3d4
 8001a98:	000003ff 	.word	0x000003ff
 8001a9c:	feffffff 	.word	0xfeffffff
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000003f3 	.word	0x000003f3
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2400      	movs	r4, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e66e      	b.n	800179c <__aeabi_ddiv+0x80>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	e67e      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001acc:	2501      	movs	r5, #1
 8001ace:	426d      	negs	r5, r5
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2a38      	cmp	r2, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_ddiv+0x3be>
 8001ad8:	e674      	b.n	80017c4 <__aeabi_ddiv+0xa8>
 8001ada:	2a1f      	cmp	r2, #31
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x3c4>
 8001ade:	e0bd      	b.n	8001c5c <__aeabi_ddiv+0x540>
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x3de>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <__aeabi_ddiv+0x5d0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4091      	lsls	r1, r2
 8001af8:	430d      	orrs	r5, r1
 8001afa:	0029      	movs	r1, r5
 8001afc:	1e4a      	subs	r2, r1, #1
 8001afe:	4191      	sbcs	r1, r2
 8001b00:	4319      	orrs	r1, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	400d      	ands	r5, r1
 8001b0a:	420b      	tst	r3, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x3f4>
 8001b0e:	e0d0      	b.n	8001cb2 <__aeabi_ddiv+0x596>
 8001b10:	220f      	movs	r2, #15
 8001b12:	2300      	movs	r3, #0
 8001b14:	400a      	ands	r2, r1
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x400>
 8001b1a:	e0c7      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b1c:	1d0a      	adds	r2, r1, #4
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	4189      	sbcs	r1, r1
 8001b22:	4249      	negs	r1, r1
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_ddiv+0x412>
 8001b2c:	e0be      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	e649      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4643      	mov	r3, r8
 8001b3a:	0312      	lsls	r2, r2, #12
 8001b3c:	4213      	tst	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <__aeabi_ddiv+0x436>
 8001b40:	4214      	tst	r4, r2
 8001b42:	d106      	bne.n	8001b52 <__aeabi_ddiv+0x436>
 8001b44:	4322      	orrs	r2, r4
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	46ba      	mov	sl, r7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	e63b      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	4643      	mov	r3, r8
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	46b2      	mov	sl, r6
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b60:	0b12      	lsrs	r2, r2, #12
 8001b62:	e632      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0x44e>
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001b6a:	19a6      	adds	r6, r4, r6
 8001b6c:	1e6a      	subs	r2, r5, #1
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x458>
 8001b72:	e089      	b.n	8001c88 <__aeabi_ddiv+0x56c>
 8001b74:	4286      	cmp	r6, r0
 8001b76:	d200      	bcs.n	8001b7a <__aeabi_ddiv+0x45e>
 8001b78:	e09f      	b.n	8001cba <__aeabi_ddiv+0x59e>
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x462>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_ddiv+0x5c2>
 8001b7e:	0015      	movs	r5, r2
 8001b80:	e6f4      	b.n	800196c <__aeabi_ddiv+0x250>
 8001b82:	42a9      	cmp	r1, r5
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x46c>
 8001b86:	e63c      	b.n	8001802 <__aeabi_ddiv+0xe6>
 8001b88:	4643      	mov	r3, r8
 8001b8a:	07de      	lsls	r6, r3, #31
 8001b8c:	0858      	lsrs	r0, r3, #1
 8001b8e:	086b      	lsrs	r3, r5, #1
 8001b90:	431e      	orrs	r6, r3
 8001b92:	07ed      	lsls	r5, r5, #31
 8001b94:	e63c      	b.n	8001810 <__aeabi_ddiv+0xf4>
 8001b96:	f001 f977 	bl	8002e88 <__clzsi2>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3115      	adds	r1, #21
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	291c      	cmp	r1, #28
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_ddiv+0x48c>
 8001ba6:	e72c      	b.n	8001a02 <__aeabi_ddiv+0x2e6>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	3808      	subs	r0, #8
 8001bac:	4083      	lsls	r3, r0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	e732      	b.n	8001a1a <__aeabi_ddiv+0x2fe>
 8001bb4:	f001 f968 	bl	8002e88 <__clzsi2>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3020      	adds	r0, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4aa>
 8001bc4:	e6ff      	b.n	80019c6 <__aeabi_ddiv+0x2aa>
 8001bc6:	4654      	mov	r4, sl
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	409c      	lsls	r4, r3
 8001bce:	e705      	b.n	80019dc <__aeabi_ddiv+0x2c0>
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	42b4      	cmp	r4, r6
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4be>
 8001bd8:	e6a6      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x4c4>
 8001bde:	e6a3      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	1936      	adds	r6, r6, r4
 8001be4:	e6a0      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be6:	1909      	adds	r1, r1, r4
 8001be8:	3d01      	subs	r5, #1
 8001bea:	428c      	cmp	r4, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x4d4>
 8001bee:	e68d      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x4da>
 8001bf4:	e68a      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf6:	1e85      	subs	r5, r0, #2
 8001bf8:	1909      	adds	r1, r1, r4
 8001bfa:	e687      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	402a      	ands	r2, r5
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x4ea>
 8001c04:	e6bc      	b.n	8001980 <__aeabi_ddiv+0x264>
 8001c06:	1d29      	adds	r1, r5, #4
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	426d      	negs	r5, r5
 8001c0e:	08c9      	lsrs	r1, r1, #3
 8001c10:	44a8      	add	r8, r5
 8001c12:	e6b6      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001c14:	42af      	cmp	r7, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x4fe>
 8001c18:	e662      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c1a:	4281      	cmp	r1, r0
 8001c1c:	d804      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x506>
 8001c20:	e65e      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c26:	e65b      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	44e0      	add	r8, ip
 8001c32:	469c      	mov	ip, r3
 8001c34:	4465      	add	r5, ip
 8001c36:	429d      	cmp	r5, r3
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	e64f      	b.n	80018e2 <__aeabi_ddiv+0x1c6>
 8001c42:	42b2      	cmp	r2, r6
 8001c44:	d800      	bhi.n	8001c48 <__aeabi_ddiv+0x52c>
 8001c46:	e612      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	1936      	adds	r6, r6, r4
 8001c4c:	e60f      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d800      	bhi.n	8001c54 <__aeabi_ddiv+0x538>
 8001c52:	e5fa      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c54:	1e83      	subs	r3, r0, #2
 8001c56:	4698      	mov	r8, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	e5f6      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <__aeabi_ddiv+0x5d4>)
 8001c5e:	0028      	movs	r0, r5
 8001c60:	445b      	add	r3, fp
 8001c62:	4641      	mov	r1, r8
 8001c64:	409d      	lsls	r5, r3
 8001c66:	4099      	lsls	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	1e6b      	subs	r3, r5, #1
 8001c6c:	419d      	sbcs	r5, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	4301      	orrs	r1, r0
 8001c72:	4329      	orrs	r1, r5
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	074a      	lsls	r2, r1, #29
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x560>
 8001c7a:	e755      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	400a      	ands	r2, r1
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_ddiv+0x56a>
 8001c84:	e74a      	b.n	8001b1c <__aeabi_ddiv+0x400>
 8001c86:	e74f      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	4286      	cmp	r6, r0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x574>
 8001c8e:	e66d      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c90:	9a00      	ldr	r2, [sp, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x57c>
 8001c96:	e669      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <__aeabi_ddiv+0x5d8>)
 8001c9c:	445b      	add	r3, fp
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_ddiv+0x588>
 8001ca2:	e713      	b.n	8001acc <__aeabi_ddiv+0x3b0>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	44a8      	add	r8, r5
 8001caa:	e66a      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001cac:	075d      	lsls	r5, r3, #29
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	0b1a      	lsrs	r2, r3, #12
 8001cb2:	08c9      	lsrs	r1, r1, #3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	e587      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	3d02      	subs	r5, #2
 8001cbe:	004a      	lsls	r2, r1, #1
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	41bf      	sbcs	r7, r7
 8001cc4:	427f      	negs	r7, r7
 8001cc6:	193f      	adds	r7, r7, r4
 8001cc8:	19f6      	adds	r6, r6, r7
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	e7dd      	b.n	8001c8a <__aeabi_ddiv+0x56e>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	0312      	lsls	r2, r2, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	e575      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cde:	9900      	ldr	r1, [sp, #0]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d3ea      	bcc.n	8001cba <__aeabi_ddiv+0x59e>
 8001ce4:	0015      	movs	r5, r2
 8001ce6:	e7d3      	b.n	8001c90 <__aeabi_ddiv+0x574>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e
 8001cf4:	000003ff 	.word	0x000003ff

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464e      	mov	r6, r9
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	46de      	mov	lr, fp
 8001d00:	4657      	mov	r7, sl
 8001d02:	4690      	mov	r8, r2
 8001d04:	b5e0      	push	{r5, r6, r7, lr}
 8001d06:	0017      	movs	r7, r2
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	0b12      	lsrs	r2, r2, #12
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <__eqdf2+0x80>)
 8001d12:	030e      	lsls	r6, r1, #12
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	4691      	mov	r9, r2
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	0b36      	lsrs	r6, r6, #12
 8001d20:	0d64      	lsrs	r4, r4, #21
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	0d52      	lsrs	r2, r2, #21
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d019      	beq.n	8001d5e <__eqdf2+0x66>
 8001d2a:	4282      	cmp	r2, r0
 8001d2c:	d010      	beq.n	8001d50 <__eqdf2+0x58>
 8001d2e:	2001      	movs	r0, #1
 8001d30:	4294      	cmp	r4, r2
 8001d32:	d10e      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d34:	454e      	cmp	r6, r9
 8001d36:	d10c      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	45c4      	cmp	ip, r8
 8001d3c:	d109      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d3e:	4559      	cmp	r1, fp
 8001d40:	d017      	beq.n	8001d72 <__eqdf2+0x7a>
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d105      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d46:	0030      	movs	r0, r6
 8001d48:	4328      	orrs	r0, r5
 8001d4a:	1e43      	subs	r3, r0, #1
 8001d4c:	4198      	sbcs	r0, r3
 8001d4e:	e000      	b.n	8001d52 <__eqdf2+0x5a>
 8001d50:	2001      	movs	r0, #1
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	0033      	movs	r3, r6
 8001d60:	2001      	movs	r0, #1
 8001d62:	432b      	orrs	r3, r5
 8001d64:	d1f5      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d1f3      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	433b      	orrs	r3, r7
 8001d6e:	d1f0      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d70:	e7e2      	b.n	8001d38 <__eqdf2+0x40>
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7ed      	b.n	8001d52 <__eqdf2+0x5a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__gedf2>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4647      	mov	r7, r8
 8001d80:	46ce      	mov	lr, r9
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0016      	movs	r6, r2
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	4d2d      	ldr	r5, [pc, #180]	; (8001e44 <__gedf2+0xc8>)
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	4699      	mov	r9, r3
 8001d92:	b580      	push	{r7, lr}
 8001d94:	0043      	lsls	r3, r0, #1
 8001d96:	030f      	lsls	r7, r1, #12
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d021      	beq.n	8001dee <__gedf2+0x72>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d013      	beq.n	8001dd6 <__gedf2+0x5a>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d122      	bne.n	8001df8 <__gedf2+0x7c>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <__gedf2+0x42>
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d022      	beq.n	8001e04 <__gedf2+0x88>
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0x68>
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	d022      	beq.n	8001e0c <__gedf2+0x90>
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3901      	subs	r1, #1
 8001dca:	4008      	ands	r0, r1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	bcc0      	pop	{r6, r7}
 8001dd0:	46b9      	mov	r9, r7
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	d129      	bne.n	8001e30 <__gedf2+0xb4>
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d1f0      	bne.n	8001dc2 <__gedf2+0x46>
 8001de0:	433c      	orrs	r4, r7
 8001de2:	d1ee      	bne.n	8001dc2 <__gedf2+0x46>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f2      	bne.n	8001dce <__gedf2+0x52>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7ef      	b.n	8001dce <__gedf2+0x52>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d11d      	bne.n	8001e30 <__gedf2+0xb4>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0ee      	beq.n	8001dd6 <__gedf2+0x5a>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e2      	bne.n	8001dc2 <__gedf2+0x46>
 8001dfc:	464c      	mov	r4, r9
 8001dfe:	4326      	orrs	r6, r4
 8001e00:	d1df      	bne.n	8001dc2 <__gedf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__gedf2+0x4a>
 8001e04:	2000      	movs	r0, #0
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d0e1      	beq.n	8001dce <__gedf2+0x52>
 8001e0a:	e7dc      	b.n	8001dc6 <__gedf2+0x4a>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc0a      	bgt.n	8001e26 <__gedf2+0xaa>
 8001e10:	dbe8      	blt.n	8001de4 <__gedf2+0x68>
 8001e12:	454f      	cmp	r7, r9
 8001e14:	d8d7      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e16:	d00e      	beq.n	8001e36 <__gedf2+0xba>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	454f      	cmp	r7, r9
 8001e1c:	d2d7      	bcs.n	8001dce <__gedf2+0x52>
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d0e2      	beq.n	8001de8 <__gedf2+0x6c>
 8001e22:	0008      	movs	r0, r1
 8001e24:	e7d3      	b.n	8001dce <__gedf2+0x52>
 8001e26:	4243      	negs	r3, r0
 8001e28:	4158      	adcs	r0, r3
 8001e2a:	0040      	lsls	r0, r0, #1
 8001e2c:	3801      	subs	r0, #1
 8001e2e:	e7ce      	b.n	8001dce <__gedf2+0x52>
 8001e30:	2002      	movs	r0, #2
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7cb      	b.n	8001dce <__gedf2+0x52>
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d8c5      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c4      	cmp	ip, r8
 8001e3e:	d2c6      	bcs.n	8001dce <__gedf2+0x52>
 8001e40:	e7ed      	b.n	8001e1e <__gedf2+0xa2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__ledf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2c      	ldr	r5, [pc, #176]	; (8001f0c <__ledf2+0xc4>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d00d      	beq.n	8001e92 <__ledf2+0x4a>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d010      	beq.n	8001e9c <__ledf2+0x54>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d127      	bne.n	8001ece <__ledf2+0x86>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <__ledf2+0x60>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10e      	bne.n	8001ea8 <__ledf2+0x60>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d015      	beq.n	8001ebc <__ledf2+0x74>
 8001e90:	e00e      	b.n	8001eb0 <__ledf2+0x68>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d110      	bne.n	8001eba <__ledf2+0x72>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d118      	bne.n	8001ece <__ledf2+0x86>
 8001e9c:	464d      	mov	r5, r9
 8001e9e:	432e      	orrs	r6, r5
 8001ea0:	d10b      	bne.n	8001eba <__ledf2+0x72>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <__ledf2+0x64>
 8001ea6:	433c      	orrs	r4, r7
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d00b      	beq.n	8001ec4 <__ledf2+0x7c>
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d014      	beq.n	8001eda <__ledf2+0x92>
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	4008      	ands	r0, r1
 8001eb6:	3801      	subs	r0, #1
 8001eb8:	e000      	b.n	8001ebc <__ledf2+0x74>
 8001eba:	2002      	movs	r0, #2
 8001ebc:	bcc0      	pop	{r6, r7}
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	46b0      	mov	r8, r6
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f9      	bne.n	8001ebc <__ledf2+0x74>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f6      	b.n	8001ebc <__ledf2+0x74>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ec      	bne.n	8001eac <__ledf2+0x64>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e9      	bne.n	8001eac <__ledf2+0x64>
 8001ed8:	e7ea      	b.n	8001eb0 <__ledf2+0x68>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd04      	ble.n	8001ee8 <__ledf2+0xa0>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	e7e9      	b.n	8001ebc <__ledf2+0x74>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbeb      	blt.n	8001ec4 <__ledf2+0x7c>
 8001eec:	454f      	cmp	r7, r9
 8001eee:	d8df      	bhi.n	8001eb0 <__ledf2+0x68>
 8001ef0:	d006      	beq.n	8001f00 <__ledf2+0xb8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	d2e1      	bcs.n	8001ebc <__ledf2+0x74>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d0e5      	beq.n	8001ec8 <__ledf2+0x80>
 8001efc:	0008      	movs	r0, r1
 8001efe:	e7dd      	b.n	8001ebc <__ledf2+0x74>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8d5      	bhi.n	8001eb0 <__ledf2+0x68>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2d8      	bcs.n	8001ebc <__ledf2+0x74>
 8001f0a:	e7f5      	b.n	8001ef8 <__ledf2+0xb0>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	469b      	mov	fp, r3
 8001f24:	004d      	lsls	r5, r1, #1
 8001f26:	0fcb      	lsrs	r3, r1, #31
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e1cd      	b.n	80022d2 <__aeabi_dmul+0x3c2>
 8001f36:	4bce      	ldr	r3, [pc, #824]	; (8002270 <__aeabi_dmul+0x360>)
 8001f38:	429d      	cmp	r5, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e1e9      	b.n	8002312 <__aeabi_dmul+0x402>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0f43      	lsrs	r3, r0, #29
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	00c3      	lsls	r3, r0, #3
 8001f4e:	469a      	mov	sl, r3
 8001f50:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <__aeabi_dmul+0x364>)
 8001f52:	4693      	mov	fp, r2
 8001f54:	469c      	mov	ip, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4465      	add	r5, ip
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	033c      	lsls	r4, r7, #12
 8001f60:	007b      	lsls	r3, r7, #1
 8001f62:	4648      	mov	r0, r9
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	0fff      	lsrs	r7, r7, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x60>
 8001f6e:	e189      	b.n	8002284 <__aeabi_dmul+0x374>
 8001f70:	4abf      	ldr	r2, [pc, #764]	; (8002270 <__aeabi_dmul+0x360>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x9a>
 8001f76:	0f42      	lsrs	r2, r0, #29
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0424      	lsls	r4, r4, #16
 8001f80:	4314      	orrs	r4, r2
 8001f82:	4abc      	ldr	r2, [pc, #752]	; (8002274 <__aeabi_dmul+0x364>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4694      	mov	ip, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	4463      	add	r3, ip
 8001f8c:	195b      	adds	r3, r3, r5
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	407a      	eors	r2, r7
 8001f94:	3301      	adds	r3, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2e0a      	cmp	r6, #10
 8001f9e:	dd1c      	ble.n	8001fda <__aeabi_dmul+0xca>
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	2e0b      	cmp	r6, #11
 8001fa4:	d05e      	beq.n	8002064 <__aeabi_dmul+0x154>
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	e056      	b.n	8002058 <__aeabi_dmul+0x148>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <__aeabi_dmul+0x360>)
 8001fae:	4321      	orrs	r1, r4
 8001fb0:	18eb      	adds	r3, r5, r3
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d12a      	bne.n	800200e <__aeabi_dmul+0xfe>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	0100      	lsls	r0, r0, #4
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	4463      	add	r3, ip
 8001fc8:	407a      	eors	r2, r7
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2e0a      	cmp	r6, #10
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0xc4>
 8001fd2:	e231      	b.n	8002438 <__aeabi_dmul+0x528>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2e02      	cmp	r6, #2
 8001fdc:	dc26      	bgt.n	800202c <__aeabi_dmul+0x11c>
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d852      	bhi.n	800208a <__aeabi_dmul+0x17a>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d04c      	beq.n	8002082 <__aeabi_dmul+0x172>
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xde>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x310>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	07d2      	lsls	r2, r2, #31
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	0019      	movs	r1, r3
 8002000:	b007      	add	sp, #28
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	2203      	movs	r2, #3
 8002012:	0109      	lsls	r1, r1, #4
 8002014:	002b      	movs	r3, r5
 8002016:	468c      	mov	ip, r1
 8002018:	4316      	orrs	r6, r2
 800201a:	4642      	mov	r2, r8
 800201c:	4463      	add	r3, ip
 800201e:	407a      	eors	r2, r7
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2e0a      	cmp	r6, #10
 8002026:	dd00      	ble.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e228      	b.n	800247c <__aeabi_dmul+0x56c>
 800202a:	2103      	movs	r1, #3
 800202c:	2501      	movs	r5, #1
 800202e:	40b5      	lsls	r5, r6
 8002030:	46ac      	mov	ip, r5
 8002032:	26a6      	movs	r6, #166	; 0xa6
 8002034:	4663      	mov	r3, ip
 8002036:	00f6      	lsls	r6, r6, #3
 8002038:	4035      	ands	r5, r6
 800203a:	4233      	tst	r3, r6
 800203c:	d10b      	bne.n	8002056 <__aeabi_dmul+0x146>
 800203e:	2690      	movs	r6, #144	; 0x90
 8002040:	00b6      	lsls	r6, r6, #2
 8002042:	4233      	tst	r3, r6
 8002044:	d118      	bne.n	8002078 <__aeabi_dmul+0x168>
 8002046:	3eb9      	subs	r6, #185	; 0xb9
 8002048:	3eff      	subs	r6, #255	; 0xff
 800204a:	421e      	tst	r6, r3
 800204c:	d01d      	beq.n	800208a <__aeabi_dmul+0x17a>
 800204e:	46a3      	mov	fp, r4
 8002050:	4682      	mov	sl, r0
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	e000      	b.n	8002058 <__aeabi_dmul+0x148>
 8002056:	0017      	movs	r7, r2
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	2902      	cmp	r1, #2
 800205e:	d010      	beq.n	8002082 <__aeabi_dmul+0x172>
 8002060:	465c      	mov	r4, fp
 8002062:	4650      	mov	r0, sl
 8002064:	2903      	cmp	r1, #3
 8002066:	d1bf      	bne.n	8001fe8 <__aeabi_dmul+0xd8>
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	431c      	orrs	r4, r3
 800206e:	0324      	lsls	r4, r4, #12
 8002070:	0005      	movs	r5, r0
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <__aeabi_dmul+0x360>)
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	e7bd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	2200      	movs	r2, #0
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <__aeabi_dmul+0x360>)
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	e7b8      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002082:	2400      	movs	r4, #0
 8002084:	2500      	movs	r5, #0
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <__aeabi_dmul+0x360>)
 8002088:	e7b4      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800208a:	4653      	mov	r3, sl
 800208c:	041e      	lsls	r6, r3, #16
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	0c1f      	lsrs	r7, r3, #16
 8002092:	0033      	movs	r3, r6
 8002094:	0c01      	lsrs	r1, r0, #16
 8002096:	0400      	lsls	r0, r0, #16
 8002098:	0c00      	lsrs	r0, r0, #16
 800209a:	4343      	muls	r3, r0
 800209c:	4698      	mov	r8, r3
 800209e:	0003      	movs	r3, r0
 80020a0:	437b      	muls	r3, r7
 80020a2:	4699      	mov	r9, r3
 80020a4:	0033      	movs	r3, r6
 80020a6:	434b      	muls	r3, r1
 80020a8:	469c      	mov	ip, r3
 80020aa:	4643      	mov	r3, r8
 80020ac:	000d      	movs	r5, r1
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	437d      	muls	r5, r7
 80020b4:	44cc      	add	ip, r9
 80020b6:	44d4      	add	ip, sl
 80020b8:	9500      	str	r5, [sp, #0]
 80020ba:	45e1      	cmp	r9, ip
 80020bc:	d904      	bls.n	80020c8 <__aeabi_dmul+0x1b8>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	444d      	add	r5, r9
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	4663      	mov	r3, ip
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	001d      	movs	r5, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	469c      	mov	ip, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	4698      	mov	r8, r3
 80020dc:	4663      	mov	r3, ip
 80020de:	4443      	add	r3, r8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	0c23      	lsrs	r3, r4, #16
 80020e4:	4698      	mov	r8, r3
 80020e6:	0033      	movs	r3, r6
 80020e8:	0424      	lsls	r4, r4, #16
 80020ea:	0c24      	lsrs	r4, r4, #16
 80020ec:	4363      	muls	r3, r4
 80020ee:	469c      	mov	ip, r3
 80020f0:	0023      	movs	r3, r4
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4643      	mov	r3, r8
 80020f8:	435e      	muls	r6, r3
 80020fa:	435f      	muls	r7, r3
 80020fc:	444e      	add	r6, r9
 80020fe:	4663      	mov	r3, ip
 8002100:	46b2      	mov	sl, r6
 8002102:	0c1e      	lsrs	r6, r3, #16
 8002104:	4456      	add	r6, sl
 8002106:	45b1      	cmp	r9, r6
 8002108:	d903      	bls.n	8002112 <__aeabi_dmul+0x202>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4699      	mov	r9, r3
 8002110:	444f      	add	r7, r9
 8002112:	0c33      	lsrs	r3, r6, #16
 8002114:	4699      	mov	r9, r3
 8002116:	003b      	movs	r3, r7
 8002118:	444b      	add	r3, r9
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	4663      	mov	r3, ip
 800211e:	46ac      	mov	ip, r5
 8002120:	041f      	lsls	r7, r3, #16
 8002122:	0c3f      	lsrs	r7, r7, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	19f6      	adds	r6, r6, r7
 8002128:	44b4      	add	ip, r6
 800212a:	4663      	mov	r3, ip
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	465b      	mov	r3, fp
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	469c      	mov	ip, r3
 8002134:	465b      	mov	r3, fp
 8002136:	041f      	lsls	r7, r3, #16
 8002138:	0c3f      	lsrs	r7, r7, #16
 800213a:	003b      	movs	r3, r7
 800213c:	4343      	muls	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	4663      	mov	r3, ip
 8002142:	4343      	muls	r3, r0
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	4660      	mov	r0, ip
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	469b      	mov	fp, r3
 800214e:	4348      	muls	r0, r1
 8002150:	4379      	muls	r1, r7
 8002152:	4451      	add	r1, sl
 8002154:	4459      	add	r1, fp
 8002156:	458a      	cmp	sl, r1
 8002158:	d903      	bls.n	8002162 <__aeabi_dmul+0x252>
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	469a      	mov	sl, r3
 8002160:	4450      	add	r0, sl
 8002162:	0c0b      	lsrs	r3, r1, #16
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	4699      	mov	r9, r3
 800216e:	003b      	movs	r3, r7
 8002170:	4363      	muls	r3, r4
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	4645      	mov	r5, r8
 8002176:	4449      	add	r1, r9
 8002178:	4699      	mov	r9, r3
 800217a:	4663      	mov	r3, ip
 800217c:	435c      	muls	r4, r3
 800217e:	436b      	muls	r3, r5
 8002180:	469c      	mov	ip, r3
 8002182:	464b      	mov	r3, r9
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	4698      	mov	r8, r3
 8002188:	436f      	muls	r7, r5
 800218a:	193f      	adds	r7, r7, r4
 800218c:	4447      	add	r7, r8
 800218e:	4450      	add	r0, sl
 8002190:	42bc      	cmp	r4, r7
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x28c>
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4698      	mov	r8, r3
 800219a:	44c4      	add	ip, r8
 800219c:	9b04      	ldr	r3, [sp, #16]
 800219e:	9d00      	ldr	r5, [sp, #0]
 80021a0:	4698      	mov	r8, r3
 80021a2:	4445      	add	r5, r8
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	41b6      	sbcs	r6, r6
 80021a8:	4273      	negs	r3, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	464b      	mov	r3, r9
 80021ae:	041e      	lsls	r6, r3, #16
 80021b0:	9b05      	ldr	r3, [sp, #20]
 80021b2:	043c      	lsls	r4, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	19a4      	adds	r4, r4, r6
 80021ba:	444c      	add	r4, r9
 80021bc:	46a1      	mov	r9, r4
 80021be:	4683      	mov	fp, r0
 80021c0:	186e      	adds	r6, r5, r1
 80021c2:	44c1      	add	r9, r8
 80021c4:	428e      	cmp	r6, r1
 80021c6:	4189      	sbcs	r1, r1
 80021c8:	44cb      	add	fp, r9
 80021ca:	465d      	mov	r5, fp
 80021cc:	4249      	negs	r1, r1
 80021ce:	186d      	adds	r5, r5, r1
 80021d0:	429c      	cmp	r4, r3
 80021d2:	41a4      	sbcs	r4, r4
 80021d4:	45c1      	cmp	r9, r8
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	4583      	cmp	fp, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	428d      	cmp	r5, r1
 80021de:	4189      	sbcs	r1, r1
 80021e0:	425b      	negs	r3, r3
 80021e2:	4264      	negs	r4, r4
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4240      	negs	r0, r0
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	4249      	negs	r1, r1
 80021ec:	4301      	orrs	r1, r0
 80021ee:	0270      	lsls	r0, r6, #9
 80021f0:	0c3f      	lsrs	r7, r7, #16
 80021f2:	4318      	orrs	r0, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	1e47      	subs	r7, r0, #1
 80021f8:	41b8      	sbcs	r0, r7
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	0df6      	lsrs	r6, r6, #23
 8002200:	0261      	lsls	r1, r4, #9
 8002202:	4330      	orrs	r0, r6
 8002204:	0dec      	lsrs	r4, r5, #23
 8002206:	026e      	lsls	r6, r5, #9
 8002208:	430c      	orrs	r4, r1
 800220a:	4330      	orrs	r0, r6
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x302>
 8002210:	e0f1      	b.n	80023f6 <__aeabi_dmul+0x4e6>
 8002212:	2101      	movs	r1, #1
 8002214:	0843      	lsrs	r3, r0, #1
 8002216:	4001      	ands	r1, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	07e0      	lsls	r0, r4, #31
 800221c:	4318      	orrs	r0, r3
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4915      	ldr	r1, [pc, #84]	; (8002278 <__aeabi_dmul+0x368>)
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	468c      	mov	ip, r1
 8002226:	4463      	add	r3, ip
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x31e>
 800222c:	e097      	b.n	800235e <__aeabi_dmul+0x44e>
 800222e:	0741      	lsls	r1, r0, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x336>
 8002232:	210f      	movs	r1, #15
 8002234:	4001      	ands	r1, r0
 8002236:	2904      	cmp	r1, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x336>
 800223a:	1d01      	adds	r1, r0, #4
 800223c:	4281      	cmp	r1, r0
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	1824      	adds	r4, r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	01e1      	lsls	r1, r4, #7
 8002248:	d506      	bpl.n	8002258 <__aeabi_dmul+0x348>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	468c      	mov	ip, r1
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <__aeabi_dmul+0x36c>)
 8002252:	401c      	ands	r4, r3
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4463      	add	r3, ip
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <__aeabi_dmul+0x370>)
 800225a:	428b      	cmp	r3, r1
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x350>
 800225e:	e710      	b.n	8002082 <__aeabi_dmul+0x172>
 8002260:	0761      	lsls	r1, r4, #29
 8002262:	08c5      	lsrs	r5, r0, #3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	430d      	orrs	r5, r1
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	e6c1      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002270:	000007ff 	.word	0x000007ff
 8002274:	fffffc01 	.word	0xfffffc01
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	464b      	mov	r3, r9
 8002286:	4323      	orrs	r3, r4
 8002288:	d059      	beq.n	800233e <__aeabi_dmul+0x42e>
 800228a:	2c00      	cmp	r4, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x380>
 800228e:	e0a3      	b.n	80023d8 <__aeabi_dmul+0x4c8>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fdf9 	bl	8002e88 <__clzsi2>
 8002296:	0001      	movs	r1, r0
 8002298:	0003      	movs	r3, r0
 800229a:	390b      	subs	r1, #11
 800229c:	221d      	movs	r2, #29
 800229e:	1a52      	subs	r2, r2, r1
 80022a0:	4649      	mov	r1, r9
 80022a2:	0018      	movs	r0, r3
 80022a4:	40d1      	lsrs	r1, r2
 80022a6:	464a      	mov	r2, r9
 80022a8:	3808      	subs	r0, #8
 80022aa:	4082      	lsls	r2, r0
 80022ac:	4084      	lsls	r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	430c      	orrs	r4, r1
 80022b2:	4a74      	ldr	r2, [pc, #464]	; (8002484 <__aeabi_dmul+0x574>)
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	4694      	mov	ip, r2
 80022b8:	4642      	mov	r2, r8
 80022ba:	4463      	add	r3, ip
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	407a      	eors	r2, r7
 80022c2:	3301      	adds	r3, #1
 80022c4:	2100      	movs	r1, #0
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2e0a      	cmp	r6, #10
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dmul+0x3c0>
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dmul+0x90>
 80022d0:	e683      	b.n	8001fda <__aeabi_dmul+0xca>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4303      	orrs	r3, r0
 80022d6:	469a      	mov	sl, r3
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dmul+0x420>
 80022da:	465b      	mov	r3, fp
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06d      	beq.n	80023bc <__aeabi_dmul+0x4ac>
 80022e0:	4658      	mov	r0, fp
 80022e2:	f000 fdd1 	bl	8002e88 <__clzsi2>
 80022e6:	0001      	movs	r1, r0
 80022e8:	0003      	movs	r3, r0
 80022ea:	390b      	subs	r1, #11
 80022ec:	221d      	movs	r2, #29
 80022ee:	1a52      	subs	r2, r2, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	465d      	mov	r5, fp
 80022f6:	40d1      	lsrs	r1, r2
 80022f8:	3808      	subs	r0, #8
 80022fa:	4085      	lsls	r5, r0
 80022fc:	000a      	movs	r2, r1
 80022fe:	4084      	lsls	r4, r0
 8002300:	432a      	orrs	r2, r5
 8002302:	4693      	mov	fp, r2
 8002304:	46a2      	mov	sl, r4
 8002306:	4d5f      	ldr	r5, [pc, #380]	; (8002484 <__aeabi_dmul+0x574>)
 8002308:	2600      	movs	r6, #0
 800230a:	1aed      	subs	r5, r5, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	e625      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002312:	465b      	mov	r3, fp
 8002314:	4303      	orrs	r3, r0
 8002316:	469a      	mov	sl, r3
 8002318:	d105      	bne.n	8002326 <__aeabi_dmul+0x416>
 800231a:	2300      	movs	r3, #0
 800231c:	469b      	mov	fp, r3
 800231e:	3302      	adds	r3, #2
 8002320:	2608      	movs	r6, #8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	e61b      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002326:	2303      	movs	r3, #3
 8002328:	4682      	mov	sl, r0
 800232a:	260c      	movs	r6, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	e616      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002330:	2300      	movs	r3, #0
 8002332:	469b      	mov	fp, r3
 8002334:	3301      	adds	r3, #1
 8002336:	2604      	movs	r6, #4
 8002338:	2500      	movs	r5, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	e60f      	b.n	8001f5e <__aeabi_dmul+0x4e>
 800233e:	4642      	mov	r2, r8
 8002340:	3301      	adds	r3, #1
 8002342:	9501      	str	r5, [sp, #4]
 8002344:	431e      	orrs	r6, r3
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	407a      	eors	r2, r7
 800234a:	3301      	adds	r3, #1
 800234c:	2400      	movs	r4, #0
 800234e:	2000      	movs	r0, #0
 8002350:	2101      	movs	r1, #1
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2e0a      	cmp	r6, #10
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x44c>
 800235a:	e621      	b.n	8001fa0 <__aeabi_dmul+0x90>
 800235c:	e63d      	b.n	8001fda <__aeabi_dmul+0xca>
 800235e:	2101      	movs	r1, #1
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	2938      	cmp	r1, #56	; 0x38
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x458>
 8002366:	e642      	b.n	8001fee <__aeabi_dmul+0xde>
 8002368:	291f      	cmp	r1, #31
 800236a:	dd47      	ble.n	80023fc <__aeabi_dmul+0x4ec>
 800236c:	261f      	movs	r6, #31
 800236e:	0025      	movs	r5, r4
 8002370:	4276      	negs	r6, r6
 8002372:	1af3      	subs	r3, r6, r3
 8002374:	40dd      	lsrs	r5, r3
 8002376:	002b      	movs	r3, r5
 8002378:	2920      	cmp	r1, #32
 800237a:	d005      	beq.n	8002388 <__aeabi_dmul+0x478>
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <__aeabi_dmul+0x578>)
 800237e:	9d02      	ldr	r5, [sp, #8]
 8002380:	468c      	mov	ip, r1
 8002382:	4465      	add	r5, ip
 8002384:	40ac      	lsls	r4, r5
 8002386:	4320      	orrs	r0, r4
 8002388:	1e41      	subs	r1, r0, #1
 800238a:	4188      	sbcs	r0, r1
 800238c:	4318      	orrs	r0, r3
 800238e:	2307      	movs	r3, #7
 8002390:	001d      	movs	r5, r3
 8002392:	2400      	movs	r4, #0
 8002394:	4005      	ands	r5, r0
 8002396:	4203      	tst	r3, r0
 8002398:	d04a      	beq.n	8002430 <__aeabi_dmul+0x520>
 800239a:	230f      	movs	r3, #15
 800239c:	2400      	movs	r4, #0
 800239e:	4003      	ands	r3, r0
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d042      	beq.n	800242a <__aeabi_dmul+0x51a>
 80023a4:	1d03      	adds	r3, r0, #4
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	4240      	negs	r0, r0
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	0018      	movs	r0, r3
 80023b0:	0223      	lsls	r3, r4, #8
 80023b2:	d53a      	bpl.n	800242a <__aeabi_dmul+0x51a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	2400      	movs	r4, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	e61b      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 80023bc:	f000 fd64 	bl	8002e88 <__clzsi2>
 80023c0:	0001      	movs	r1, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	3115      	adds	r1, #21
 80023c6:	3320      	adds	r3, #32
 80023c8:	291c      	cmp	r1, #28
 80023ca:	dd8f      	ble.n	80022ec <__aeabi_dmul+0x3dc>
 80023cc:	3808      	subs	r0, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	4084      	lsls	r4, r0
 80023d2:	4692      	mov	sl, r2
 80023d4:	46a3      	mov	fp, r4
 80023d6:	e796      	b.n	8002306 <__aeabi_dmul+0x3f6>
 80023d8:	f000 fd56 	bl	8002e88 <__clzsi2>
 80023dc:	0001      	movs	r1, r0
 80023de:	0003      	movs	r3, r0
 80023e0:	3115      	adds	r1, #21
 80023e2:	3320      	adds	r3, #32
 80023e4:	291c      	cmp	r1, #28
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dmul+0x4da>
 80023e8:	e758      	b.n	800229c <__aeabi_dmul+0x38c>
 80023ea:	0002      	movs	r2, r0
 80023ec:	464c      	mov	r4, r9
 80023ee:	3a08      	subs	r2, #8
 80023f0:	2000      	movs	r0, #0
 80023f2:	4094      	lsls	r4, r2
 80023f4:	e75d      	b.n	80022b2 <__aeabi_dmul+0x3a2>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e711      	b.n	8002220 <__aeabi_dmul+0x310>
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <__aeabi_dmul+0x57c>)
 80023fe:	0026      	movs	r6, r4
 8002400:	469c      	mov	ip, r3
 8002402:	0003      	movs	r3, r0
 8002404:	9d02      	ldr	r5, [sp, #8]
 8002406:	40cb      	lsrs	r3, r1
 8002408:	4465      	add	r5, ip
 800240a:	40ae      	lsls	r6, r5
 800240c:	431e      	orrs	r6, r3
 800240e:	0003      	movs	r3, r0
 8002410:	40ab      	lsls	r3, r5
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	4183      	sbcs	r3, r0
 8002416:	0030      	movs	r0, r6
 8002418:	4318      	orrs	r0, r3
 800241a:	40cc      	lsrs	r4, r1
 800241c:	0743      	lsls	r3, r0, #29
 800241e:	d0c7      	beq.n	80023b0 <__aeabi_dmul+0x4a0>
 8002420:	230f      	movs	r3, #15
 8002422:	4003      	ands	r3, r0
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1bd      	bne.n	80023a4 <__aeabi_dmul+0x494>
 8002428:	e7c2      	b.n	80023b0 <__aeabi_dmul+0x4a0>
 800242a:	0765      	lsls	r5, r4, #29
 800242c:	0264      	lsls	r4, r4, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	08c0      	lsrs	r0, r0, #3
 8002432:	2300      	movs	r3, #0
 8002434:	4305      	orrs	r5, r0
 8002436:	e5dd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002438:	2500      	movs	r5, #0
 800243a:	2302      	movs	r3, #2
 800243c:	2e0f      	cmp	r6, #15
 800243e:	d10c      	bne.n	800245a <__aeabi_dmul+0x54a>
 8002440:	2480      	movs	r4, #128	; 0x80
 8002442:	465b      	mov	r3, fp
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	4223      	tst	r3, r4
 8002448:	d00e      	beq.n	8002468 <__aeabi_dmul+0x558>
 800244a:	4221      	tst	r1, r4
 800244c:	d10c      	bne.n	8002468 <__aeabi_dmul+0x558>
 800244e:	430c      	orrs	r4, r1
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	003a      	movs	r2, r7
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <__aeabi_dmul+0x580>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5cc      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800245a:	2e0b      	cmp	r6, #11
 800245c:	d000      	beq.n	8002460 <__aeabi_dmul+0x550>
 800245e:	e5a2      	b.n	8001fa6 <__aeabi_dmul+0x96>
 8002460:	468b      	mov	fp, r1
 8002462:	46aa      	mov	sl, r5
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e5f7      	b.n	8002058 <__aeabi_dmul+0x148>
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	465b      	mov	r3, fp
 800246c:	0324      	lsls	r4, r4, #12
 800246e:	431c      	orrs	r4, r3
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4642      	mov	r2, r8
 8002474:	4655      	mov	r5, sl
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__aeabi_dmul+0x580>)
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	e5bb      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800247c:	464d      	mov	r5, r9
 800247e:	0021      	movs	r1, r4
 8002480:	2303      	movs	r3, #3
 8002482:	e7db      	b.n	800243c <__aeabi_dmul+0x52c>
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	0000041e 	.word	0x0000041e
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dsub>:
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	4657      	mov	r7, sl
 8002498:	464e      	mov	r6, r9
 800249a:	4645      	mov	r5, r8
 800249c:	46de      	mov	lr, fp
 800249e:	b5e0      	push	{r5, r6, r7, lr}
 80024a0:	000d      	movs	r5, r1
 80024a2:	0004      	movs	r4, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	032b      	lsls	r3, r5, #12
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	0f62      	lsrs	r2, r4, #29
 80024ae:	431a      	orrs	r2, r3
 80024b0:	00e3      	lsls	r3, r4, #3
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	0a64      	lsrs	r4, r4, #9
 80024b6:	0f47      	lsrs	r7, r0, #29
 80024b8:	4327      	orrs	r7, r4
 80024ba:	4cd0      	ldr	r4, [pc, #832]	; (80027fc <__aeabi_dsub+0x368>)
 80024bc:	006e      	lsls	r6, r5, #1
 80024be:	4691      	mov	r9, r2
 80024c0:	b083      	sub	sp, #12
 80024c2:	004a      	lsls	r2, r1, #1
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4698      	mov	r8, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	0d76      	lsrs	r6, r6, #21
 80024cc:	0fed      	lsrs	r5, r5, #31
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	9001      	str	r0, [sp, #4]
 80024d4:	42a2      	cmp	r2, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x46>
 80024d8:	e0b9      	b.n	800264e <__aeabi_dsub+0x1ba>
 80024da:	2401      	movs	r4, #1
 80024dc:	4061      	eors	r1, r4
 80024de:	468b      	mov	fp, r1
 80024e0:	428d      	cmp	r5, r1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x52>
 80024e4:	e08d      	b.n	8002602 <__aeabi_dsub+0x16e>
 80024e6:	1ab4      	subs	r4, r6, r2
 80024e8:	46a4      	mov	ip, r4
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x5c>
 80024ee:	e0b7      	b.n	8002660 <__aeabi_dsub+0x1cc>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x62>
 80024f4:	e0cb      	b.n	800268e <__aeabi_dsub+0x1fa>
 80024f6:	4ac1      	ldr	r2, [pc, #772]	; (80027fc <__aeabi_dsub+0x368>)
 80024f8:	4296      	cmp	r6, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x6a>
 80024fc:	e186      	b.n	800280c <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x78>
 800250a:	e1a4      	b.n	8002856 <__aeabi_dsub+0x3c2>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x7e>
 8002510:	e21d      	b.n	800294e <__aeabi_dsub+0x4ba>
 8002512:	4661      	mov	r1, ip
 8002514:	2220      	movs	r2, #32
 8002516:	003c      	movs	r4, r7
 8002518:	1a52      	subs	r2, r2, r1
 800251a:	0001      	movs	r1, r0
 800251c:	4090      	lsls	r0, r2
 800251e:	4094      	lsls	r4, r2
 8002520:	1e42      	subs	r2, r0, #1
 8002522:	4190      	sbcs	r0, r2
 8002524:	4662      	mov	r2, ip
 8002526:	46a0      	mov	r8, r4
 8002528:	4664      	mov	r4, ip
 800252a:	40d7      	lsrs	r7, r2
 800252c:	464a      	mov	r2, r9
 800252e:	40e1      	lsrs	r1, r4
 8002530:	4644      	mov	r4, r8
 8002532:	1bd2      	subs	r2, r2, r7
 8002534:	4691      	mov	r9, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	1b1c      	subs	r4, r3, r4
 800253c:	42a3      	cmp	r3, r4
 800253e:	4192      	sbcs	r2, r2
 8002540:	464b      	mov	r3, r9
 8002542:	4252      	negs	r2, r2
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	469a      	mov	sl, r3
 8002548:	4653      	mov	r3, sl
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0xbc>
 800254e:	e12b      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002550:	4653      	mov	r3, sl
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	0a53      	lsrs	r3, r2, #9
 8002556:	469a      	mov	sl, r3
 8002558:	4653      	mov	r3, sl
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0xcc>
 800255e:	e166      	b.n	800282e <__aeabi_dsub+0x39a>
 8002560:	4650      	mov	r0, sl
 8002562:	f000 fc91 	bl	8002e88 <__clzsi2>
 8002566:	0003      	movs	r3, r0
 8002568:	3b08      	subs	r3, #8
 800256a:	2220      	movs	r2, #32
 800256c:	0020      	movs	r0, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	4651      	mov	r1, sl
 8002572:	40d0      	lsrs	r0, r2
 8002574:	4099      	lsls	r1, r3
 8002576:	0002      	movs	r2, r0
 8002578:	409c      	lsls	r4, r3
 800257a:	430a      	orrs	r2, r1
 800257c:	429e      	cmp	r6, r3
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0xee>
 8002580:	e164      	b.n	800284c <__aeabi_dsub+0x3b8>
 8002582:	1b9b      	subs	r3, r3, r6
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	291f      	cmp	r1, #31
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0xf8>
 800258a:	e0fe      	b.n	800278a <__aeabi_dsub+0x2f6>
 800258c:	2320      	movs	r3, #32
 800258e:	0010      	movs	r0, r2
 8002590:	0026      	movs	r6, r4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	409c      	lsls	r4, r3
 8002596:	4098      	lsls	r0, r3
 8002598:	40ce      	lsrs	r6, r1
 800259a:	40ca      	lsrs	r2, r1
 800259c:	1e63      	subs	r3, r4, #1
 800259e:	419c      	sbcs	r4, r3
 80025a0:	4330      	orrs	r0, r6
 80025a2:	4692      	mov	sl, r2
 80025a4:	2600      	movs	r6, #0
 80025a6:	4304      	orrs	r4, r0
 80025a8:	0763      	lsls	r3, r4, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	41a4      	sbcs	r4, r4
 80025ba:	4264      	negs	r4, r4
 80025bc:	44a2      	add	sl, r4
 80025be:	001c      	movs	r4, r3
 80025c0:	4653      	mov	r3, sl
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	d400      	bmi.n	80025c8 <__aeabi_dsub+0x134>
 80025c6:	e0f2      	b.n	80027ae <__aeabi_dsub+0x31a>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <__aeabi_dsub+0x368>)
 80025ca:	3601      	adds	r6, #1
 80025cc:	429e      	cmp	r6, r3
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x13e>
 80025d0:	e10f      	b.n	80027f2 <__aeabi_dsub+0x35e>
 80025d2:	4653      	mov	r3, sl
 80025d4:	498a      	ldr	r1, [pc, #552]	; (8002800 <__aeabi_dsub+0x36c>)
 80025d6:	08e4      	lsrs	r4, r4, #3
 80025d8:	400b      	ands	r3, r1
 80025da:	0019      	movs	r1, r3
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	4323      	orrs	r3, r4
 80025e0:	0572      	lsls	r2, r6, #21
 80025e2:	024c      	lsls	r4, r1, #9
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d52      	lsrs	r2, r2, #21
 80025e8:	0512      	lsls	r2, r2, #20
 80025ea:	4322      	orrs	r2, r4
 80025ec:	07ed      	lsls	r5, r5, #31
 80025ee:	432a      	orrs	r2, r5
 80025f0:	0018      	movs	r0, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	b003      	add	sp, #12
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	46bb      	mov	fp, r7
 80025fa:	46b2      	mov	sl, r6
 80025fc:	46a9      	mov	r9, r5
 80025fe:	46a0      	mov	r8, r4
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002602:	1ab4      	subs	r4, r6, r2
 8002604:	46a4      	mov	ip, r4
 8002606:	2c00      	cmp	r4, #0
 8002608:	dd59      	ble.n	80026be <__aeabi_dsub+0x22a>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x17c>
 800260e:	e0b0      	b.n	8002772 <__aeabi_dsub+0x2de>
 8002610:	4556      	cmp	r6, sl
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x182>
 8002614:	e0fa      	b.n	800280c <__aeabi_dsub+0x378>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	4317      	orrs	r7, r2
 800261c:	4662      	mov	r2, ip
 800261e:	2a38      	cmp	r2, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x190>
 8002622:	e0d4      	b.n	80027ce <__aeabi_dsub+0x33a>
 8002624:	2a1f      	cmp	r2, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x196>
 8002628:	e1c0      	b.n	80029ac <__aeabi_dsub+0x518>
 800262a:	0039      	movs	r1, r7
 800262c:	3a20      	subs	r2, #32
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4662      	mov	r2, ip
 8002632:	2a20      	cmp	r2, #32
 8002634:	d006      	beq.n	8002644 <__aeabi_dsub+0x1b0>
 8002636:	4664      	mov	r4, ip
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	1b12      	subs	r2, r2, r4
 800263c:	003c      	movs	r4, r7
 800263e:	4094      	lsls	r4, r2
 8002640:	4304      	orrs	r4, r0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9c01      	ldr	r4, [sp, #4]
 8002646:	1e62      	subs	r2, r4, #1
 8002648:	4194      	sbcs	r4, r2
 800264a:	430c      	orrs	r4, r1
 800264c:	e0c3      	b.n	80027d6 <__aeabi_dsub+0x342>
 800264e:	003c      	movs	r4, r7
 8002650:	4304      	orrs	r4, r0
 8002652:	d02b      	beq.n	80026ac <__aeabi_dsub+0x218>
 8002654:	468b      	mov	fp, r1
 8002656:	428d      	cmp	r5, r1
 8002658:	d02e      	beq.n	80026b8 <__aeabi_dsub+0x224>
 800265a:	4c6a      	ldr	r4, [pc, #424]	; (8002804 <__aeabi_dsub+0x370>)
 800265c:	46a4      	mov	ip, r4
 800265e:	44b4      	add	ip, r6
 8002660:	4664      	mov	r4, ip
 8002662:	2c00      	cmp	r4, #0
 8002664:	d05f      	beq.n	8002726 <__aeabi_dsub+0x292>
 8002666:	1b94      	subs	r4, r2, r6
 8002668:	46a4      	mov	ip, r4
 800266a:	2e00      	cmp	r6, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x1dc>
 800266e:	e120      	b.n	80028b2 <__aeabi_dsub+0x41e>
 8002670:	464c      	mov	r4, r9
 8002672:	431c      	orrs	r4, r3
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x1e4>
 8002676:	e1c7      	b.n	8002a08 <__aeabi_dsub+0x574>
 8002678:	4661      	mov	r1, ip
 800267a:	1e4c      	subs	r4, r1, #1
 800267c:	2901      	cmp	r1, #1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1ee>
 8002680:	e223      	b.n	8002aca <__aeabi_dsub+0x636>
 8002682:	4d5e      	ldr	r5, [pc, #376]	; (80027fc <__aeabi_dsub+0x368>)
 8002684:	45ac      	cmp	ip, r5
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x1f6>
 8002688:	e1d8      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 800268a:	46a4      	mov	ip, r4
 800268c:	e11a      	b.n	80028c4 <__aeabi_dsub+0x430>
 800268e:	003a      	movs	r2, r7
 8002690:	4302      	orrs	r2, r0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x202>
 8002694:	e0e4      	b.n	8002860 <__aeabi_dsub+0x3cc>
 8002696:	0022      	movs	r2, r4
 8002698:	3a01      	subs	r2, #1
 800269a:	2c01      	cmp	r4, #1
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x20c>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x594>
 80026a0:	4956      	ldr	r1, [pc, #344]	; (80027fc <__aeabi_dsub+0x368>)
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x214>
 80026a6:	e0b1      	b.n	800280c <__aeabi_dsub+0x378>
 80026a8:	4694      	mov	ip, r2
 80026aa:	e72b      	b.n	8002504 <__aeabi_dsub+0x70>
 80026ac:	2401      	movs	r4, #1
 80026ae:	4061      	eors	r1, r4
 80026b0:	468b      	mov	fp, r1
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x224>
 80026b6:	e716      	b.n	80024e6 <__aeabi_dsub+0x52>
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <__aeabi_dsub+0x370>)
 80026ba:	468c      	mov	ip, r1
 80026bc:	44b4      	add	ip, r6
 80026be:	4664      	mov	r4, ip
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x232>
 80026c4:	e0d3      	b.n	800286e <__aeabi_dsub+0x3da>
 80026c6:	1b91      	subs	r1, r2, r6
 80026c8:	468c      	mov	ip, r1
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x23c>
 80026ce:	e15e      	b.n	800298e <__aeabi_dsub+0x4fa>
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <__aeabi_dsub+0x368>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x244>
 80026d6:	e1be      	b.n	8002a56 <__aeabi_dsub+0x5c2>
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	464c      	mov	r4, r9
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	430c      	orrs	r4, r1
 80026e0:	46a1      	mov	r9, r4
 80026e2:	4661      	mov	r1, ip
 80026e4:	2938      	cmp	r1, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x256>
 80026e8:	e1ba      	b.n	8002a60 <__aeabi_dsub+0x5cc>
 80026ea:	291f      	cmp	r1, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x25c>
 80026ee:	e227      	b.n	8002b40 <__aeabi_dsub+0x6ac>
 80026f0:	2420      	movs	r4, #32
 80026f2:	1a64      	subs	r4, r4, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	40a1      	lsls	r1, r4
 80026f8:	001e      	movs	r6, r3
 80026fa:	4688      	mov	r8, r1
 80026fc:	4661      	mov	r1, ip
 80026fe:	40a3      	lsls	r3, r4
 8002700:	40ce      	lsrs	r6, r1
 8002702:	4641      	mov	r1, r8
 8002704:	1e5c      	subs	r4, r3, #1
 8002706:	41a3      	sbcs	r3, r4
 8002708:	4331      	orrs	r1, r6
 800270a:	4319      	orrs	r1, r3
 800270c:	000c      	movs	r4, r1
 800270e:	4663      	mov	r3, ip
 8002710:	4649      	mov	r1, r9
 8002712:	40d9      	lsrs	r1, r3
 8002714:	187f      	adds	r7, r7, r1
 8002716:	1824      	adds	r4, r4, r0
 8002718:	4284      	cmp	r4, r0
 800271a:	419b      	sbcs	r3, r3
 800271c:	425b      	negs	r3, r3
 800271e:	469a      	mov	sl, r3
 8002720:	0016      	movs	r6, r2
 8002722:	44ba      	add	sl, r7
 8002724:	e05d      	b.n	80027e2 <__aeabi_dsub+0x34e>
 8002726:	4c38      	ldr	r4, [pc, #224]	; (8002808 <__aeabi_dsub+0x374>)
 8002728:	1c72      	adds	r2, r6, #1
 800272a:	4222      	tst	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x29c>
 800272e:	e0df      	b.n	80028f0 <__aeabi_dsub+0x45c>
 8002730:	464a      	mov	r2, r9
 8002732:	431a      	orrs	r2, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x2a6>
 8002738:	e15c      	b.n	80029f4 <__aeabi_dsub+0x560>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2ac>
 800273e:	e1cf      	b.n	8002ae0 <__aeabi_dsub+0x64c>
 8002740:	003a      	movs	r2, r7
 8002742:	4302      	orrs	r2, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x2b4>
 8002746:	e17f      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002748:	1a1c      	subs	r4, r3, r0
 800274a:	464a      	mov	r2, r9
 800274c:	42a3      	cmp	r3, r4
 800274e:	4189      	sbcs	r1, r1
 8002750:	1bd2      	subs	r2, r2, r7
 8002752:	4249      	negs	r1, r1
 8002754:	1a52      	subs	r2, r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	d400      	bmi.n	800275e <__aeabi_dsub+0x2ca>
 800275c:	e20a      	b.n	8002b74 <__aeabi_dsub+0x6e0>
 800275e:	1ac4      	subs	r4, r0, r3
 8002760:	42a0      	cmp	r0, r4
 8002762:	4180      	sbcs	r0, r0
 8002764:	464b      	mov	r3, r9
 8002766:	4240      	negs	r0, r0
 8002768:	1aff      	subs	r7, r7, r3
 800276a:	1a3b      	subs	r3, r7, r0
 800276c:	469a      	mov	sl, r3
 800276e:	465d      	mov	r5, fp
 8002770:	e71a      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002772:	003a      	movs	r2, r7
 8002774:	4302      	orrs	r2, r0
 8002776:	d073      	beq.n	8002860 <__aeabi_dsub+0x3cc>
 8002778:	0022      	movs	r2, r4
 800277a:	3a01      	subs	r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x2ee>
 8002780:	e0cb      	b.n	800291a <__aeabi_dsub+0x486>
 8002782:	4554      	cmp	r4, sl
 8002784:	d042      	beq.n	800280c <__aeabi_dsub+0x378>
 8002786:	4694      	mov	ip, r2
 8002788:	e748      	b.n	800261c <__aeabi_dsub+0x188>
 800278a:	0010      	movs	r0, r2
 800278c:	3b1f      	subs	r3, #31
 800278e:	40d8      	lsrs	r0, r3
 8002790:	2920      	cmp	r1, #32
 8002792:	d003      	beq.n	800279c <__aeabi_dsub+0x308>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	409a      	lsls	r2, r3
 800279a:	4314      	orrs	r4, r2
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	469a      	mov	sl, r3
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x31a>
 80027ac:	e6fe      	b.n	80025ac <__aeabi_dsub+0x118>
 80027ae:	4652      	mov	r2, sl
 80027b0:	08e3      	lsrs	r3, r4, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4652      	mov	r2, sl
 80027b8:	46b4      	mov	ip, r6
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x368>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d02a      	beq.n	8002818 <__aeabi_dsub+0x384>
 80027c2:	0312      	lsls	r2, r2, #12
 80027c4:	0b14      	lsrs	r4, r2, #12
 80027c6:	4662      	mov	r2, ip
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	0d52      	lsrs	r2, r2, #21
 80027cc:	e70c      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027ce:	003c      	movs	r4, r7
 80027d0:	4304      	orrs	r4, r0
 80027d2:	1e62      	subs	r2, r4, #1
 80027d4:	4194      	sbcs	r4, r2
 80027d6:	18e4      	adds	r4, r4, r3
 80027d8:	429c      	cmp	r4, r3
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	444a      	add	r2, r9
 80027e0:	4692      	mov	sl, r2
 80027e2:	4653      	mov	r3, sl
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5df      	bpl.n	80027a8 <__aeabi_dsub+0x314>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x368>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x35e>
 80027f0:	e0a0      	b.n	8002934 <__aeabi_dsub+0x4a0>
 80027f2:	0032      	movs	r2, r6
 80027f4:	2400      	movs	r4, #0
 80027f6:	2300      	movs	r3, #0
 80027f8:	e6f6      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	464a      	mov	r2, r9
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	464a      	mov	r2, r9
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	0019      	movs	r1, r3
 800281a:	4311      	orrs	r1, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x38c>
 800281e:	e1b5      	b.n	8002b8c <__aeabi_dsub+0x6f8>
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	0324      	lsls	r4, r4, #12
 8002824:	4314      	orrs	r4, r2
 8002826:	0324      	lsls	r4, r4, #12
 8002828:	4ad5      	ldr	r2, [pc, #852]	; (8002b80 <__aeabi_dsub+0x6ec>)
 800282a:	0b24      	lsrs	r4, r4, #12
 800282c:	e6dc      	b.n	80025e8 <__aeabi_dsub+0x154>
 800282e:	0020      	movs	r0, r4
 8002830:	f000 fb2a 	bl	8002e88 <__clzsi2>
 8002834:	0003      	movs	r3, r0
 8002836:	3318      	adds	r3, #24
 8002838:	2b1f      	cmp	r3, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dsub+0x3aa>
 800283c:	e695      	b.n	800256a <__aeabi_dsub+0xd6>
 800283e:	0022      	movs	r2, r4
 8002840:	3808      	subs	r0, #8
 8002842:	4082      	lsls	r2, r0
 8002844:	2400      	movs	r4, #0
 8002846:	429e      	cmp	r6, r3
 8002848:	dc00      	bgt.n	800284c <__aeabi_dsub+0x3b8>
 800284a:	e69a      	b.n	8002582 <__aeabi_dsub+0xee>
 800284c:	1af6      	subs	r6, r6, r3
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002850:	401a      	ands	r2, r3
 8002852:	4692      	mov	sl, r2
 8002854:	e6a8      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002856:	003c      	movs	r4, r7
 8002858:	4304      	orrs	r4, r0
 800285a:	1e62      	subs	r2, r4, #1
 800285c:	4194      	sbcs	r4, r2
 800285e:	e66c      	b.n	800253a <__aeabi_dsub+0xa6>
 8002860:	464a      	mov	r2, r9
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0752      	lsls	r2, r2, #29
 8002866:	4313      	orrs	r3, r2
 8002868:	464a      	mov	r2, r9
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	e7a6      	b.n	80027bc <__aeabi_dsub+0x328>
 800286e:	4cc6      	ldr	r4, [pc, #792]	; (8002b88 <__aeabi_dsub+0x6f4>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x3e4>
 8002876:	e0ac      	b.n	80029d2 <__aeabi_dsub+0x53e>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3ee>
 8002880:	e105      	b.n	8002a8e <__aeabi_dsub+0x5fa>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3f4>
 8002886:	e156      	b.n	8002b36 <__aeabi_dsub+0x6a2>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x3fc>
 800288e:	e0db      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002890:	181c      	adds	r4, r3, r0
 8002892:	429c      	cmp	r4, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	444f      	add	r7, r9
 8002898:	46ba      	mov	sl, r7
 800289a:	425b      	negs	r3, r3
 800289c:	449a      	add	sl, r3
 800289e:	4653      	mov	r3, sl
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x412>
 80028a4:	e780      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028a6:	4652      	mov	r2, sl
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <__aeabi_dsub+0x6f0>)
 80028aa:	2601      	movs	r6, #1
 80028ac:	401a      	ands	r2, r3
 80028ae:	4692      	mov	sl, r2
 80028b0:	e77a      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028b2:	4cb3      	ldr	r4, [pc, #716]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x426>
 80028b8:	e0c0      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	464d      	mov	r5, r9
 80028be:	0424      	lsls	r4, r4, #16
 80028c0:	4325      	orrs	r5, r4
 80028c2:	46a9      	mov	r9, r5
 80028c4:	4664      	mov	r4, ip
 80028c6:	2c38      	cmp	r4, #56	; 0x38
 80028c8:	dc53      	bgt.n	8002972 <__aeabi_dsub+0x4de>
 80028ca:	4661      	mov	r1, ip
 80028cc:	2c1f      	cmp	r4, #31
 80028ce:	dd00      	ble.n	80028d2 <__aeabi_dsub+0x43e>
 80028d0:	e0cd      	b.n	8002a6e <__aeabi_dsub+0x5da>
 80028d2:	2520      	movs	r5, #32
 80028d4:	001e      	movs	r6, r3
 80028d6:	1b2d      	subs	r5, r5, r4
 80028d8:	464c      	mov	r4, r9
 80028da:	40ab      	lsls	r3, r5
 80028dc:	40ac      	lsls	r4, r5
 80028de:	40ce      	lsrs	r6, r1
 80028e0:	1e5d      	subs	r5, r3, #1
 80028e2:	41ab      	sbcs	r3, r5
 80028e4:	4334      	orrs	r4, r6
 80028e6:	4323      	orrs	r3, r4
 80028e8:	464c      	mov	r4, r9
 80028ea:	40cc      	lsrs	r4, r1
 80028ec:	1b3f      	subs	r7, r7, r4
 80028ee:	e045      	b.n	800297c <__aeabi_dsub+0x4e8>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a1c      	subs	r4, r3, r0
 80028f4:	1bd1      	subs	r1, r2, r7
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	4192      	sbcs	r2, r2
 80028fa:	4252      	negs	r2, r2
 80028fc:	4692      	mov	sl, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	4651      	mov	r1, sl
 8002902:	1a52      	subs	r2, r2, r1
 8002904:	4692      	mov	sl, r2
 8002906:	0212      	lsls	r2, r2, #8
 8002908:	d500      	bpl.n	800290c <__aeabi_dsub+0x478>
 800290a:	e083      	b.n	8002a14 <__aeabi_dsub+0x580>
 800290c:	4653      	mov	r3, sl
 800290e:	4323      	orrs	r3, r4
 8002910:	d000      	beq.n	8002914 <__aeabi_dsub+0x480>
 8002912:	e621      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002914:	2200      	movs	r2, #0
 8002916:	2500      	movs	r5, #0
 8002918:	e753      	b.n	80027c2 <__aeabi_dsub+0x32e>
 800291a:	181c      	adds	r4, r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	444f      	add	r7, r9
 8002922:	46ba      	mov	sl, r7
 8002924:	425b      	negs	r3, r3
 8002926:	449a      	add	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2601      	movs	r6, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x49e>
 8002930:	e73a      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002932:	2602      	movs	r6, #2
 8002934:	4652      	mov	r2, sl
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002938:	2101      	movs	r1, #1
 800293a:	401a      	ands	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	4021      	ands	r1, r4
 8002940:	0862      	lsrs	r2, r4, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	07dc      	lsls	r4, r3, #31
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	469a      	mov	sl, r3
 800294a:	4314      	orrs	r4, r2
 800294c:	e62c      	b.n	80025a8 <__aeabi_dsub+0x114>
 800294e:	0039      	movs	r1, r7
 8002950:	3a20      	subs	r2, #32
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4662      	mov	r2, ip
 8002956:	2a20      	cmp	r2, #32
 8002958:	d006      	beq.n	8002968 <__aeabi_dsub+0x4d4>
 800295a:	4664      	mov	r4, ip
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1b12      	subs	r2, r2, r4
 8002960:	003c      	movs	r4, r7
 8002962:	4094      	lsls	r4, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9c01      	ldr	r4, [sp, #4]
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	4194      	sbcs	r4, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	e5e3      	b.n	800253a <__aeabi_dsub+0xa6>
 8002972:	4649      	mov	r1, r9
 8002974:	4319      	orrs	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	1e5c      	subs	r4, r3, #1
 800297a:	41a3      	sbcs	r3, r4
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	42a0      	cmp	r0, r4
 8002980:	419b      	sbcs	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	1afb      	subs	r3, r7, r3
 8002986:	469a      	mov	sl, r3
 8002988:	465d      	mov	r5, fp
 800298a:	0016      	movs	r6, r2
 800298c:	e5dc      	b.n	8002548 <__aeabi_dsub+0xb4>
 800298e:	4649      	mov	r1, r9
 8002990:	4319      	orrs	r1, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x502>
 8002994:	e0ae      	b.n	8002af4 <__aeabi_dsub+0x660>
 8002996:	4661      	mov	r1, ip
 8002998:	4664      	mov	r4, ip
 800299a:	3901      	subs	r1, #1
 800299c:	2c01      	cmp	r4, #1
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x50e>
 80029a0:	e0e0      	b.n	8002b64 <__aeabi_dsub+0x6d0>
 80029a2:	4c77      	ldr	r4, [pc, #476]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029a4:	45a4      	cmp	ip, r4
 80029a6:	d056      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 80029a8:	468c      	mov	ip, r1
 80029aa:	e69a      	b.n	80026e2 <__aeabi_dsub+0x24e>
 80029ac:	4661      	mov	r1, ip
 80029ae:	2220      	movs	r2, #32
 80029b0:	003c      	movs	r4, r7
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	4094      	lsls	r4, r2
 80029b6:	0001      	movs	r1, r0
 80029b8:	4090      	lsls	r0, r2
 80029ba:	46a0      	mov	r8, r4
 80029bc:	4664      	mov	r4, ip
 80029be:	1e42      	subs	r2, r0, #1
 80029c0:	4190      	sbcs	r0, r2
 80029c2:	4662      	mov	r2, ip
 80029c4:	40e1      	lsrs	r1, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	40d7      	lsrs	r7, r2
 80029ca:	430c      	orrs	r4, r1
 80029cc:	4304      	orrs	r4, r0
 80029ce:	44b9      	add	r9, r7
 80029d0:	e701      	b.n	80027d6 <__aeabi_dsub+0x342>
 80029d2:	496b      	ldr	r1, [pc, #428]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x546>
 80029d8:	e70c      	b.n	80027f4 <__aeabi_dsub+0x360>
 80029da:	1818      	adds	r0, r3, r0
 80029dc:	4298      	cmp	r0, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	444f      	add	r7, r9
 80029e2:	425b      	negs	r3, r3
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	07dc      	lsls	r4, r3, #31
 80029e8:	0840      	lsrs	r0, r0, #1
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	469a      	mov	sl, r3
 80029ee:	0016      	movs	r6, r2
 80029f0:	4304      	orrs	r4, r0
 80029f2:	e6d9      	b.n	80027a8 <__aeabi_dsub+0x314>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x566>
 80029f8:	e081      	b.n	8002afe <__aeabi_dsub+0x66a>
 80029fa:	003b      	movs	r3, r7
 80029fc:	4303      	orrs	r3, r0
 80029fe:	d11d      	bne.n	8002a3c <__aeabi_dsub+0x5a8>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2500      	movs	r5, #0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	e70b      	b.n	8002820 <__aeabi_dsub+0x38c>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e6d3      	b.n	80027bc <__aeabi_dsub+0x328>
 8002a14:	1ac4      	subs	r4, r0, r3
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	4240      	negs	r0, r0
 8002a1e:	1aff      	subs	r7, r7, r3
 8002a20:	1a3b      	subs	r3, r7, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	465d      	mov	r5, fp
 8002a26:	e597      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002a28:	1a1c      	subs	r4, r3, r0
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	419b      	sbcs	r3, r3
 8002a30:	1bd7      	subs	r7, r2, r7
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	469a      	mov	sl, r3
 8002a38:	2601      	movs	r6, #1
 8002a3a:	e585      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6e7      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0752      	lsls	r2, r2, #29
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	464a      	mov	r2, r9
 8002a52:	08d2      	lsrs	r2, r2, #3
 8002a54:	e6b5      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e6db      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4319      	orrs	r1, r3
 8002a64:	000b      	movs	r3, r1
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	418b      	sbcs	r3, r1
 8002a6a:	001c      	movs	r4, r3
 8002a6c:	e653      	b.n	8002716 <__aeabi_dsub+0x282>
 8002a6e:	464d      	mov	r5, r9
 8002a70:	3c20      	subs	r4, #32
 8002a72:	40e5      	lsrs	r5, r4
 8002a74:	2920      	cmp	r1, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x5f0>
 8002a78:	2440      	movs	r4, #64	; 0x40
 8002a7a:	1a64      	subs	r4, r4, r1
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	40a1      	lsls	r1, r4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	41a3      	sbcs	r3, r4
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	e776      	b.n	800297c <__aeabi_dsub+0x4e8>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d0e1      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 8002a92:	003a      	movs	r2, r7
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x608>
 8002a9a:	e6b8      	b.n	800280e <__aeabi_dsub+0x37a>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	2480      	movs	r4, #128	; 0x80
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0324      	lsls	r4, r4, #12
 8002aa8:	08d2      	lsrs	r2, r2, #3
 8002aaa:	4222      	tst	r2, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x62a>
 8002aae:	08fe      	lsrs	r6, r7, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x62a>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	08c3      	lsrs	r3, r0, #3
 8002aba:	077f      	lsls	r7, r7, #29
 8002abc:	433b      	orrs	r3, r7
 8002abe:	0f59      	lsrs	r1, r3, #29
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	e6a6      	b.n	8002818 <__aeabi_dsub+0x384>
 8002aca:	1ac4      	subs	r4, r0, r3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	1aff      	subs	r7, r7, r3
 8002ad6:	1a3b      	subs	r3, r7, r0
 8002ad8:	469a      	mov	sl, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	2601      	movs	r6, #1
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x654>
 8002ae6:	e715      	b.n	8002914 <__aeabi_dsub+0x480>
 8002ae8:	08c0      	lsrs	r0, r0, #3
 8002aea:	077b      	lsls	r3, r7, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	4303      	orrs	r3, r0
 8002af0:	08fa      	lsrs	r2, r7, #3
 8002af2:	e666      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002af4:	08c0      	lsrs	r0, r0, #3
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	4303      	orrs	r3, r0
 8002afa:	08fa      	lsrs	r2, r7, #3
 8002afc:	e65e      	b.n	80027bc <__aeabi_dsub+0x328>
 8002afe:	003a      	movs	r2, r7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4302      	orrs	r2, r0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x674>
 8002b06:	e682      	b.n	800280e <__aeabi_dsub+0x37a>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	464a      	mov	r2, r9
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	4222      	tst	r2, r4
 8002b18:	d007      	beq.n	8002b2a <__aeabi_dsub+0x696>
 8002b1a:	08fe      	lsrs	r6, r7, #3
 8002b1c:	4226      	tst	r6, r4
 8002b1e:	d104      	bne.n	8002b2a <__aeabi_dsub+0x696>
 8002b20:	465d      	mov	r5, fp
 8002b22:	0032      	movs	r2, r6
 8002b24:	08c3      	lsrs	r3, r0, #3
 8002b26:	077f      	lsls	r7, r7, #29
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	0f59      	lsrs	r1, r3, #29
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	0749      	lsls	r1, r1, #29
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e670      	b.n	8002818 <__aeabi_dsub+0x384>
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	077b      	lsls	r3, r7, #29
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	08fa      	lsrs	r2, r7, #3
 8002b3e:	e640      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002b40:	464c      	mov	r4, r9
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cc      	lsrs	r4, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	2920      	cmp	r1, #32
 8002b4a:	d006      	beq.n	8002b5a <__aeabi_dsub+0x6c6>
 8002b4c:	4666      	mov	r6, ip
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	1b89      	subs	r1, r1, r6
 8002b52:	464e      	mov	r6, r9
 8002b54:	408e      	lsls	r6, r1
 8002b56:	4333      	orrs	r3, r6
 8002b58:	4698      	mov	r8, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	418b      	sbcs	r3, r1
 8002b60:	431c      	orrs	r4, r3
 8002b62:	e5d8      	b.n	8002716 <__aeabi_dsub+0x282>
 8002b64:	181c      	adds	r4, r3, r0
 8002b66:	4284      	cmp	r4, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	444f      	add	r7, r9
 8002b6c:	46ba      	mov	sl, r7
 8002b6e:	4240      	negs	r0, r0
 8002b70:	4482      	add	sl, r0
 8002b72:	e6d9      	b.n	8002928 <__aeabi_dsub+0x494>
 8002b74:	4653      	mov	r3, sl
 8002b76:	4323      	orrs	r3, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x6e8>
 8002b7a:	e6cb      	b.n	8002914 <__aeabi_dsub+0x480>
 8002b7c:	e614      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff
 8002b84:	ff7fffff 	.word	0xff7fffff
 8002b88:	000007fe 	.word	0x000007fe
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a01      	ldr	r2, [pc, #4]	; (8002b94 <__aeabi_dsub+0x700>)
 8002b90:	001c      	movs	r4, r3
 8002b92:	e529      	b.n	80025e8 <__aeabi_dsub+0x154>
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_dcmpun>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002b9e:	031c      	lsls	r4, r3, #12
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	030a      	lsls	r2, r1, #12
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	0b12      	lsrs	r2, r2, #12
 8002baa:	0d49      	lsrs	r1, r1, #21
 8002bac:	0b24      	lsrs	r4, r4, #12
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	4281      	cmp	r1, r0
 8002bb2:	d008      	beq.n	8002bc6 <__aeabi_dcmpun+0x2e>
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4330      	orrs	r0, r6
 8002bc0:	1e43      	subs	r3, r0, #1
 8002bc2:	4198      	sbcs	r0, r3
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	432a      	orrs	r2, r5
 8002bca:	d1fb      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bcc:	e7f2      	b.n	8002bb4 <__aeabi_dcmpun+0x1c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	000007ff 	.word	0x000007ff

08002bd4 <__aeabi_d2iz>:
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	b530      	push	{r4, r5, lr}
 8002bd8:	4c13      	ldr	r4, [pc, #76]	; (8002c28 <__aeabi_d2iz+0x54>)
 8002bda:	0053      	lsls	r3, r2, #1
 8002bdc:	0309      	lsls	r1, r1, #12
 8002bde:	0005      	movs	r5, r0
 8002be0:	0b09      	lsrs	r1, r1, #12
 8002be2:	2000      	movs	r0, #0
 8002be4:	0d5b      	lsrs	r3, r3, #21
 8002be6:	0fd2      	lsrs	r2, r2, #31
 8002be8:	42a3      	cmp	r3, r4
 8002bea:	dd04      	ble.n	8002bf6 <__aeabi_d2iz+0x22>
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <__aeabi_d2iz+0x58>)
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	dd02      	ble.n	8002bf8 <__aeabi_d2iz+0x24>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <__aeabi_d2iz+0x5c>)
 8002bf4:	18d0      	adds	r0, r2, r3
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2080      	movs	r0, #128	; 0x80
 8002bfa:	0340      	lsls	r0, r0, #13
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <__aeabi_d2iz+0x60>)
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	281f      	cmp	r0, #31
 8002c04:	dd08      	ble.n	8002c18 <__aeabi_d2iz+0x44>
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <__aeabi_d2iz+0x64>)
 8002c08:	1ac3      	subs	r3, r0, r3
 8002c0a:	40d9      	lsrs	r1, r3
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	4258      	negs	r0, r3
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d1f0      	bne.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c14:	0018      	movs	r0, r3
 8002c16:	e7ee      	b.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c18:	4c08      	ldr	r4, [pc, #32]	; (8002c3c <__aeabi_d2iz+0x68>)
 8002c1a:	40c5      	lsrs	r5, r0
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	4463      	add	r3, ip
 8002c20:	4099      	lsls	r1, r3
 8002c22:	000b      	movs	r3, r1
 8002c24:	432b      	orrs	r3, r5
 8002c26:	e7f2      	b.n	8002c0e <__aeabi_d2iz+0x3a>
 8002c28:	000003fe 	.word	0x000003fe
 8002c2c:	0000041d 	.word	0x0000041d
 8002c30:	7fffffff 	.word	0x7fffffff
 8002c34:	00000433 	.word	0x00000433
 8002c38:	00000413 	.word	0x00000413
 8002c3c:	fffffbed 	.word	0xfffffbed

08002c40 <__aeabi_i2d>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d016      	beq.n	8002c74 <__aeabi_i2d+0x34>
 8002c46:	17c3      	asrs	r3, r0, #31
 8002c48:	18c5      	adds	r5, r0, r3
 8002c4a:	405d      	eors	r5, r3
 8002c4c:	0fc4      	lsrs	r4, r0, #31
 8002c4e:	0028      	movs	r0, r5
 8002c50:	f000 f91a 	bl	8002e88 <__clzsi2>
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <__aeabi_i2d+0x5c>)
 8002c56:	1a1b      	subs	r3, r3, r0
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc16      	bgt.n	8002c8a <__aeabi_i2d+0x4a>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	002e      	movs	r6, r5
 8002c60:	3215      	adds	r2, #21
 8002c62:	4096      	lsls	r6, r2
 8002c64:	220b      	movs	r2, #11
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	40d5      	lsrs	r5, r2
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	0b2d      	lsrs	r5, r5, #12
 8002c70:	0d5b      	lsrs	r3, r3, #21
 8002c72:	e003      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c74:	2400      	movs	r4, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	2500      	movs	r5, #0
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	07e4      	lsls	r4, r4, #31
 8002c82:	4323      	orrs	r3, r4
 8002c84:	0030      	movs	r0, r6
 8002c86:	0019      	movs	r1, r3
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	380b      	subs	r0, #11
 8002c8c:	4085      	lsls	r5, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	032d      	lsls	r5, r5, #12
 8002c92:	2600      	movs	r6, #0
 8002c94:	0b2d      	lsrs	r5, r5, #12
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	e7f0      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	0000041e 	.word	0x0000041e

08002ca0 <__aeabi_ui2d>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	1e04      	subs	r4, r0, #0
 8002ca4:	d010      	beq.n	8002cc8 <__aeabi_ui2d+0x28>
 8002ca6:	f000 f8ef 	bl	8002e88 <__clzsi2>
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <__aeabi_ui2d+0x48>)
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	280a      	cmp	r0, #10
 8002cb0:	dc11      	bgt.n	8002cd6 <__aeabi_ui2d+0x36>
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	40d1      	lsrs	r1, r2
 8002cba:	3015      	adds	r0, #21
 8002cbc:	030a      	lsls	r2, r1, #12
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4084      	lsls	r4, r0
 8002cc2:	0b12      	lsrs	r2, r2, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e001      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4082      	lsls	r2, r0
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	0b12      	lsrs	r2, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7f1      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_f2d>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0242      	lsls	r2, r0, #9
 8002cf0:	0043      	lsls	r3, r0, #1
 8002cf2:	0fc4      	lsrs	r4, r0, #31
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	0a55      	lsrs	r5, r2, #9
 8002cfc:	4208      	tst	r0, r1
 8002cfe:	d00c      	beq.n	8002d1a <__aeabi_f2d+0x2e>
 8002d00:	21e0      	movs	r1, #224	; 0xe0
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	468c      	mov	ip, r1
 8002d06:	076d      	lsls	r5, r5, #29
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	4463      	add	r3, ip
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0028      	movs	r0, r5
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <__aeabi_f2d+0x5c>
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	d01b      	beq.n	8002d5a <__aeabi_f2d+0x6e>
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f8b0 	bl	8002e88 <__clzsi2>
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc1c      	bgt.n	8002d66 <__aeabi_f2d+0x7a>
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	002a      	movs	r2, r5
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	0003      	movs	r3, r0
 8002d36:	3315      	adds	r3, #21
 8002d38:	409d      	lsls	r5, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <__aeabi_f2d+0x88>)
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	1a1b      	subs	r3, r3, r0
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	0b12      	lsrs	r2, r2, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e1      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d009      	beq.n	8002d60 <__aeabi_f2d+0x74>
 8002d4c:	0b13      	lsrs	r3, r2, #12
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0312      	lsls	r2, r2, #12
 8002d52:	431a      	orrs	r2, r3
 8002d54:	076d      	lsls	r5, r5, #29
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d58:	e7d8      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e7d5      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d64:	e7d2      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d66:	0003      	movs	r3, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e7e3      	b.n	8002d3a <__aeabi_f2d+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000389 	.word	0x00000389
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2f>:
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	004b      	lsls	r3, r1, #1
 8002d82:	030d      	lsls	r5, r1, #12
 8002d84:	0f40      	lsrs	r0, r0, #29
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	0fcc      	lsrs	r4, r1, #31
 8002d8a:	0a6d      	lsrs	r5, r5, #9
 8002d8c:	493a      	ldr	r1, [pc, #232]	; (8002e78 <__aeabi_d2f+0xfc>)
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	00d7      	lsls	r7, r2, #3
 8002d94:	4208      	tst	r0, r1
 8002d96:	d00a      	beq.n	8002dae <__aeabi_d2f+0x32>
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <__aeabi_d2f+0x100>)
 8002d9a:	1859      	adds	r1, r3, r1
 8002d9c:	29fe      	cmp	r1, #254	; 0xfe
 8002d9e:	dd16      	ble.n	8002dce <__aeabi_d2f+0x52>
 8002da0:	20ff      	movs	r0, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	4310      	orrs	r0, r2
 8002da8:	07e4      	lsls	r4, r4, #31
 8002daa:	4320      	orrs	r0, r4
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <__aeabi_d2f+0x44>
 8002db2:	433d      	orrs	r5, r7
 8002db4:	d026      	beq.n	8002e04 <__aeabi_d2f+0x88>
 8002db6:	2205      	movs	r2, #5
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a52      	lsrs	r2, r2, #9
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	e7f1      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dc0:	432f      	orrs	r7, r5
 8002dc2:	d0ed      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	e7ea      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dd1b      	ble.n	8002e0a <__aeabi_d2f+0x8e>
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	1e50      	subs	r0, r2, #1
 8002dd6:	4182      	sbcs	r2, r0
 8002dd8:	00ed      	lsls	r5, r5, #3
 8002dda:	0f7f      	lsrs	r7, r7, #29
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	433a      	orrs	r2, r7
 8002de0:	0753      	lsls	r3, r2, #29
 8002de2:	d047      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002de4:	230f      	movs	r3, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d000      	beq.n	8002dee <__aeabi_d2f+0x72>
 8002dec:	3204      	adds	r2, #4
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	04db      	lsls	r3, r3, #19
 8002df2:	4013      	ands	r3, r2
 8002df4:	d03e      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002df6:	1c48      	adds	r0, r1, #1
 8002df8:	29fe      	cmp	r1, #254	; 0xfe
 8002dfa:	d0d1      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	0a52      	lsrs	r2, r2, #9
 8002e00:	b2c0      	uxtb	r0, r0
 8002e02:	e7cf      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e04:	2000      	movs	r0, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	e7cc      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3217      	adds	r2, #23
 8002e0e:	db2f      	blt.n	8002e70 <__aeabi_d2f+0xf4>
 8002e10:	2680      	movs	r6, #128	; 0x80
 8002e12:	0436      	lsls	r6, r6, #16
 8002e14:	432e      	orrs	r6, r5
 8002e16:	251e      	movs	r5, #30
 8002e18:	1a6d      	subs	r5, r5, r1
 8002e1a:	2d1f      	cmp	r5, #31
 8002e1c:	dd11      	ble.n	8002e42 <__aeabi_d2f+0xc6>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4252      	negs	r2, r2
 8002e22:	1a52      	subs	r2, r2, r1
 8002e24:	0031      	movs	r1, r6
 8002e26:	40d1      	lsrs	r1, r2
 8002e28:	2d20      	cmp	r5, #32
 8002e2a:	d004      	beq.n	8002e36 <__aeabi_d2f+0xba>
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <__aeabi_d2f+0x104>)
 8002e2e:	4694      	mov	ip, r2
 8002e30:	4463      	add	r3, ip
 8002e32:	409e      	lsls	r6, r3
 8002e34:	4337      	orrs	r7, r6
 8002e36:	003a      	movs	r2, r7
 8002e38:	1e53      	subs	r3, r2, #1
 8002e3a:	419a      	sbcs	r2, r3
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	e7ce      	b.n	8002de0 <__aeabi_d2f+0x64>
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <__aeabi_d2f+0x108>)
 8002e44:	0038      	movs	r0, r7
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	4098      	lsls	r0, r3
 8002e4c:	003a      	movs	r2, r7
 8002e4e:	1e41      	subs	r1, r0, #1
 8002e50:	4188      	sbcs	r0, r1
 8002e52:	409e      	lsls	r6, r3
 8002e54:	40ea      	lsrs	r2, r5
 8002e56:	4330      	orrs	r0, r6
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0753      	lsls	r3, r2, #29
 8002e5e:	d1c1      	bne.n	8002de4 <__aeabi_d2f+0x68>
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0013      	movs	r3, r2
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	2001      	movs	r0, #1
 8002e68:	400b      	ands	r3, r1
 8002e6a:	420a      	tst	r2, r1
 8002e6c:	d1c6      	bne.n	8002dfc <__aeabi_d2f+0x80>
 8002e6e:	e7a3      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7a0      	b.n	8002db6 <__aeabi_d2f+0x3a>
 8002e74:	000b      	movs	r3, r1
 8002e76:	e79f      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	; (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <__clzdi2>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d103      	bne.n	8002ed2 <__clzdi2+0xe>
 8002eca:	f7ff ffdd 	bl	8002e88 <__clzsi2>
 8002ece:	3020      	adds	r0, #32
 8002ed0:	e002      	b.n	8002ed8 <__clzdi2+0x14>
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	f7ff ffd8 	bl	8002e88 <__clzsi2>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)

08002edc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	425b      	negs	r3, r3
 8002ee8:	1d39      	adds	r1, r7, #4
 8002eea:	4804      	ldr	r0, [pc, #16]	; (8002efc <__io_putchar+0x20>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	f003 fee3 	bl	8006cb8 <HAL_UART_Transmit>
  return ch;
 8002ef2:	687b      	ldr	r3, [r7, #4]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000324 	.word	0x20000324

08002f00 <update_suvis>:

void update_suvis()
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af02      	add	r7, sp, #8
	  sprintf(suvis_display,"S:%d     ",suvis);
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <update_suvis+0x38>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	490c      	ldr	r1, [pc, #48]	; (8002f3c <update_suvis+0x3c>)
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <update_suvis+0x40>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f005 fcae 	bl	8008870 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8002f14:	2100      	movs	r1, #0
 8002f16:	2000      	movs	r0, #0
 8002f18:	f000 fdf4 	bl	8003b04 <ssd1306_SetCursor>
	  ssd1306_WriteString(suvis_display,Font_16x15,White);
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <update_suvis+0x44>)
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <update_suvis+0x40>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	9200      	str	r2, [sp, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f000 fdbf 	bl	8003aac <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002f2e:	f000 fc89 	bl	8003844 <ssd1306_UpdateScreen>
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200003ac 	.word	0x200003ac
 8002f3c:	0800c320 	.word	0x0800c320
 8002f40:	200003b8 	.word	0x200003b8
 8002f44:	0800cf98 	.word	0x0800cf98

08002f48 <update_itampa>:
void update_itampa()
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af02      	add	r7, sp, #8
	  sprintf(itampa_display,"U:%0.1fV",itampa);
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <update_itampa+0x40>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1c18      	adds	r0, r3, #0
 8002f54:	f7ff feca 	bl	8002cec <__aeabi_f2d>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	000b      	movs	r3, r1
 8002f5c:	490b      	ldr	r1, [pc, #44]	; (8002f8c <update_itampa+0x44>)
 8002f5e:	480c      	ldr	r0, [pc, #48]	; (8002f90 <update_itampa+0x48>)
 8002f60:	f005 fc86 	bl	8008870 <siprintf>
	  ssd1306_SetCursor(0,15);
 8002f64:	210f      	movs	r1, #15
 8002f66:	2000      	movs	r0, #0
 8002f68:	f000 fdcc 	bl	8003b04 <ssd1306_SetCursor>
	  ssd1306_WriteString(itampa_display,Font_16x15,White);
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <update_itampa+0x4c>)
 8002f6e:	4808      	ldr	r0, [pc, #32]	; (8002f90 <update_itampa+0x48>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	6819      	ldr	r1, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f000 fd97 	bl	8003aac <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002f7e:	f000 fc61 	bl	8003844 <ssd1306_UpdateScreen>
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200003b4 	.word	0x200003b4
 8002f8c:	0800c32c 	.word	0x0800c32c
 8002f90:	200003e0 	.word	0x200003e0
 8002f94:	0800cf98 	.word	0x0800cf98

08002f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dbb      	adds	r3, r7, #6
 8002fa2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_8)
 8002fa4:	1dbb      	adds	r3, r7, #6
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d114      	bne.n	8002fda <HAL_GPIO_EXTI_Callback+0x42>
	{
		status = DATA_READY;
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_GPIO_EXTI_Callback+0x70>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
		suvis = suvis + 1;
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_GPIO_EXTI_Callback+0x74>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_GPIO_EXTI_Callback+0x74>)
 8002fbe:	601a      	str	r2, [r3, #0]
		suvis_total = suvis_total + 1;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_GPIO_EXTI_Callback+0x78>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_GPIO_EXTI_Callback+0x78>)
 8002fca:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f003 fc08 	bl	80067e4 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002fd4:	2007      	movs	r0, #7
 8002fd6:	f001 fd48 	bl	8004a6a <HAL_NVIC_DisableIRQ>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	881a      	ldrh	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10b      	bne.n	8002ffe <HAL_GPIO_EXTI_Callback+0x66>
	{
		status = DATA_RESET;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_GPIO_EXTI_Callback+0x70>)
 8002fe8:	2202      	movs	r2, #2
 8002fea:	701a      	strb	r2, [r3, #0]
		suvis = 0;
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_GPIO_EXTI_Callback+0x74>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
		pertaisymai++;
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_GPIO_EXTI_Callback+0x80>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_GPIO_EXTI_Callback+0x80>)
 8002ffc:	701a      	strb	r2, [r3, #0]
	}
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20000000 	.word	0x20000000
 800300c:	200003ac 	.word	0x200003ac
 8003010:	2000040c 	.word	0x2000040c
 8003014:	200002a4 	.word	0x200002a4
 8003018:	2000040d 	.word	0x2000040d

0800301c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d106      	bne.n	800303c <HAL_TIM_PeriodElapsedCallback+0x20>
        HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800302e:	2007      	movs	r0, #7
 8003030:	f001 fd0b 	bl	8004a4a <HAL_NVIC_EnableIRQ>
        HAL_TIM_Base_Stop(&htim6);
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003036:	0018      	movs	r0, r3
 8003038:	f003 fbb6 	bl	80067a8 <HAL_TIM_Base_Stop>
    }
    if (htim->Instance == TIM7) {
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d108      	bne.n	8003058 <HAL_TIM_PeriodElapsedCallback+0x3c>
            measureVoltage = 1;
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
            time = time + 1;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003056:	701a      	strb	r2, [r3, #0]
        }

}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40001000 	.word	0x40001000
 8003064:	200002a4 	.word	0x200002a4
 8003068:	40001400 	.word	0x40001400
 800306c:	20000408 	.word	0x20000408
 8003070:	2000040e 	.word	0x2000040e

08003074 <sendData>:
void sendData()
{
 8003074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003076:	b087      	sub	sp, #28
 8003078:	af06      	add	r7, sp, #24
	snprintf(buff,12,"S %d %d %0.1f %d",suvis_total,pertaisymai,itampa,time);
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <sendData+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	001e      	movs	r6, r3
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <sendData+0x48>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001c      	movs	r4, r3
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <sendData+0x4c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1c18      	adds	r0, r3, #0
 800308c:	f7ff fe2e 	bl	8002cec <__aeabi_f2d>
 8003090:	0002      	movs	r2, r0
 8003092:	000b      	movs	r3, r1
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <sendData+0x50>)
 8003096:	7809      	ldrb	r1, [r1, #0]
 8003098:	000d      	movs	r5, r1
 800309a:	490b      	ldr	r1, [pc, #44]	; (80030c8 <sendData+0x54>)
 800309c:	480b      	ldr	r0, [pc, #44]	; (80030cc <sendData+0x58>)
 800309e:	9504      	str	r5, [sp, #16]
 80030a0:	9202      	str	r2, [sp, #8]
 80030a2:	9303      	str	r3, [sp, #12]
 80030a4:	9400      	str	r4, [sp, #0]
 80030a6:	0033      	movs	r3, r6
 80030a8:	000a      	movs	r2, r1
 80030aa:	210c      	movs	r1, #12
 80030ac:	f005 fbac 	bl	8008808 <sniprintf>
//	snprintf(buff,12,"T%d",time);
//	return buff;
//	printf("LOL\n\r");
//	printf("%s\n",buff);

}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b001      	add	sp, #4
 80030b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b8:	2000040c 	.word	0x2000040c
 80030bc:	2000040d 	.word	0x2000040d
 80030c0:	200003b4 	.word	0x200003b4
 80030c4:	2000040e 	.word	0x2000040e
 80030c8:	0800c338 	.word	0x0800c338
 80030cc:	20000410 	.word	0x20000410

080030d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030d6:	f000 ffa9 	bl	800402c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030da:	f000 f8ab 	bl	8003234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030de:	f000 fa63 	bl	80035a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80030e2:	f000 f977 	bl	80033d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80030e6:	f000 fa2f 	bl	8003548 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80030ea:	f000 f9b3 	bl	8003454 <MX_TIM6_Init>
  MX_ADC_Init();
 80030ee:	f000 f90b 	bl	8003308 <MX_ADC_Init>
  MX_TIM7_Init();
 80030f2:	f000 f9eb 	bl	80034cc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80030f6:	f000 fb1f 	bl	8003738 <ssd1306_Init>
//sprintf(itampa_display,"U:%dV",itampa);
//ssd1306_SetCursor(0, 0);
//ssd1306_WriteString(suvis_display,Font_16x15,White);
//ssd1306_SetCursor(0,15);
//ssd1306_WriteString(itampa_display,Font_16x15,White);
  update_suvis();
 80030fa:	f7ff ff01 	bl	8002f00 <update_suvis>
  update_itampa();
 80030fe:	f7ff ff23 	bl	8002f48 <update_itampa>
  HAL_TIM_Base_Start_IT(&htim7);
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <main+0x124>)
 8003104:	0018      	movs	r0, r3
 8003106:	f003 fb6d 	bl	80067e4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_UART_Receive(&huart2, (uint8_t*)&rx_char, 1, HAL_MAX_DELAY) == HAL_OK)
 800310a:	2301      	movs	r3, #1
 800310c:	425b      	negs	r3, r3
 800310e:	493a      	ldr	r1, [pc, #232]	; (80031f8 <main+0x128>)
 8003110:	483a      	ldr	r0, [pc, #232]	; (80031fc <main+0x12c>)
 8003112:	2201      	movs	r2, #1
 8003114:	f003 fe70 	bl	8006df8 <HAL_UART_Receive>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d11b      	bne.n	8003154 <main+0x84>
	  {

		  if (rx_char == 'A')
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <main+0x128>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b41      	cmp	r3, #65	; 0x41
 8003122:	d117      	bne.n	8003154 <main+0x84>
		  {

			  sendData();
 8003124:	f7ff ffa6 	bl	8003074 <sendData>
			  printf("%s E\n",buff);
 8003128:	4a35      	ldr	r2, [pc, #212]	; (8003200 <main+0x130>)
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <main+0x134>)
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f005 fb5a 	bl	80087e8 <iprintf>
			  HAL_UART_Receive(&huart2, (uint8_t*)&rx_char, 1, HAL_MAX_DELAY);
 8003134:	2301      	movs	r3, #1
 8003136:	425b      	negs	r3, r3
 8003138:	492f      	ldr	r1, [pc, #188]	; (80031f8 <main+0x128>)
 800313a:	4830      	ldr	r0, [pc, #192]	; (80031fc <main+0x12c>)
 800313c:	2201      	movs	r2, #1
 800313e:	f003 fe5b 	bl	8006df8 <HAL_UART_Receive>
			  suvis_total = 0;
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <main+0x138>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
			  time = 0;
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <main+0x13c>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
			  pertaisymai = 0;
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <main+0x140>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]

		  }

	  }
	  if(measureVoltage){
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <main+0x144>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <main+0x106>
		  float koef = 3.3/4095;
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <main+0x148>)
 800315e:	60fb      	str	r3, [r7, #12]
		  float dal_it = 0.0;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
		  float R1 = 1.496;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <main+0x14c>)
 8003166:	607b      	str	r3, [r7, #4]
		  float R2 = 0.999;
 8003168:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <main+0x150>)
 800316a:	603b      	str	r3, [r7, #0]
		  measureVoltage = 0;
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <main+0x144>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Start(&hadc);
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <main+0x154>)
 8003174:	0018      	movs	r0, r3
 8003176:	f001 f961 	bl	800443c <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800317a:	2301      	movs	r3, #1
 800317c:	425a      	negs	r2, r3
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <main+0x154>)
 8003180:	0011      	movs	r1, r2
 8003182:	0018      	movs	r0, r3
 8003184:	f001 f9ae 	bl	80044e4 <HAL_ADC_PollForConversion>
	      adcValue = HAL_ADC_GetValue(&hadc);
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <main+0x154>)
 800318a:	0018      	movs	r0, r3
 800318c:	f001 fa46 	bl	800461c <HAL_ADC_GetValue>
 8003190:	0002      	movs	r2, r0
 8003192:	4b25      	ldr	r3, [pc, #148]	; (8003228 <main+0x158>)
 8003194:	601a      	str	r2, [r3, #0]

	      dal_it = adcValue*koef;
 8003196:	4b24      	ldr	r3, [pc, #144]	; (8003228 <main+0x158>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0018      	movs	r0, r3
 800319c:	f7fd ff16 	bl	8000fcc <__aeabi_ui2f>
 80031a0:	1c03      	adds	r3, r0, #0
 80031a2:	1c19      	adds	r1, r3, #0
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7fd fdc3 	bl	8000d30 <__aeabi_fmul>
 80031aa:	1c03      	adds	r3, r0, #0
 80031ac:	60bb      	str	r3, [r7, #8]
	      itampa = dal_it*(R1+R2)/R2;
 80031ae:	6839      	ldr	r1, [r7, #0]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fb03 	bl	80007bc <__aeabi_fadd>
 80031b6:	1c03      	adds	r3, r0, #0
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	1c18      	adds	r0, r3, #0
 80031bc:	f7fd fdb8 	bl	8000d30 <__aeabi_fmul>
 80031c0:	1c03      	adds	r3, r0, #0
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	1c18      	adds	r0, r3, #0
 80031c6:	f7fd fc99 	bl	8000afc <__aeabi_fdiv>
 80031ca:	1c03      	adds	r3, r0, #0
 80031cc:	1c1a      	adds	r2, r3, #0
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <main+0x15c>)
 80031d0:	601a      	str	r2, [r3, #0]
	      //printf("%0.1f\n\r",itampa);
	      update_itampa();
 80031d2:	f7ff feb9 	bl	8002f48 <update_itampa>
	  }
	  if(status == DATA_READY || status == DATA_RESET){
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <main+0x160>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <main+0x116>
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <main+0x160>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d191      	bne.n	800310a <main+0x3a>
		  update_suvis();
 80031e6:	f7ff fe8b 	bl	8002f00 <update_suvis>
		  status = DATA_WAIT;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <main+0x160>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
	  if(HAL_UART_Receive(&huart2, (uint8_t*)&rx_char, 1, HAL_MAX_DELAY) == HAL_OK)
 80031f0:	e78b      	b.n	800310a <main+0x3a>
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	200002e4 	.word	0x200002e4
 80031f8:	2000040f 	.word	0x2000040f
 80031fc:	20000324 	.word	0x20000324
 8003200:	20000410 	.word	0x20000410
 8003204:	0800c34c 	.word	0x0800c34c
 8003208:	2000040c 	.word	0x2000040c
 800320c:	2000040e 	.word	0x2000040e
 8003210:	2000040d 	.word	0x2000040d
 8003214:	20000408 	.word	0x20000408
 8003218:	3a534067 	.word	0x3a534067
 800321c:	3fbf7cee 	.word	0x3fbf7cee
 8003220:	3f7fbe77 	.word	0x3f7fbe77
 8003224:	200001f4 	.word	0x200001f4
 8003228:	200003b0 	.word	0x200003b0
 800322c:	200003b4 	.word	0x200003b4
 8003230:	20000000 	.word	0x20000000

08003234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b09f      	sub	sp, #124	; 0x7c
 8003238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800323a:	2440      	movs	r4, #64	; 0x40
 800323c:	193b      	adds	r3, r7, r4
 800323e:	0018      	movs	r0, r3
 8003240:	2338      	movs	r3, #56	; 0x38
 8003242:	001a      	movs	r2, r3
 8003244:	2100      	movs	r1, #0
 8003246:	f005 fb92 	bl	800896e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800324a:	232c      	movs	r3, #44	; 0x2c
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	0018      	movs	r0, r3
 8003250:	2314      	movs	r3, #20
 8003252:	001a      	movs	r2, r3
 8003254:	2100      	movs	r1, #0
 8003256:	f005 fb8a 	bl	800896e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	0018      	movs	r0, r3
 800325e:	2328      	movs	r3, #40	; 0x28
 8003260:	001a      	movs	r2, r3
 8003262:	2100      	movs	r1, #0
 8003264:	f005 fb83 	bl	800896e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <SystemClock_Config+0xcc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <SystemClock_Config+0xd0>)
 800326e:	401a      	ands	r2, r3
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <SystemClock_Config+0xcc>)
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	0109      	lsls	r1, r1, #4
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800327a:	0021      	movs	r1, r4
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2202      	movs	r2, #2
 8003280:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2201      	movs	r2, #1
 8003286:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2210      	movs	r2, #16
 800328c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2200      	movs	r2, #0
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003294:	187b      	adds	r3, r7, r1
 8003296:	0018      	movs	r0, r3
 8003298:	f002 fab0 	bl	80057fc <HAL_RCC_OscConfig>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d001      	beq.n	80032a4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80032a0:	f000 fa0c 	bl	80036bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	220f      	movs	r2, #15
 80032aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2201      	movs	r2, #1
 80032b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	22a0      	movs	r2, #160	; 0xa0
 80032b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	2100      	movs	r1, #0
 80032c8:	0018      	movs	r0, r3
 80032ca:	f002 fe6b 	bl	8005fa4 <HAL_RCC_ClockConfig>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80032d2:	f000 f9f3 	bl	80036bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	220a      	movs	r2, #10
 80032da:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	0018      	movs	r0, r3
 80032ec:	f003 f87e 	bl	80063ec <HAL_RCCEx_PeriphCLKConfig>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d001      	beq.n	80032f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80032f4:	f000 f9e2 	bl	80036bc <Error_Handler>
  }
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b01f      	add	sp, #124	; 0x7c
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	40007000 	.word	0x40007000
 8003304:	ffffe7ff 	.word	0xffffe7ff

08003308 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800330e:	003b      	movs	r3, r7
 8003310:	0018      	movs	r0, r3
 8003312:	2308      	movs	r3, #8
 8003314:	001a      	movs	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f005 fb29 	bl	800896e <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <MX_ADC_Init+0xc0>)
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <MX_ADC_Init+0xc4>)
 8003320:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003324:	2200      	movs	r2, #0
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <MX_ADC_Init+0xc0>)
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	05d2      	lsls	r2, r2, #23
 800332e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003338:	2200      	movs	r2, #0
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <MX_ADC_Init+0xc0>)
 800333e:	2201      	movs	r2, #1
 8003340:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003342:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <MX_ADC_Init+0xc0>)
 800334a:	2220      	movs	r2, #32
 800334c:	2101      	movs	r1, #1
 800334e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	2100      	movs	r1, #0
 8003356:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <MX_ADC_Init+0xc0>)
 800335a:	2200      	movs	r2, #0
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003360:	22c2      	movs	r2, #194	; 0xc2
 8003362:	32ff      	adds	r2, #255	; 0xff
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003368:	222c      	movs	r2, #44	; 0x2c
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003370:	2204      	movs	r2, #4
 8003372:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <MX_ADC_Init+0xc0>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003382:	2201      	movs	r2, #1
 8003384:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <MX_ADC_Init+0xc0>)
 8003388:	2200      	movs	r2, #0
 800338a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_ADC_Init+0xc0>)
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fee0 	bl	8004154 <HAL_ADC_Init>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003398:	f000 f990 	bl	80036bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800339c:	003b      	movs	r3, r7
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <MX_ADC_Init+0xc8>)
 80033a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80033a2:	003b      	movs	r3, r7
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	0152      	lsls	r2, r2, #5
 80033a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033aa:	003a      	movs	r2, r7
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_ADC_Init+0xc0>)
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f001 f93f 	bl	8004634 <HAL_ADC_ConfigChannel>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d001      	beq.n	80033be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80033ba:	f000 f97f 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	200001f4 	.word	0x200001f4
 80033cc:	40012400 	.word	0x40012400
 80033d0:	04000002 	.word	0x04000002

080033d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <MX_I2C1_Init+0x74>)
 80033da:	4a1c      	ldr	r2, [pc, #112]	; (800344c <MX_I2C1_Init+0x78>)
 80033dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <MX_I2C1_Init+0x74>)
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <MX_I2C1_Init+0x7c>)
 80033e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <MX_I2C1_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ea:	4b17      	ldr	r3, [pc, #92]	; (8003448 <MX_I2C1_Init+0x74>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <MX_I2C1_Init+0x74>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <MX_I2C1_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <MX_I2C1_Init+0x74>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_I2C1_Init+0x74>)
 8003404:	2200      	movs	r2, #0
 8003406:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <MX_I2C1_Init+0x74>)
 800340a:	2200      	movs	r2, #0
 800340c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_I2C1_Init+0x74>)
 8003410:	0018      	movs	r0, r3
 8003412:	f001 fcff 	bl	8004e14 <HAL_I2C_Init>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800341a:	f000 f94f 	bl	80036bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <MX_I2C1_Init+0x74>)
 8003420:	2100      	movs	r1, #0
 8003422:	0018      	movs	r0, r3
 8003424:	f002 f952 	bl	80056cc <HAL_I2CEx_ConfigAnalogFilter>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d001      	beq.n	8003430 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800342c:	f000 f946 	bl	80036bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <MX_I2C1_Init+0x74>)
 8003432:	2100      	movs	r1, #0
 8003434:	0018      	movs	r0, r3
 8003436:	f002 f995 	bl	8005764 <HAL_I2CEx_ConfigDigitalFilter>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d001      	beq.n	8003442 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800343e:	f000 f93d 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000250 	.word	0x20000250
 800344c:	40005400 	.word	0x40005400
 8003450:	00000509 	.word	0x00000509

08003454 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800345a:	003b      	movs	r3, r7
 800345c:	0018      	movs	r0, r3
 800345e:	2308      	movs	r3, #8
 8003460:	001a      	movs	r2, r3
 8003462:	2100      	movs	r1, #0
 8003464:	f005 fa83 	bl	800896e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <MX_TIM6_Init+0x6c>)
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <MX_TIM6_Init+0x70>)
 800346c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <MX_TIM6_Init+0x6c>)
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <MX_TIM6_Init+0x6c>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <MX_TIM6_Init+0x6c>)
 800347c:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <MX_TIM6_Init+0x74>)
 800347e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <MX_TIM6_Init+0x6c>)
 8003482:	2200      	movs	r2, #0
 8003484:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <MX_TIM6_Init+0x6c>)
 8003488:	0018      	movs	r0, r3
 800348a:	f003 f94d 	bl	8006728 <HAL_TIM_Base_Init>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003492:	f000 f913 	bl	80036bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003496:	003b      	movs	r3, r7
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349c:	003b      	movs	r3, r7
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034a2:	003a      	movs	r2, r7
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <MX_TIM6_Init+0x6c>)
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f003 fb53 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80034b2:	f000 f903 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	200002a4 	.word	0x200002a4
 80034c4:	40001000 	.word	0x40001000
 80034c8:	000007cf 	.word	0x000007cf

080034cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d2:	003b      	movs	r3, r7
 80034d4:	0018      	movs	r0, r3
 80034d6:	2308      	movs	r3, #8
 80034d8:	001a      	movs	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	f005 fa47 	bl	800896e <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_TIM7_Init+0x6c>)
 80034e2:	4a16      	ldr	r2, [pc, #88]	; (800353c <MX_TIM7_Init+0x70>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <MX_TIM7_Init+0x6c>)
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <MX_TIM7_Init+0x74>)
 80034ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <MX_TIM7_Init+0x6c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <MX_TIM7_Init+0x6c>)
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <MX_TIM7_Init+0x78>)
 80034f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <MX_TIM7_Init+0x6c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_TIM7_Init+0x6c>)
 8003500:	0018      	movs	r0, r3
 8003502:	f003 f911 	bl	8006728 <HAL_TIM_Base_Init>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800350a:	f000 f8d7 	bl	80036bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	003b      	movs	r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003514:	003b      	movs	r3, r7
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800351a:	003a      	movs	r2, r7
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_TIM7_Init+0x6c>)
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f003 fb17 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800352a:	f000 f8c7 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	200002e4 	.word	0x200002e4
 800353c:	40001400 	.word	0x40001400
 8003540:	00004e1f 	.word	0x00004e1f
 8003544:	000003e7 	.word	0x000003e7

08003548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 800354e:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <MX_USART2_UART_Init+0x5c>)
 8003550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 8003554:	2296      	movs	r2, #150	; 0x96
 8003556:	0192      	lsls	r2, r2, #6
 8003558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 800356e:	220c      	movs	r2, #12
 8003570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 8003586:	2200      	movs	r2, #0
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <MX_USART2_UART_Init+0x58>)
 800358c:	0018      	movs	r0, r3
 800358e:	f003 fb3f 	bl	8006c10 <HAL_UART_Init>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003596:	f000 f891 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000324 	.word	0x20000324
 80035a4:	40004400 	.word	0x40004400

080035a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b08b      	sub	sp, #44	; 0x2c
 80035ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ae:	2414      	movs	r4, #20
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	0018      	movs	r0, r3
 80035b4:	2314      	movs	r3, #20
 80035b6:	001a      	movs	r2, r3
 80035b8:	2100      	movs	r1, #0
 80035ba:	f005 f9d8 	bl	800896e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035c4:	2104      	movs	r1, #4
 80035c6:	430a      	orrs	r2, r1
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	430a      	orrs	r2, r1
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80035e2:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035f4:	2101      	movs	r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <MX_GPIO_Init+0x10c>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <MX_GPIO_Init+0x10c>)
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <MX_GPIO_Init+0x10c>)
 800360c:	2102      	movs	r1, #2
 800360e:	430a      	orrs	r2, r1
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <MX_GPIO_Init+0x10c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	2202      	movs	r2, #2
 8003618:	4013      	ands	r3, r2
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800361e:	23a0      	movs	r3, #160	; 0xa0
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	2200      	movs	r2, #0
 8003624:	2120      	movs	r1, #32
 8003626:	0018      	movs	r0, r3
 8003628:	f001 fbba 	bl	8004da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800362c:	193b      	adds	r3, r7, r4
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0192      	lsls	r2, r2, #6
 8003632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003634:	193b      	adds	r3, r7, r4
 8003636:	2284      	movs	r2, #132	; 0x84
 8003638:	0392      	lsls	r2, r2, #14
 800363a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	193b      	adds	r3, r7, r4
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003642:	193b      	adds	r3, r7, r4
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <MX_GPIO_Init+0x110>)
 8003646:	0019      	movs	r1, r3
 8003648:	0010      	movs	r0, r2
 800364a:	f001 fa2b 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800364e:	193b      	adds	r3, r7, r4
 8003650:	2220      	movs	r2, #32
 8003652:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003654:	193b      	adds	r3, r7, r4
 8003656:	2201      	movs	r2, #1
 8003658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	193b      	adds	r3, r7, r4
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003666:	193a      	adds	r2, r7, r4
 8003668:	23a0      	movs	r3, #160	; 0xa0
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	0011      	movs	r1, r2
 800366e:	0018      	movs	r0, r3
 8003670:	f001 fa18 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003674:	0021      	movs	r1, r4
 8003676:	187b      	adds	r3, r7, r1
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	0052      	lsls	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2288      	movs	r2, #136	; 0x88
 8003682:	0352      	lsls	r2, r2, #13
 8003684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	187a      	adds	r2, r7, r1
 800368e:	23a0      	movs	r3, #160	; 0xa0
 8003690:	05db      	lsls	r3, r3, #23
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fa05 	bl	8004aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	2007      	movs	r0, #7
 80036a0:	f001 f9be 	bl	8004a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80036a4:	2007      	movs	r0, #7
 80036a6:	f001 f9d0 	bl	8004a4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b00b      	add	sp, #44	; 0x2c
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40021000 	.word	0x40021000
 80036b8:	50000800 	.word	0x50000800

080036bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036c0:	b672      	cpsid	i
}
 80036c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <Error_Handler+0x8>

080036c6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80036c6:	b580      	push	{r7, lr}
 80036c8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	0002      	movs	r2, r0
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80036dc:	4808      	ldr	r0, [pc, #32]	; (8003700 <ssd1306_WriteCommand+0x30>)
 80036de:	2301      	movs	r3, #1
 80036e0:	425b      	negs	r3, r3
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	2301      	movs	r3, #1
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2301      	movs	r3, #1
 80036ee:	2200      	movs	r2, #0
 80036f0:	2178      	movs	r1, #120	; 0x78
 80036f2:	f001 fc25 	bl	8004f40 <HAL_I2C_Mem_Write>
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b002      	add	sp, #8
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000250 	.word	0x20000250

08003704 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af04      	add	r7, sp, #16
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <ssd1306_WriteData+0x30>)
 8003714:	2201      	movs	r2, #1
 8003716:	4252      	negs	r2, r2
 8003718:	9202      	str	r2, [sp, #8]
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2301      	movs	r3, #1
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	2178      	movs	r1, #120	; 0x78
 8003726:	f001 fc0b 	bl	8004f40 <HAL_I2C_Mem_Write>
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20000250 	.word	0x20000250

08003738 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800373c:	f7ff ffc3 	bl	80036c6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003740:	2064      	movs	r0, #100	; 0x64
 8003742:	f000 fce3 	bl	800410c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003746:	2000      	movs	r0, #0
 8003748:	f000 fa0e 	bl	8003b68 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800374c:	2020      	movs	r0, #32
 800374e:	f7ff ffbf 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003752:	2000      	movs	r0, #0
 8003754:	f7ff ffbc 	bl	80036d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003758:	20b0      	movs	r0, #176	; 0xb0
 800375a:	f7ff ffb9 	bl	80036d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800375e:	20c8      	movs	r0, #200	; 0xc8
 8003760:	f7ff ffb6 	bl	80036d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003764:	2000      	movs	r0, #0
 8003766:	f7ff ffb3 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800376a:	2010      	movs	r0, #16
 800376c:	f7ff ffb0 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003770:	2040      	movs	r0, #64	; 0x40
 8003772:	f7ff ffad 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003776:	20ff      	movs	r0, #255	; 0xff
 8003778:	f000 f9de 	bl	8003b38 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800377c:	20a1      	movs	r0, #161	; 0xa1
 800377e:	f7ff ffa7 	bl	80036d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003782:	20a6      	movs	r0, #166	; 0xa6
 8003784:	f7ff ffa4 	bl	80036d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003788:	20a8      	movs	r0, #168	; 0xa8
 800378a:	f7ff ffa1 	bl	80036d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800378e:	201f      	movs	r0, #31
 8003790:	f7ff ff9e 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003794:	20a4      	movs	r0, #164	; 0xa4
 8003796:	f7ff ff9b 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800379a:	20d3      	movs	r0, #211	; 0xd3
 800379c:	f7ff ff98 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7ff ff95 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80037a6:	20d5      	movs	r0, #213	; 0xd5
 80037a8:	f7ff ff92 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80037ac:	20f0      	movs	r0, #240	; 0xf0
 80037ae:	f7ff ff8f 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80037b2:	20d9      	movs	r0, #217	; 0xd9
 80037b4:	f7ff ff8c 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80037b8:	2022      	movs	r0, #34	; 0x22
 80037ba:	f7ff ff89 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80037be:	20da      	movs	r0, #218	; 0xda
 80037c0:	f7ff ff86 	bl	80036d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80037c4:	2002      	movs	r0, #2
 80037c6:	f7ff ff83 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80037ca:	20db      	movs	r0, #219	; 0xdb
 80037cc:	f7ff ff80 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80037d0:	2020      	movs	r0, #32
 80037d2:	f7ff ff7d 	bl	80036d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80037d6:	208d      	movs	r0, #141	; 0x8d
 80037d8:	f7ff ff7a 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80037dc:	2014      	movs	r0, #20
 80037de:	f7ff ff77 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80037e2:	2001      	movs	r0, #1
 80037e4:	f000 f9c0 	bl	8003b68 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f000 f811 	bl	8003810 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80037ee:	f000 f829 	bl	8003844 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <ssd1306_Init+0xd4>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <ssd1306_Init+0xd4>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80037fe:	4b03      	ldr	r3, [pc, #12]	; (800380c <ssd1306_Init+0xd4>)
 8003800:	2201      	movs	r2, #1
 8003802:	711a      	strb	r2, [r3, #4]
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	2000061c 	.word	0x2000061c

08003810 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	0002      	movs	r2, r0
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <ssd1306_Fill+0x18>
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <ssd1306_Fill+0x1a>
 8003828:	23ff      	movs	r3, #255	; 0xff
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	0092      	lsls	r2, r2, #2
 800382e:	4804      	ldr	r0, [pc, #16]	; (8003840 <ssd1306_Fill+0x30>)
 8003830:	0019      	movs	r1, r3
 8003832:	f005 f89c 	bl	800896e <memset>
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b002      	add	sp, #8
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	2000041c 	.word	0x2000041c

08003844 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e01a      	b.n	8003888 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	3b50      	subs	r3, #80	; 0x50
 8003858:	b2db      	uxtb	r3, r3
 800385a:	0018      	movs	r0, r3
 800385c:	f7ff ff38 	bl	80036d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003860:	2000      	movs	r0, #0
 8003862:	f7ff ff35 	bl	80036d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003866:	2010      	movs	r0, #16
 8003868:	f7ff ff32 	bl	80036d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	01da      	lsls	r2, r3, #7
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <ssd1306_UpdateScreen+0x58>)
 8003874:	18d3      	adds	r3, r2, r3
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff ff43 	bl	8003704 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	3201      	adds	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	1dfb      	adds	r3, r7, #7
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d9e0      	bls.n	8003852 <ssd1306_UpdateScreen+0xe>
    }
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	2000041c 	.word	0x2000041c

080038a0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	0004      	movs	r4, r0
 80038a8:	0008      	movs	r0, r1
 80038aa:	0011      	movs	r1, r2
 80038ac:	1dfb      	adds	r3, r7, #7
 80038ae:	1c22      	adds	r2, r4, #0
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	1c02      	adds	r2, r0, #0
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	1d7b      	adds	r3, r7, #5
 80038ba:	1c0a      	adds	r2, r1, #0
 80038bc:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db47      	blt.n	8003958 <ssd1306_DrawPixel+0xb8>
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b1f      	cmp	r3, #31
 80038ce:	d843      	bhi.n	8003958 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80038d0:	1d7b      	adds	r3, r7, #5
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d11e      	bne.n	8003916 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	b2d8      	uxtb	r0, r3
 80038e4:	0003      	movs	r3, r0
 80038e6:	01db      	lsls	r3, r3, #7
 80038e8:	18d3      	adds	r3, r2, r3
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <ssd1306_DrawPixel+0xc0>)
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	b25a      	sxtb	r2, r3
 80038f0:	1dbb      	adds	r3, r7, #6
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2107      	movs	r1, #7
 80038f6:	400b      	ands	r3, r1
 80038f8:	2101      	movs	r1, #1
 80038fa:	4099      	lsls	r1, r3
 80038fc:	000b      	movs	r3, r1
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	4313      	orrs	r3, r2
 8003902:	b259      	sxtb	r1, r3
 8003904:	1dfb      	adds	r3, r7, #7
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	0003      	movs	r3, r0
 800390a:	01db      	lsls	r3, r3, #7
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	b2c9      	uxtb	r1, r1
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <ssd1306_DrawPixel+0xc0>)
 8003912:	54d1      	strb	r1, [r2, r3]
 8003914:	e021      	b.n	800395a <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	1dbb      	adds	r3, r7, #6
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	b2d8      	uxtb	r0, r3
 8003922:	0003      	movs	r3, r0
 8003924:	01db      	lsls	r3, r3, #7
 8003926:	18d3      	adds	r3, r2, r3
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <ssd1306_DrawPixel+0xc0>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	b25b      	sxtb	r3, r3
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	2107      	movs	r1, #7
 8003934:	400a      	ands	r2, r1
 8003936:	2101      	movs	r1, #1
 8003938:	4091      	lsls	r1, r2
 800393a:	000a      	movs	r2, r1
 800393c:	b252      	sxtb	r2, r2
 800393e:	43d2      	mvns	r2, r2
 8003940:	b252      	sxtb	r2, r2
 8003942:	4013      	ands	r3, r2
 8003944:	b259      	sxtb	r1, r3
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	0003      	movs	r3, r0
 800394c:	01db      	lsls	r3, r3, #7
 800394e:	18d3      	adds	r3, r2, r3
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	4a03      	ldr	r2, [pc, #12]	; (8003960 <ssd1306_DrawPixel+0xc0>)
 8003954:	54d1      	strb	r1, [r2, r3]
 8003956:	e000      	b.n	800395a <ssd1306_DrawPixel+0xba>
        return;
 8003958:	46c0      	nop			; (mov r8, r8)
    }
}
 800395a:	46bd      	mov	sp, r7
 800395c:	b003      	add	sp, #12
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	2000041c 	.word	0x2000041c

08003964 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	0004      	movs	r4, r0
 800396c:	0038      	movs	r0, r7
 800396e:	6001      	str	r1, [r0, #0]
 8003970:	6042      	str	r2, [r0, #4]
 8003972:	6083      	str	r3, [r0, #8]
 8003974:	210f      	movs	r1, #15
 8003976:	187b      	adds	r3, r7, r1
 8003978:	1c22      	adds	r2, r4, #0
 800397a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800397c:	000a      	movs	r2, r1
 800397e:	18bb      	adds	r3, r7, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b1f      	cmp	r3, #31
 8003984:	d903      	bls.n	800398e <ssd1306_WriteChar+0x2a>
 8003986:	18bb      	adds	r3, r7, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b7e      	cmp	r3, #126	; 0x7e
 800398c:	d901      	bls.n	8003992 <ssd1306_WriteChar+0x2e>
        return 0;
 800398e:	2300      	movs	r3, #0
 8003990:	e086      	b.n	8003aa0 <ssd1306_WriteChar+0x13c>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003992:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	001a      	movs	r2, r3
 8003998:	003b      	movs	r3, r7
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	dc07      	bgt.n	80039b2 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 80039a4:	885b      	ldrh	r3, [r3, #2]
 80039a6:	001a      	movs	r2, r3
 80039a8:	003b      	movs	r3, r7
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	dd01      	ble.n	80039b6 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e074      	b.n	8003aa0 <ssd1306_WriteChar+0x13c>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e051      	b.n	8003a60 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80039bc:	003b      	movs	r3, r7
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	230f      	movs	r3, #15
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	3b20      	subs	r3, #32
 80039c8:	0039      	movs	r1, r7
 80039ca:	7849      	ldrb	r1, [r1, #1]
 80039cc:	434b      	muls	r3, r1
 80039ce:	0019      	movs	r1, r3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	18cb      	adds	r3, r1, r3
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	18d3      	adds	r3, r2, r3
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e035      	b.n	8003a4e <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	409a      	lsls	r2, r3
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	4013      	ands	r3, r2
 80039ee:	d014      	beq.n	8003a1a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	b2d8      	uxtb	r0, r3
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 8003a00:	885b      	ldrh	r3, [r3, #2]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	b2d9      	uxtb	r1, r3
 8003a0c:	2330      	movs	r3, #48	; 0x30
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	001a      	movs	r2, r3
 8003a14:	f7ff ff44 	bl	80038a0 <ssd1306_DrawPixel>
 8003a18:	e016      	b.n	8003a48 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	b2d8      	uxtb	r0, r3
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 8003a2a:	885b      	ldrh	r3, [r3, #2]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	18d3      	adds	r3, r2, r3
 8003a34:	b2d9      	uxtb	r1, r3
 8003a36:	2330      	movs	r3, #48	; 0x30
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	425a      	negs	r2, r3
 8003a3e:	4153      	adcs	r3, r2
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	001a      	movs	r2, r3
 8003a44:	f7ff ff2c 	bl	80038a0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	003b      	movs	r3, r7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	001a      	movs	r2, r3
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d3c3      	bcc.n	80039e2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	003b      	movs	r3, r7
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	001a      	movs	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d3a7      	bcc.n	80039bc <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	003b      	movs	r3, r7
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <ssd1306_WriteChar+0x128>
 8003a78:	003b      	movs	r3, r7
 8003a7a:	6899      	ldr	r1, [r3, #8]
 8003a7c:	230f      	movs	r3, #15
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3b20      	subs	r3, #32
 8003a84:	18cb      	adds	r3, r1, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	e002      	b.n	8003a92 <ssd1306_WriteChar+0x12e>
 8003a8c:	003b      	movs	r3, r7
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <ssd1306_WriteChar+0x144>)
 8003a98:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003a9a:	230f      	movs	r3, #15
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	781b      	ldrb	r3, [r3, #0]
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b009      	add	sp, #36	; 0x24
 8003aa6:	bd90      	pop	{r4, r7, pc}
 8003aa8:	2000061c 	.word	0x2000061c

08003aac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	0038      	movs	r0, r7
 8003ab6:	6001      	str	r1, [r0, #0]
 8003ab8:	6042      	str	r2, [r0, #4]
 8003aba:	6083      	str	r3, [r0, #8]
    while (*str) {
 8003abc:	e017      	b.n	8003aee <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	7818      	ldrb	r0, [r3, #0]
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	18ba      	adds	r2, r7, r2
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	9200      	str	r2, [sp, #0]
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f7ff ff47 	bl	8003964 <ssd1306_WriteChar>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	001a      	movs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d002      	beq.n	8003ae8 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	e008      	b.n	8003afa <ssd1306_WriteString+0x4e>
        }
        str++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3301      	adds	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e3      	bne.n	8003abe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	781b      	ldrb	r3, [r3, #0]
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	1dfb      	adds	r3, r7, #7
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	1dbb      	adds	r3, r7, #6
 8003b12:	1c0a      	adds	r2, r1, #0
 8003b14:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <ssd1306_SetCursor+0x30>)
 8003b1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003b20:	1dbb      	adds	r3, r7, #6
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <ssd1306_SetCursor+0x30>)
 8003b28:	805a      	strh	r2, [r3, #2]
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b002      	add	sp, #8
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	2000061c 	.word	0x2000061c

08003b38 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	0002      	movs	r2, r0
 8003b40:	1dfb      	adds	r3, r7, #7
 8003b42:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003b44:	210f      	movs	r1, #15
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2281      	movs	r2, #129	; 0x81
 8003b4a:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff fdbd 	bl	80036d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff fdb8 	bl	80036d0 <ssd1306_WriteCommand>
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	0002      	movs	r2, r0
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003b7c:	230f      	movs	r3, #15
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	22af      	movs	r2, #175	; 0xaf
 8003b82:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <ssd1306_SetDisplayOn+0x48>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	715a      	strb	r2, [r3, #5]
 8003b8a:	e006      	b.n	8003b9a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	22ae      	movs	r2, #174	; 0xae
 8003b92:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <ssd1306_SetDisplayOn+0x48>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003b9a:	230f      	movs	r3, #15
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7ff fd95 	bl	80036d0 <ssd1306_WriteCommand>
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	2000061c 	.word	0x2000061c

08003bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_MspInit+0x24>)
 8003bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_MspInit+0x24>)
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_MspInit+0x24>)
 8003bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_MspInit+0x24>)
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	0549      	lsls	r1, r1, #21
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000

08003bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	240c      	movs	r4, #12
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	0018      	movs	r0, r3
 8003bea:	2314      	movs	r3, #20
 8003bec:	001a      	movs	r2, r3
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f004 febd 	bl	800896e <memset>
  if(hadc->Instance==ADC1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <HAL_ADC_MspInit+0x70>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d122      	bne.n	8003c44 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <HAL_ADC_MspInit+0x74>)
 8003c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_ADC_MspInit+0x74>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0089      	lsls	r1, r1, #2
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_ADC_MspInit+0x74>)
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <HAL_ADC_MspInit+0x74>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	430a      	orrs	r2, r1
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_ADC_MspInit+0x74>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c36:	193a      	adds	r2, r7, r4
 8003c38:	23a0      	movs	r3, #160	; 0xa0
 8003c3a:	05db      	lsls	r3, r3, #23
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 ff30 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b009      	add	sp, #36	; 0x24
 8003c4a:	bd90      	pop	{r4, r7, pc}
 8003c4c:	40012400 	.word	0x40012400
 8003c50:	40021000 	.word	0x40021000

08003c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	240c      	movs	r4, #12
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	0018      	movs	r0, r3
 8003c62:	2314      	movs	r3, #20
 8003c64:	001a      	movs	r2, r3
 8003c66:	2100      	movs	r1, #0
 8003c68:	f004 fe81 	bl	800896e <memset>
  if(hi2c->Instance==I2C1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_I2C_MspInit+0x80>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d129      	bne.n	8003cca <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <HAL_I2C_MspInit+0x84>)
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_I2C_MspInit+0x84>)
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_I2C_MspInit+0x84>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	2202      	movs	r2, #2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	22c0      	movs	r2, #192	; 0xc0
 8003c92:	0092      	lsls	r2, r2, #2
 8003c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c96:	0021      	movs	r1, r4
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2212      	movs	r2, #18
 8003c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2204      	movs	r2, #4
 8003cae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_I2C_MspInit+0x88>)
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	0010      	movs	r0, r2
 8003cb8:	f000 fef4 	bl	8004aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_I2C_MspInit+0x84>)
 8003cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_I2C_MspInit+0x84>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0389      	lsls	r1, r1, #14
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b009      	add	sp, #36	; 0x24
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	40005400 	.word	0x40005400
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	50000400 	.word	0x50000400

08003ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <HAL_TIM_Base_MspInit+0x60>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10e      	bne.n	8003d10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <HAL_TIM_Base_MspInit+0x64>)
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_TIM_Base_MspInit+0x64>)
 8003cf8:	2110      	movs	r1, #16
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	2011      	movs	r0, #17
 8003d04:	f000 fe8c 	bl	8004a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d08:	2011      	movs	r0, #17
 8003d0a:	f000 fe9e 	bl	8004a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003d0e:	e012      	b.n	8003d36 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <HAL_TIM_Base_MspInit+0x68>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10d      	bne.n	8003d36 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_TIM_Base_MspInit+0x64>)
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_TIM_Base_MspInit+0x64>)
 8003d20:	2120      	movs	r1, #32
 8003d22:	430a      	orrs	r2, r1
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2100      	movs	r1, #0
 8003d2a:	2012      	movs	r0, #18
 8003d2c:	f000 fe78 	bl	8004a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d30:	2012      	movs	r0, #18
 8003d32:	f000 fe8a 	bl	8004a4a <HAL_NVIC_EnableIRQ>
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	40001000 	.word	0x40001000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40001400 	.word	0x40001400

08003d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d54:	240c      	movs	r4, #12
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	0018      	movs	r0, r3
 8003d5a:	2314      	movs	r3, #20
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	f004 fe05 	bl	800896e <memset>
  if(huart->Instance==USART2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_UART_MspInit+0x80>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d129      	bne.n	8003dc2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_UART_MspInit+0x84>)
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_UART_MspInit+0x84>)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	0289      	lsls	r1, r1, #10
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_UART_MspInit+0x84>)
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_UART_MspInit+0x84>)
 8003d82:	2101      	movs	r1, #1
 8003d84:	430a      	orrs	r2, r1
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_UART_MspInit+0x84>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d94:	0021      	movs	r1, r4
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	220c      	movs	r2, #12
 8003d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	2202      	movs	r2, #2
 8003da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	2203      	movs	r2, #3
 8003dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	2204      	movs	r2, #4
 8003db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db4:	187a      	adds	r2, r7, r1
 8003db6:	23a0      	movs	r3, #160	; 0xa0
 8003db8:	05db      	lsls	r3, r3, #23
 8003dba:	0011      	movs	r1, r2
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 fe71 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b009      	add	sp, #36	; 0x24
 8003dc8:	bd90      	pop	{r4, r7, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	40004400 	.word	0x40004400
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <NMI_Handler+0x4>

08003dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dde:	e7fe      	b.n	8003dde <HardFault_Handler+0x4>

08003de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003df8:	f000 f96c 	bl	80040d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 ffe6 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	019b      	lsls	r3, r3, #6
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 ffe1 	bl	8004ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <TIM6_DAC_IRQHandler+0x14>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f002 fd2e 	bl	8006888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	200002a4 	.word	0x200002a4

08003e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <TIM7_IRQHandler+0x14>)
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f002 fd22 	bl	8006888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	200002e4 	.word	0x200002e4

08003e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  return 1;
 8003e54:	2301      	movs	r3, #1
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_kill>:

int _kill(int pid, int sig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e66:	f004 fddd 	bl	8008a24 <__errno>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	2216      	movs	r2, #22
 8003e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	425b      	negs	r3, r3
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_exit>:

void _exit (int status)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e84:	2301      	movs	r3, #1
 8003e86:	425a      	negs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	0011      	movs	r1, r2
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff ffe5 	bl	8003e5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e92:	e7fe      	b.n	8003e92 <_exit+0x16>

08003e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e00a      	b.n	8003ebc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ea6:	e000      	b.n	8003eaa <_read+0x16>
 8003ea8:	bf00      	nop
 8003eaa:	0001      	movs	r1, r0
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	60ba      	str	r2, [r7, #8]
 8003eb2:	b2ca      	uxtb	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	dbf0      	blt.n	8003ea6 <_read+0x12>
  }

  return len;
 8003ec4:	687b      	ldr	r3, [r7, #4]
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b006      	add	sp, #24
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e009      	b.n	8003ef4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	60ba      	str	r2, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fe fff7 	bl	8002edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	dbf1      	blt.n	8003ee0 <_write+0x12>
  }
  return len;
 8003efc:	687b      	ldr	r3, [r7, #4]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b006      	add	sp, #24
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <_close>:

int _close(int file)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	425b      	negs	r3, r3
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b002      	add	sp, #8
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	0192      	lsls	r2, r2, #6
 8003f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b002      	add	sp, #8
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_isatty>:

int _isatty(int file)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f3e:	2301      	movs	r3, #1
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b004      	add	sp, #16
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <_sbrk+0x5c>)
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <_sbrk+0x60>)
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <_sbrk+0x64>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <_sbrk+0x64>)
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <_sbrk+0x68>)
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <_sbrk+0x64>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	18d3      	adds	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d207      	bcs.n	8003fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f90:	f004 fd48 	bl	8008a24 <__errno>
 8003f94:	0003      	movs	r3, r0
 8003f96:	220c      	movs	r2, #12
 8003f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	e009      	b.n	8003fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <_sbrk+0x64>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <_sbrk+0x64>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	18d2      	adds	r2, r2, r3
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <_sbrk+0x64>)
 8003fb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b006      	add	sp, #24
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20005000 	.word	0x20005000
 8003fc0:	00000400 	.word	0x00000400
 8003fc4:	20000624 	.word	0x20000624
 8003fc8:	20000778 	.word	0x20000778

08003fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003fd8:	480d      	ldr	r0, [pc, #52]	; (8004010 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003fda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fdc:	f7ff fff6 	bl	8003fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	; (8004018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <LoopForever+0xe>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <LoopForever+0x16>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004006:	f004 fd13 	bl	8008a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400a:	f7ff f861 	bl	80030d0 <main>

0800400e <LoopForever>:

LoopForever:
    b LoopForever
 800400e:	e7fe      	b.n	800400e <LoopForever>
   ldr   r0, =_estack
 8004010:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004018:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800401c:	0800d448 	.word	0x0800d448
  ldr r2, =_sbss
 8004020:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004024:	20000778 	.word	0x20000778

08004028 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC1_COMP_IRQHandler>
	...

0800402c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004032:	1dfb      	adds	r3, r7, #7
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_Init+0x3c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_Init+0x3c>)
 800403e:	2140      	movs	r1, #64	; 0x40
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004044:	2000      	movs	r0, #0
 8004046:	f000 f811 	bl	800406c <HAL_InitTick>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d003      	beq.n	8004056 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800404e:	1dfb      	adds	r3, r7, #7
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e001      	b.n	800405a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004056:	f7ff fdad 	bl	8003bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800405a:	1dfb      	adds	r3, r7, #7
 800405c:	781b      	ldrb	r3, [r3, #0]
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b002      	add	sp, #8
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	40022000 	.word	0x40022000

0800406c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_InitTick+0x5c>)
 8004076:	681c      	ldr	r4, [r3, #0]
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_InitTick+0x60>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	0019      	movs	r1, r3
 800407e:	23fa      	movs	r3, #250	; 0xfa
 8004080:	0098      	lsls	r0, r3, #2
 8004082:	f7fc f85d 	bl	8000140 <__udivsi3>
 8004086:	0003      	movs	r3, r0
 8004088:	0019      	movs	r1, r3
 800408a:	0020      	movs	r0, r4
 800408c:	f7fc f858 	bl	8000140 <__udivsi3>
 8004090:	0003      	movs	r3, r0
 8004092:	0018      	movs	r0, r3
 8004094:	f000 fcf9 	bl	8004a8a <HAL_SYSTICK_Config>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e00f      	b.n	80040c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d80b      	bhi.n	80040be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	2301      	movs	r3, #1
 80040aa:	425b      	negs	r3, r3
 80040ac:	2200      	movs	r2, #0
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 fcb6 	bl	8004a20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_InitTick+0x64>)
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b003      	add	sp, #12
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	20000004 	.word	0x20000004
 80040cc:	2000000c 	.word	0x2000000c
 80040d0:	20000008 	.word	0x20000008

080040d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_IncTick+0x1c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	001a      	movs	r2, r3
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_IncTick+0x20>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	18d2      	adds	r2, r2, r3
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_IncTick+0x20>)
 80040e6:	601a      	str	r2, [r3, #0]
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	2000000c 	.word	0x2000000c
 80040f4:	20000628 	.word	0x20000628

080040f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  return uwTick;
 80040fc:	4b02      	ldr	r3, [pc, #8]	; (8004108 <HAL_GetTick+0x10>)
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	20000628 	.word	0x20000628

0800410c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004114:	f7ff fff0 	bl	80040f8 <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	d005      	beq.n	8004132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_Delay+0x44>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	001a      	movs	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	189b      	adds	r3, r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	f7ff ffe0 	bl	80040f8 <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	429a      	cmp	r2, r3
 8004142:	d8f7      	bhi.n	8004134 <HAL_Delay+0x28>
  {
  }
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	2000000c 	.word	0x2000000c

08004154 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e159      	b.n	800441a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2250      	movs	r2, #80	; 0x50
 8004178:	2100      	movs	r1, #0
 800417a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0018      	movs	r0, r3
 8004180:	f7ff fd2c 	bl	8003bdc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	2210      	movs	r2, #16
 800418a:	4013      	ands	r3, r2
 800418c:	2b10      	cmp	r3, #16
 800418e:	d005      	beq.n	800419c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2204      	movs	r2, #4
 8004198:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800419a:	d00b      	beq.n	80041b4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2210      	movs	r2, #16
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2250      	movs	r2, #80	; 0x50
 80041ac:	2100      	movs	r1, #0
 80041ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e132      	b.n	800441a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	4a9a      	ldr	r2, [pc, #616]	; (8004424 <HAL_ADC_Init+0x2d0>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	2202      	movs	r2, #2
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2203      	movs	r2, #3
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <HAL_ADC_Init+0x90>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_Init+0x90>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_Init+0x92>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d149      	bne.n	800427e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	23c0      	movs	r3, #192	; 0xc0
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d00b      	beq.n	800420e <HAL_ADC_Init+0xba>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	05db      	lsls	r3, r3, #23
 80041fe:	429a      	cmp	r2, r3
 8004200:	d005      	beq.n	800420e <HAL_ADC_Init+0xba>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	429a      	cmp	r2, r3
 800420c:	d111      	bne.n	8004232 <HAL_ADC_Init+0xde>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0092      	lsls	r2, r2, #2
 800421a:	0892      	lsrs	r2, r2, #2
 800421c:	611a      	str	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6919      	ldr	r1, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	e014      	b.n	800425c <HAL_ADC_Init+0x108>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0092      	lsls	r2, r2, #2
 800423e:	0892      	lsrs	r2, r2, #2
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	4b79      	ldr	r3, [pc, #484]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004248:	4978      	ldr	r1, [pc, #480]	; (800442c <HAL_ADC_Init+0x2d8>)
 800424a:	400a      	ands	r2, r1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	4b76      	ldr	r3, [pc, #472]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	4b74      	ldr	r3, [pc, #464]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2118      	movs	r1, #24
 8004268:	438a      	bics	r2, r1
 800426a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68d9      	ldr	r1, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b69      	ldr	r3, [pc, #420]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004284:	496a      	ldr	r1, [pc, #424]	; (8004430 <HAL_ADC_Init+0x2dc>)
 8004286:	400a      	ands	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_ADC_Init+0x2d4>)
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	065a      	lsls	r2, r3, #25
 8004294:	4b64      	ldr	r3, [pc, #400]	; (8004428 <HAL_ADC_Init+0x2d4>)
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	055b      	lsls	r3, r3, #21
 80042a4:	4013      	ands	r3, r2
 80042a6:	d108      	bne.n	80042ba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	0549      	lsls	r1, r1, #21
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	495b      	ldr	r1, [pc, #364]	; (8004434 <HAL_ADC_Init+0x2e0>)
 80042c6:	400a      	ands	r2, r1
 80042c8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68d9      	ldr	r1, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d101      	bne.n	80042e0 <HAL_ADC_Init+0x18c>
 80042dc:	2304      	movs	r3, #4
 80042de:	e000      	b.n	80042e2 <HAL_ADC_Init+0x18e>
 80042e0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80042e2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2020      	movs	r0, #32
 80042e8:	5c1b      	ldrb	r3, [r3, r0]
 80042ea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80042ec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	202c      	movs	r0, #44	; 0x2c
 80042f2:	5c1b      	ldrb	r3, [r3, r0]
 80042f4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80042f6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80042fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004304:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800430c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431a:	23c2      	movs	r3, #194	; 0xc2
 800431c:	33ff      	adds	r3, #255	; 0xff
 800431e:	429a      	cmp	r2, r3
 8004320:	d00b      	beq.n	800433a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68d9      	ldr	r1, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2221      	movs	r2, #33	; 0x21
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d11a      	bne.n	800437a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	5c9b      	ldrb	r3, [r3, r2]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	0249      	lsls	r1, r1, #9
 800435c:	430a      	orrs	r2, r1
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	e00b      	b.n	800437a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	2220      	movs	r2, #32
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	2201      	movs	r2, #1
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d11f      	bne.n	80043c2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	492a      	ldr	r1, [pc, #168]	; (8004438 <HAL_ADC_Init+0x2e4>)
 800438e:	400a      	ands	r2, r1
 8004390:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6919      	ldr	r1, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80043a0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80043a6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2101      	movs	r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	611a      	str	r2, [r3, #16]
 80043c0:	e00e      	b.n	80043e0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2101      	movs	r1, #1
 80043dc:	438a      	bics	r2, r1
 80043de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2107      	movs	r1, #7
 80043ec:	438a      	bics	r2, r1
 80043ee:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6959      	ldr	r1, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	2203      	movs	r2, #3
 800440e:	4393      	bics	r3, r2
 8004410:	2201      	movs	r2, #1
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b002      	add	sp, #8
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	fffffefd 	.word	0xfffffefd
 8004428:	40012708 	.word	0x40012708
 800442c:	ffc3ffff 	.word	0xffc3ffff
 8004430:	fdffffff 	.word	0xfdffffff
 8004434:	fffe0219 	.word	0xfffe0219
 8004438:	fffffc03 	.word	0xfffffc03

0800443c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004444:	230f      	movs	r3, #15
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2204      	movs	r2, #4
 8004454:	4013      	ands	r3, r2
 8004456:	d138      	bne.n	80044ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2250      	movs	r2, #80	; 0x50
 800445c:	5c9b      	ldrb	r3, [r3, r2]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_ADC_Start+0x2a>
 8004462:	2302      	movs	r3, #2
 8004464:	e038      	b.n	80044d8 <HAL_ADC_Start+0x9c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2250      	movs	r2, #80	; 0x50
 800446a:	2101      	movs	r1, #1
 800446c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d007      	beq.n	8004486 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004476:	230f      	movs	r3, #15
 8004478:	18fc      	adds	r4, r7, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 f979 	bl	8004774 <ADC_Enable>
 8004482:	0003      	movs	r3, r0
 8004484:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004486:	230f      	movs	r3, #15
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d120      	bne.n	80044d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <HAL_ADC_Start+0xa4>)
 8004496:	4013      	ands	r3, r2
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2250      	movs	r2, #80	; 0x50
 80044ac:	2100      	movs	r1, #0
 80044ae:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	221c      	movs	r2, #28
 80044b6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2104      	movs	r1, #4
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	e003      	b.n	80044d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044ca:	230f      	movs	r3, #15
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80044d2:	230f      	movs	r3, #15
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b005      	add	sp, #20
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	fffff0fe 	.word	0xfffff0fe

080044e4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d102      	bne.n	8004504 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80044fe:	2308      	movs	r3, #8
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e014      	b.n	800452e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10b      	bne.n	800452a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	2220      	movs	r2, #32
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2250      	movs	r2, #80	; 0x50
 8004522:	2100      	movs	r1, #0
 8004524:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e072      	b.n	8004610 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800452a:	230c      	movs	r3, #12
 800452c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800452e:	f7ff fde3 	bl	80040f8 <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004536:	e01f      	b.n	8004578 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	d01c      	beq.n	8004578 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_ADC_PollForConversion+0x70>
 8004544:	f7ff fdd8 	bl	80040f8 <HAL_GetTick>
 8004548:	0002      	movs	r2, r0
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d211      	bcs.n	8004578 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4013      	ands	r3, r2
 800455e:	d10b      	bne.n	8004578 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2204      	movs	r2, #4
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2250      	movs	r2, #80	; 0x50
 8004570:	2100      	movs	r1, #0
 8004572:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e04b      	b.n	8004610 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4013      	ands	r3, r2
 8004582:	d0d9      	beq.n	8004538 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	23c0      	movs	r3, #192	; 0xc0
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	4013      	ands	r3, r2
 800459e:	d12e      	bne.n	80045fe <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d129      	bne.n	80045fe <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2208      	movs	r2, #8
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d122      	bne.n	80045fe <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2204      	movs	r2, #4
 80045c0:	4013      	ands	r3, r2
 80045c2:	d110      	bne.n	80045e6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	210c      	movs	r1, #12
 80045d0:	438a      	bics	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <HAL_ADC_PollForConversion+0x134>)
 80045da:	4013      	ands	r3, r2
 80045dc:	2201      	movs	r2, #1
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
 80045e4:	e00b      	b.n	80045fe <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	2220      	movs	r2, #32
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	2201      	movs	r2, #1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	220c      	movs	r2, #12
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bd80      	pop	{r7, pc}
 8004618:	fffffefe 	.word	0xfffffefe

0800461c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2250      	movs	r2, #80	; 0x50
 8004642:	5c9b      	ldrb	r3, [r3, r2]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_ADC_ConfigChannel+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e085      	b.n	8004758 <HAL_ADC_ConfigChannel+0x124>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2250      	movs	r2, #80	; 0x50
 8004650:	2101      	movs	r1, #1
 8004652:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2204      	movs	r2, #4
 800465c:	4013      	ands	r3, r2
 800465e:	d00b      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	2220      	movs	r2, #32
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2250      	movs	r2, #80	; 0x50
 8004670:	2100      	movs	r1, #0
 8004672:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e06f      	b.n	8004758 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4a38      	ldr	r2, [pc, #224]	; (8004760 <HAL_ADC_ConfigChannel+0x12c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d035      	beq.n	80046ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	035b      	lsls	r3, r3, #13
 800468e:	0b5a      	lsrs	r2, r3, #13
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	02db      	lsls	r3, r3, #11
 80046a0:	4013      	ands	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80046a4:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	0409      	lsls	r1, r1, #16
 80046ae:	430a      	orrs	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80046b2:	200a      	movs	r0, #10
 80046b4:	f000 f8c6 	bl	8004844 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	4013      	ands	r3, r2
 80046c2:	d006      	beq.n	80046d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	03c9      	lsls	r1, r1, #15
 80046ce:	430a      	orrs	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	025b      	lsls	r3, r3, #9
 80046da:	4013      	ands	r3, r2
 80046dc:	d037      	beq.n	800474e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	0449      	lsls	r1, r1, #17
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e02f      	b.n	800474e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	035b      	lsls	r3, r3, #13
 80046fa:	0b5b      	lsrs	r3, r3, #13
 80046fc:	43d9      	mvns	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	400a      	ands	r2, r1
 8004704:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	02db      	lsls	r3, r3, #11
 800470e:	4013      	ands	r3, r2
 8004710:	d005      	beq.n	800471e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 8004718:	4913      	ldr	r1, [pc, #76]	; (8004768 <HAL_ADC_ConfigChannel+0x134>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	4013      	ands	r3, r2
 8004728:	d005      	beq.n	8004736 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 8004730:	490e      	ldr	r1, [pc, #56]	; (800476c <HAL_ADC_ConfigChannel+0x138>)
 8004732:	400a      	ands	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	4013      	ands	r3, r2
 8004740:	d005      	beq.n	800474e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <HAL_ADC_ConfigChannel+0x130>)
 8004748:	4909      	ldr	r1, [pc, #36]	; (8004770 <HAL_ADC_ConfigChannel+0x13c>)
 800474a:	400a      	ands	r2, r1
 800474c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2250      	movs	r2, #80	; 0x50
 8004752:	2100      	movs	r1, #0
 8004754:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b002      	add	sp, #8
 800475e:	bd80      	pop	{r7, pc}
 8004760:	00001001 	.word	0x00001001
 8004764:	40012708 	.word	0x40012708
 8004768:	ff7fffff 	.word	0xff7fffff
 800476c:	ffbfffff 	.word	0xffbfffff
 8004770:	feffffff 	.word	0xfeffffff

08004774 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2203      	movs	r2, #3
 8004788:	4013      	ands	r3, r2
 800478a:	2b01      	cmp	r3, #1
 800478c:	d108      	bne.n	80047a0 <ADC_Enable+0x2c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <ADC_Enable+0x2c>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <ADC_Enable+0x2e>
 80047a0:	2300      	movs	r3, #0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d146      	bne.n	8004834 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a24      	ldr	r2, [pc, #144]	; (8004840 <ADC_Enable+0xcc>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	d00d      	beq.n	80047ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	2210      	movs	r2, #16
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	2201      	movs	r2, #1
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e033      	b.n	8004836 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80047de:	2001      	movs	r0, #1
 80047e0:	f000 f830 	bl	8004844 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80047e4:	f7ff fc88 	bl	80040f8 <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047ec:	e01b      	b.n	8004826 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047ee:	f7ff fc83 	bl	80040f8 <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b0a      	cmp	r3, #10
 80047fa:	d914      	bls.n	8004826 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	2b01      	cmp	r3, #1
 8004808:	d00d      	beq.n	8004826 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	2210      	movs	r2, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	2201      	movs	r2, #1
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	4013      	ands	r3, r2
 8004830:	2b01      	cmp	r3, #1
 8004832:	d1dc      	bne.n	80047ee <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	0018      	movs	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	b004      	add	sp, #16
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	80000017 	.word	0x80000017

08004844 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <ADC_DelayMicroSecond+0x38>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	490b      	ldr	r1, [pc, #44]	; (8004880 <ADC_DelayMicroSecond+0x3c>)
 8004852:	0018      	movs	r0, r3
 8004854:	f7fb fc74 	bl	8000140 <__udivsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	001a      	movs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4353      	muls	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004862:	e002      	b.n	800486a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f9      	bne.n	8004864 <ADC_DelayMicroSecond+0x20>
  }
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b004      	add	sp, #16
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	20000004 	.word	0x20000004
 8004880:	000f4240 	.word	0x000f4240

08004884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	0002      	movs	r2, r0
 800488c:	1dfb      	adds	r3, r7, #7
 800488e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b7f      	cmp	r3, #127	; 0x7f
 8004896:	d809      	bhi.n	80048ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004898:	1dfb      	adds	r3, r7, #7
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	001a      	movs	r2, r3
 800489e:	231f      	movs	r3, #31
 80048a0:	401a      	ands	r2, r3
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <__NVIC_EnableIRQ+0x30>)
 80048a4:	2101      	movs	r1, #1
 80048a6:	4091      	lsls	r1, r2
 80048a8:	000a      	movs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
  }
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	e000e100 	.word	0xe000e100

080048b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	0002      	movs	r2, r0
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048c4:	1dfb      	adds	r3, r7, #7
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ca:	d810      	bhi.n	80048ee <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048cc:	1dfb      	adds	r3, r7, #7
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	001a      	movs	r2, r3
 80048d2:	231f      	movs	r3, #31
 80048d4:	4013      	ands	r3, r2
 80048d6:	4908      	ldr	r1, [pc, #32]	; (80048f8 <__NVIC_DisableIRQ+0x40>)
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	0013      	movs	r3, r2
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048e2:	f3bf 8f4f 	dsb	sy
}
 80048e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80048e8:	f3bf 8f6f 	isb	sy
}
 80048ec:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	e000e100 	.word	0xe000e100

080048fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	0002      	movs	r2, r0
 8004904:	6039      	str	r1, [r7, #0]
 8004906:	1dfb      	adds	r3, r7, #7
 8004908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b7f      	cmp	r3, #127	; 0x7f
 8004910:	d828      	bhi.n	8004964 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004912:	4a2f      	ldr	r2, [pc, #188]	; (80049d0 <__NVIC_SetPriority+0xd4>)
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b25b      	sxtb	r3, r3
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	33c0      	adds	r3, #192	; 0xc0
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	589b      	ldr	r3, [r3, r2]
 8004922:	1dfa      	adds	r2, r7, #7
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	0011      	movs	r1, r2
 8004928:	2203      	movs	r2, #3
 800492a:	400a      	ands	r2, r1
 800492c:	00d2      	lsls	r2, r2, #3
 800492e:	21ff      	movs	r1, #255	; 0xff
 8004930:	4091      	lsls	r1, r2
 8004932:	000a      	movs	r2, r1
 8004934:	43d2      	mvns	r2, r2
 8004936:	401a      	ands	r2, r3
 8004938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	22ff      	movs	r2, #255	; 0xff
 8004940:	401a      	ands	r2, r3
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	0018      	movs	r0, r3
 8004948:	2303      	movs	r3, #3
 800494a:	4003      	ands	r3, r0
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004950:	481f      	ldr	r0, [pc, #124]	; (80049d0 <__NVIC_SetPriority+0xd4>)
 8004952:	1dfb      	adds	r3, r7, #7
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b25b      	sxtb	r3, r3
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	430a      	orrs	r2, r1
 800495c:	33c0      	adds	r3, #192	; 0xc0
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004962:	e031      	b.n	80049c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <__NVIC_SetPriority+0xd8>)
 8004966:	1dfb      	adds	r3, r7, #7
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	0019      	movs	r1, r3
 800496c:	230f      	movs	r3, #15
 800496e:	400b      	ands	r3, r1
 8004970:	3b08      	subs	r3, #8
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	3306      	adds	r3, #6
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	18d3      	adds	r3, r2, r3
 800497a:	3304      	adds	r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1dfa      	adds	r2, r7, #7
 8004980:	7812      	ldrb	r2, [r2, #0]
 8004982:	0011      	movs	r1, r2
 8004984:	2203      	movs	r2, #3
 8004986:	400a      	ands	r2, r1
 8004988:	00d2      	lsls	r2, r2, #3
 800498a:	21ff      	movs	r1, #255	; 0xff
 800498c:	4091      	lsls	r1, r2
 800498e:	000a      	movs	r2, r1
 8004990:	43d2      	mvns	r2, r2
 8004992:	401a      	ands	r2, r3
 8004994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	019b      	lsls	r3, r3, #6
 800499a:	22ff      	movs	r2, #255	; 0xff
 800499c:	401a      	ands	r2, r3
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	0018      	movs	r0, r3
 80049a4:	2303      	movs	r3, #3
 80049a6:	4003      	ands	r3, r0
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ac:	4809      	ldr	r0, [pc, #36]	; (80049d4 <__NVIC_SetPriority+0xd8>)
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	001c      	movs	r4, r3
 80049b4:	230f      	movs	r3, #15
 80049b6:	4023      	ands	r3, r4
 80049b8:	3b08      	subs	r3, #8
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	430a      	orrs	r2, r1
 80049be:	3306      	adds	r3, #6
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	18c3      	adds	r3, r0, r3
 80049c4:	3304      	adds	r3, #4
 80049c6:	601a      	str	r2, [r3, #0]
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b003      	add	sp, #12
 80049ce:	bd90      	pop	{r4, r7, pc}
 80049d0:	e000e100 	.word	0xe000e100
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	045b      	lsls	r3, r3, #17
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d301      	bcc.n	80049f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ec:	2301      	movs	r3, #1
 80049ee:	e010      	b.n	8004a12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <SysTick_Config+0x44>)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	3a01      	subs	r2, #1
 80049f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049f8:	2301      	movs	r3, #1
 80049fa:	425b      	negs	r3, r3
 80049fc:	2103      	movs	r1, #3
 80049fe:	0018      	movs	r0, r3
 8004a00:	f7ff ff7c 	bl	80048fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <SysTick_Config+0x44>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0a:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <SysTick_Config+0x44>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b002      	add	sp, #8
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	e000e010 	.word	0xe000e010

08004a20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	210f      	movs	r1, #15
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	1c02      	adds	r2, r0, #0
 8004a30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	187b      	adds	r3, r7, r1
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b25b      	sxtb	r3, r3
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7ff ff5d 	bl	80048fc <__NVIC_SetPriority>
}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b004      	add	sp, #16
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	0002      	movs	r2, r0
 8004a52:	1dfb      	adds	r3, r7, #7
 8004a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a56:	1dfb      	adds	r3, r7, #7
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff ff11 	bl	8004884 <__NVIC_EnableIRQ>
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	0002      	movs	r2, r0
 8004a72:	1dfb      	adds	r3, r7, #7
 8004a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff ff1b 	bl	80048b8 <__NVIC_DisableIRQ>
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b002      	add	sp, #8
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7ff ff9f 	bl	80049d8 <SysTick_Config>
 8004a9a:	0003      	movs	r3, r0
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004aba:	e155      	b.n	8004d68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4091      	lsls	r1, r2
 8004ac6:	000a      	movs	r2, r1
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d100      	bne.n	8004ad4 <HAL_GPIO_Init+0x30>
 8004ad2:	e146      	b.n	8004d62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d005      	beq.n	8004aec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d130      	bne.n	8004b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2203      	movs	r2, #3
 8004af8:	409a      	lsls	r2, r3
 8004afa:	0013      	movs	r3, r2
 8004afc:	43da      	mvns	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	0013      	movs	r3, r2
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b22:	2201      	movs	r2, #1
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	409a      	lsls	r2, r3
 8004b28:	0013      	movs	r3, r2
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	2201      	movs	r2, #1
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	0013      	movs	r3, r2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2203      	movs	r2, #3
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d017      	beq.n	8004b8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	409a      	lsls	r2, r3
 8004b68:	0013      	movs	r3, r2
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	0013      	movs	r3, r2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d123      	bne.n	8004bde <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	08da      	lsrs	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3208      	adds	r2, #8
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	58d3      	ldr	r3, [r2, r3]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	4013      	ands	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	220f      	movs	r2, #15
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	0013      	movs	r3, r2
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2107      	movs	r1, #7
 8004bc2:	400b      	ands	r3, r1
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	0013      	movs	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	08da      	lsrs	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3208      	adds	r2, #8
 8004bd8:	0092      	lsls	r2, r2, #2
 8004bda:	6939      	ldr	r1, [r7, #16]
 8004bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	409a      	lsls	r2, r3
 8004bec:	0013      	movs	r3, r2
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	401a      	ands	r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	0013      	movs	r3, r2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	23c0      	movs	r3, #192	; 0xc0
 8004c18:	029b      	lsls	r3, r3, #10
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d100      	bne.n	8004c20 <HAL_GPIO_Init+0x17c>
 8004c1e:	e0a0      	b.n	8004d62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c20:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <HAL_GPIO_Init+0x2dc>)
 8004c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c24:	4b56      	ldr	r3, [pc, #344]	; (8004d80 <HAL_GPIO_Init+0x2dc>)
 8004c26:	2101      	movs	r1, #1
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c2c:	4a55      	ldr	r2, [pc, #340]	; (8004d84 <HAL_GPIO_Init+0x2e0>)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	3302      	adds	r3, #2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	589b      	ldr	r3, [r3, r2]
 8004c38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	220f      	movs	r2, #15
 8004c44:	409a      	lsls	r2, r3
 8004c46:	0013      	movs	r3, r2
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	23a0      	movs	r3, #160	; 0xa0
 8004c54:	05db      	lsls	r3, r3, #23
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d01f      	beq.n	8004c9a <HAL_GPIO_Init+0x1f6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <HAL_GPIO_Init+0x2e4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d019      	beq.n	8004c96 <HAL_GPIO_Init+0x1f2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a49      	ldr	r2, [pc, #292]	; (8004d8c <HAL_GPIO_Init+0x2e8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_GPIO_Init+0x1ee>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a48      	ldr	r2, [pc, #288]	; (8004d90 <HAL_GPIO_Init+0x2ec>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00d      	beq.n	8004c8e <HAL_GPIO_Init+0x1ea>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <HAL_GPIO_Init+0x2f0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <HAL_GPIO_Init+0x1e6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <HAL_GPIO_Init+0x2f4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <HAL_GPIO_Init+0x1e2>
 8004c82:	2305      	movs	r3, #5
 8004c84:	e00a      	b.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c86:	2306      	movs	r3, #6
 8004c88:	e008      	b.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	e006      	b.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e004      	b.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e002      	b.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	2103      	movs	r1, #3
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	4093      	lsls	r3, r2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cac:	4935      	ldr	r1, [pc, #212]	; (8004d84 <HAL_GPIO_Init+0x2e0>)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cba:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	035b      	lsls	r3, r3, #13
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004cde:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	43da      	mvns	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	039b      	lsls	r3, r3, #14
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004d0e:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	43da      	mvns	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	4013      	ands	r3, r2
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d32:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	43da      	mvns	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	025b      	lsls	r3, r3, #9
 8004d50:	4013      	ands	r3, r2
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	3301      	adds	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	40da      	lsrs	r2, r3
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	d000      	beq.n	8004d76 <HAL_GPIO_Init+0x2d2>
 8004d74:	e6a2      	b.n	8004abc <HAL_GPIO_Init+0x18>
  }
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b006      	add	sp, #24
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40010000 	.word	0x40010000
 8004d88:	50000400 	.word	0x50000400
 8004d8c:	50000800 	.word	0x50000800
 8004d90:	50000c00 	.word	0x50000c00
 8004d94:	50001000 	.word	0x50001000
 8004d98:	50001c00 	.word	0x50001c00
 8004d9c:	40010400 	.word	0x40010400

08004da0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	0008      	movs	r0, r1
 8004daa:	0011      	movs	r1, r2
 8004dac:	1cbb      	adds	r3, r7, #2
 8004dae:	1c02      	adds	r2, r0, #0
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	1c7b      	adds	r3, r7, #1
 8004db4:	1c0a      	adds	r2, r1, #0
 8004db6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004db8:	1c7b      	adds	r3, r7, #1
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dc0:	1cbb      	adds	r3, r7, #2
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004dc8:	e003      	b.n	8004dd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004dca:	1cbb      	adds	r3, r7, #2
 8004dcc:	881a      	ldrh	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b002      	add	sp, #8
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	0002      	movs	r2, r0
 8004de4:	1dbb      	adds	r3, r7, #6
 8004de6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	1dba      	adds	r2, r7, #6
 8004dee:	8812      	ldrh	r2, [r2, #0]
 8004df0:	4013      	ands	r3, r2
 8004df2:	d008      	beq.n	8004e06 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004df6:	1dba      	adds	r2, r7, #6
 8004df8:	8812      	ldrh	r2, [r2, #0]
 8004dfa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dfc:	1dbb      	adds	r3, r7, #6
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7fe f8c9 	bl	8002f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	40010400 	.word	0x40010400

08004e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e082      	b.n	8004f2c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2241      	movs	r2, #65	; 0x41
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	2100      	movs	r1, #0
 8004e38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7fe ff09 	bl	8003c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2241      	movs	r2, #65	; 0x41
 8004e46:	2124      	movs	r1, #36	; 0x24
 8004e48:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2101      	movs	r1, #1
 8004e56:	438a      	bics	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4934      	ldr	r1, [pc, #208]	; (8004f34 <HAL_I2C_Init+0x120>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4931      	ldr	r1, [pc, #196]	; (8004f38 <HAL_I2C_Init+0x124>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	0209      	lsls	r1, r1, #8
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	e007      	b.n	8004ea2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2184      	movs	r1, #132	; 0x84
 8004e9c:	0209      	lsls	r1, r1, #8
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d104      	bne.n	8004eb4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2280      	movs	r2, #128	; 0x80
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	491f      	ldr	r1, [pc, #124]	; (8004f3c <HAL_I2C_Init+0x128>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	491a      	ldr	r1, [pc, #104]	; (8004f38 <HAL_I2C_Init+0x124>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69d9      	ldr	r1, [r3, #28]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2241      	movs	r2, #65	; 0x41
 8004f18:	2120      	movs	r1, #32
 8004f1a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2242      	movs	r2, #66	; 0x42
 8004f26:	2100      	movs	r1, #0
 8004f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	f0ffffff 	.word	0xf0ffffff
 8004f38:	ffff7fff 	.word	0xffff7fff
 8004f3c:	02008000 	.word	0x02008000

08004f40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	000c      	movs	r4, r1
 8004f4a:	0010      	movs	r0, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	230a      	movs	r3, #10
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	1c22      	adds	r2, r4, #0
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	2308      	movs	r3, #8
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	1c02      	adds	r2, r0, #0
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	1dbb      	adds	r3, r7, #6
 8004f60:	1c0a      	adds	r2, r1, #0
 8004f62:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2241      	movs	r2, #65	; 0x41
 8004f68:	5c9b      	ldrb	r3, [r3, r2]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d000      	beq.n	8004f72 <HAL_I2C_Mem_Write+0x32>
 8004f70:	e10c      	b.n	800518c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <HAL_I2C_Mem_Write+0x42>
 8004f78:	232c      	movs	r3, #44	; 0x2c
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	0092      	lsls	r2, r2, #2
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0ff      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2240      	movs	r2, #64	; 0x40
 8004f92:	5c9b      	ldrb	r3, [r3, r2]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_I2C_Mem_Write+0x5c>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0f8      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fa4:	f7ff f8a8 	bl	80040f8 <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	0219      	lsls	r1, r3, #8
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	2319      	movs	r3, #25
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f000 f975 	bl	80052a8 <I2C_WaitOnFlagUntilTimeout>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0e3      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2241      	movs	r2, #65	; 0x41
 8004fca:	2121      	movs	r1, #33	; 0x21
 8004fcc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2242      	movs	r2, #66	; 0x42
 8004fd2:	2140      	movs	r1, #64	; 0x40
 8004fd4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	222c      	movs	r2, #44	; 0x2c
 8004fe6:	18ba      	adds	r2, r7, r2
 8004fe8:	8812      	ldrh	r2, [r2, #0]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ff2:	1dbb      	adds	r3, r7, #6
 8004ff4:	881c      	ldrh	r4, [r3, #0]
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	881a      	ldrh	r2, [r3, #0]
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	8819      	ldrh	r1, [r3, #0]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	0023      	movs	r3, r4
 800500e:	f000 f8c5 	bl	800519c <I2C_RequestMemoryWrite>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d005      	beq.n	8005022 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2240      	movs	r2, #64	; 0x40
 800501a:	2100      	movs	r1, #0
 800501c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e0b5      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2bff      	cmp	r3, #255	; 0xff
 800502a:	d911      	bls.n	8005050 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	22ff      	movs	r2, #255	; 0xff
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	b2da      	uxtb	r2, r3
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	045c      	lsls	r4, r3, #17
 800503c:	230a      	movs	r3, #10
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	8819      	ldrh	r1, [r3, #0]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	0023      	movs	r3, r4
 800504a:	f000 fb05 	bl	8005658 <I2C_TransferConfig>
 800504e:	e012      	b.n	8005076 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505e:	b2da      	uxtb	r2, r3
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	049c      	lsls	r4, r3, #18
 8005064:	230a      	movs	r3, #10
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	8819      	ldrh	r1, [r3, #0]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	0023      	movs	r3, r4
 8005072:	f000 faf1 	bl	8005658 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	0018      	movs	r0, r3
 800507e:	f000 f961 	bl	8005344 <I2C_WaitOnTXISFlagUntilTimeout>
 8005082:	1e03      	subs	r3, r0, #0
 8005084:	d001      	beq.n	800508a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e081      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03a      	beq.n	800513a <HAL_I2C_Mem_Write+0x1fa>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d136      	bne.n	800513a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	0013      	movs	r3, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	f000 f8e5 	bl	80052a8 <I2C_WaitOnFlagUntilTimeout>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e053      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2bff      	cmp	r3, #255	; 0xff
 80050ee:	d911      	bls.n	8005114 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	22ff      	movs	r2, #255	; 0xff
 80050f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	045c      	lsls	r4, r3, #17
 8005100:	230a      	movs	r3, #10
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	8819      	ldrh	r1, [r3, #0]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	2300      	movs	r3, #0
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	0023      	movs	r3, r4
 800510e:	f000 faa3 	bl	8005658 <I2C_TransferConfig>
 8005112:	e012      	b.n	800513a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	b2da      	uxtb	r2, r3
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	049c      	lsls	r4, r3, #18
 8005128:	230a      	movs	r3, #10
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	8819      	ldrh	r1, [r3, #0]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	2300      	movs	r3, #0
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	0023      	movs	r3, r4
 8005136:	f000 fa8f 	bl	8005658 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d198      	bne.n	8005076 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 f940 	bl	80053d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e01a      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2220      	movs	r2, #32
 800515e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	490b      	ldr	r1, [pc, #44]	; (8005198 <HAL_I2C_Mem_Write+0x258>)
 800516c:	400a      	ands	r2, r1
 800516e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2241      	movs	r2, #65	; 0x41
 8005174:	2120      	movs	r1, #32
 8005176:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2242      	movs	r2, #66	; 0x42
 800517c:	2100      	movs	r1, #0
 800517e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2240      	movs	r2, #64	; 0x40
 8005184:	2100      	movs	r1, #0
 8005186:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800518c:	2302      	movs	r3, #2
  }
}
 800518e:	0018      	movs	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	b007      	add	sp, #28
 8005194:	bd90      	pop	{r4, r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	fe00e800 	.word	0xfe00e800

0800519c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800519c:	b5b0      	push	{r4, r5, r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	000c      	movs	r4, r1
 80051a6:	0010      	movs	r0, r2
 80051a8:	0019      	movs	r1, r3
 80051aa:	250a      	movs	r5, #10
 80051ac:	197b      	adds	r3, r7, r5
 80051ae:	1c22      	adds	r2, r4, #0
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	2308      	movs	r3, #8
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	1c02      	adds	r2, r0, #0
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	1dbb      	adds	r3, r7, #6
 80051bc:	1c0a      	adds	r2, r1, #0
 80051be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051c0:	1dbb      	adds	r3, r7, #6
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	045c      	lsls	r4, r3, #17
 80051ca:	197b      	adds	r3, r7, r5
 80051cc:	8819      	ldrh	r1, [r3, #0]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	4b23      	ldr	r3, [pc, #140]	; (8005260 <I2C_RequestMemoryWrite+0xc4>)
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	0023      	movs	r3, r4
 80051d6:	f000 fa3f 	bl	8005658 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 f8af 	bl	8005344 <I2C_WaitOnTXISFlagUntilTimeout>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d001      	beq.n	80051ee <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e033      	b.n	8005256 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ee:	1dbb      	adds	r3, r7, #6
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d107      	bne.n	8005206 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051f6:	2308      	movs	r3, #8
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
 8005204:	e019      	b.n	800523a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005206:	2308      	movs	r3, #8
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	b29b      	uxth	r3, r3
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	6a39      	ldr	r1, [r7, #32]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 f890 	bl	8005344 <I2C_WaitOnTXISFlagUntilTimeout>
 8005224:	1e03      	subs	r3, r0, #0
 8005226:	d001      	beq.n	800522c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e014      	b.n	8005256 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800522c:	2308      	movs	r3, #8
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	0013      	movs	r3, r2
 8005244:	2200      	movs	r2, #0
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	f000 f82e 	bl	80052a8 <I2C_WaitOnFlagUntilTimeout>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d001      	beq.n	8005254 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	0018      	movs	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	b004      	add	sp, #16
 800525c:	bdb0      	pop	{r4, r5, r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	80002000 	.word	0x80002000

08005264 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2202      	movs	r2, #2
 8005274:	4013      	ands	r3, r2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d103      	bne.n	8005282 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	2b01      	cmp	r3, #1
 800528e:	d007      	beq.n	80052a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	430a      	orrs	r2, r1
 800529e:	619a      	str	r2, [r3, #24]
  }
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b002      	add	sp, #8
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	1dfb      	adds	r3, r7, #7
 80052b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b8:	e030      	b.n	800531c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	d02d      	beq.n	800531c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fe ff1a 	bl	80040f8 <HAL_GetTick>
 80052c4:	0002      	movs	r2, r0
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d122      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	425a      	negs	r2, r3
 80052e6:	4153      	adcs	r3, r2
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	001a      	movs	r2, r3
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d113      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	2220      	movs	r2, #32
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2241      	movs	r2, #65	; 0x41
 8005304:	2120      	movs	r1, #32
 8005306:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2242      	movs	r2, #66	; 0x42
 800530c:	2100      	movs	r1, #0
 800530e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2240      	movs	r2, #64	; 0x40
 8005314:	2100      	movs	r1, #0
 8005316:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e00f      	b.n	800533c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	425a      	negs	r2, r3
 800532c:	4153      	adcs	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	001a      	movs	r2, r3
 8005332:	1dfb      	adds	r3, r7, #7
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d0bf      	beq.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b004      	add	sp, #16
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005350:	e032      	b.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 f87d 	bl	8005458 <I2C_IsErrorOccurred>
 800535e:	1e03      	subs	r3, r0, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e030      	b.n	80053c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3301      	adds	r3, #1
 800536a:	d025      	beq.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536c:	f7fe fec4 	bl	80040f8 <HAL_GetTick>
 8005370:	0002      	movs	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11a      	bne.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2202      	movs	r2, #2
 800538a:	4013      	ands	r3, r2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d013      	beq.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	2220      	movs	r2, #32
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2241      	movs	r2, #65	; 0x41
 80053a0:	2120      	movs	r1, #32
 80053a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2242      	movs	r2, #66	; 0x42
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2240      	movs	r2, #64	; 0x40
 80053b0:	2100      	movs	r1, #0
 80053b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2202      	movs	r2, #2
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d1c5      	bne.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053dc:	e02f      	b.n	800543e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f837 	bl	8005458 <I2C_IsErrorOccurred>
 80053ea:	1e03      	subs	r3, r0, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e02d      	b.n	800544e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fe fe81 	bl	80040f8 <HAL_GetTick>
 80053f6:	0002      	movs	r2, r0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d11a      	bne.n	800543e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2220      	movs	r2, #32
 8005410:	4013      	ands	r3, r2
 8005412:	2b20      	cmp	r3, #32
 8005414:	d013      	beq.n	800543e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	2220      	movs	r2, #32
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2241      	movs	r2, #65	; 0x41
 8005426:	2120      	movs	r1, #32
 8005428:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2242      	movs	r2, #66	; 0x42
 800542e:	2100      	movs	r1, #0
 8005430:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	2100      	movs	r1, #0
 8005438:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e007      	b.n	800544e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2220      	movs	r2, #32
 8005446:	4013      	ands	r3, r2
 8005448:	2b20      	cmp	r3, #32
 800544a:	d1c8      	bne.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b004      	add	sp, #16
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b08b      	sub	sp, #44	; 0x2c
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2327      	movs	r3, #39	; 0x27
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2210      	movs	r2, #16
 8005480:	4013      	ands	r3, r2
 8005482:	d100      	bne.n	8005486 <I2C_IsErrorOccurred+0x2e>
 8005484:	e082      	b.n	800558c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2210      	movs	r2, #16
 800548c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800548e:	e060      	b.n	8005552 <I2C_IsErrorOccurred+0xfa>
 8005490:	2427      	movs	r4, #39	; 0x27
 8005492:	193b      	adds	r3, r7, r4
 8005494:	193a      	adds	r2, r7, r4
 8005496:	7812      	ldrb	r2, [r2, #0]
 8005498:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3301      	adds	r3, #1
 800549e:	d058      	beq.n	8005552 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054a0:	f7fe fe2a 	bl	80040f8 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d306      	bcc.n	80054be <I2C_IsErrorOccurred+0x66>
 80054b0:	193b      	adds	r3, r7, r4
 80054b2:	193a      	adds	r2, r7, r4
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d149      	bne.n	8005552 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	01db      	lsls	r3, r3, #7
 80054c8:	4013      	ands	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054cc:	2013      	movs	r0, #19
 80054ce:	183b      	adds	r3, r7, r0
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	2142      	movs	r1, #66	; 0x42
 80054d4:	5c52      	ldrb	r2, [r2, r1]
 80054d6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	401a      	ands	r2, r3
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d126      	bne.n	800553a <I2C_IsErrorOccurred+0xe2>
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d021      	beq.n	800553a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80054f6:	183b      	adds	r3, r7, r0
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d01d      	beq.n	800553a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	01c9      	lsls	r1, r1, #7
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005510:	f7fe fdf2 	bl	80040f8 <HAL_GetTick>
 8005514:	0003      	movs	r3, r0
 8005516:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005518:	e00f      	b.n	800553a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800551a:	f7fe fded 	bl	80040f8 <HAL_GetTick>
 800551e:	0002      	movs	r2, r0
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b19      	cmp	r3, #25
 8005526:	d908      	bls.n	800553a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2220      	movs	r2, #32
 800552c:	4313      	orrs	r3, r2
 800552e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005530:	2327      	movs	r3, #39	; 0x27
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]

              break;
 8005538:	e00b      	b.n	8005552 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2220      	movs	r2, #32
 8005542:	4013      	ands	r3, r2
 8005544:	2127      	movs	r1, #39	; 0x27
 8005546:	187a      	adds	r2, r7, r1
 8005548:	1879      	adds	r1, r7, r1
 800554a:	7809      	ldrb	r1, [r1, #0]
 800554c:	7011      	strb	r1, [r2, #0]
 800554e:	2b20      	cmp	r3, #32
 8005550:	d1e3      	bne.n	800551a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2220      	movs	r2, #32
 800555a:	4013      	ands	r3, r2
 800555c:	2b20      	cmp	r3, #32
 800555e:	d004      	beq.n	800556a <I2C_IsErrorOccurred+0x112>
 8005560:	2327      	movs	r3, #39	; 0x27
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d092      	beq.n	8005490 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800556a:	2327      	movs	r3, #39	; 0x27
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2220      	movs	r2, #32
 800557a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	2204      	movs	r2, #4
 8005580:	4313      	orrs	r3, r2
 8005582:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005584:	2327      	movs	r3, #39	; 0x27
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4013      	ands	r3, r2
 800559c:	d00c      	beq.n	80055b8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	2201      	movs	r2, #1
 80055a2:	4313      	orrs	r3, r2
 80055a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	0052      	lsls	r2, r2, #1
 80055ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055b0:	2327      	movs	r3, #39	; 0x27
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	2201      	movs	r2, #1
 80055b6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4013      	ands	r3, r2
 80055c0:	d00c      	beq.n	80055dc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2208      	movs	r2, #8
 80055c6:	4313      	orrs	r3, r2
 80055c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	00d2      	lsls	r2, r2, #3
 80055d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055d4:	2327      	movs	r3, #39	; 0x27
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4013      	ands	r3, r2
 80055e4:	d00c      	beq.n	8005600 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	2202      	movs	r2, #2
 80055ea:	4313      	orrs	r3, r2
 80055ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	0092      	lsls	r2, r2, #2
 80055f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055f8:	2327      	movs	r3, #39	; 0x27
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005600:	2327      	movs	r3, #39	; 0x27
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01d      	beq.n	8005646 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff fe29 	bl	8005264 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	490d      	ldr	r1, [pc, #52]	; (8005654 <I2C_IsErrorOccurred+0x1fc>)
 800561e:	400a      	ands	r2, r1
 8005620:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2241      	movs	r2, #65	; 0x41
 8005632:	2120      	movs	r1, #32
 8005634:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2242      	movs	r2, #66	; 0x42
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2240      	movs	r2, #64	; 0x40
 8005642:	2100      	movs	r1, #0
 8005644:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005646:	2327      	movs	r3, #39	; 0x27
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	781b      	ldrb	r3, [r3, #0]
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b00b      	add	sp, #44	; 0x2c
 8005652:	bd90      	pop	{r4, r7, pc}
 8005654:	fe00e800 	.word	0xfe00e800

08005658 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005658:	b590      	push	{r4, r7, lr}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	0008      	movs	r0, r1
 8005662:	0011      	movs	r1, r2
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	240a      	movs	r4, #10
 8005668:	193b      	adds	r3, r7, r4
 800566a:	1c02      	adds	r2, r0, #0
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	2009      	movs	r0, #9
 8005670:	183b      	adds	r3, r7, r0
 8005672:	1c0a      	adds	r2, r1, #0
 8005674:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005676:	193b      	adds	r3, r7, r4
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	059b      	lsls	r3, r3, #22
 800567c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800567e:	183b      	adds	r3, r7, r0
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	0419      	lsls	r1, r3, #16
 8005684:	23ff      	movs	r3, #255	; 0xff
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800568a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	4313      	orrs	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a2:	0d51      	lsrs	r1, r2, #21
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	00d2      	lsls	r2, r2, #3
 80056a8:	400a      	ands	r2, r1
 80056aa:	4907      	ldr	r1, [pc, #28]	; (80056c8 <I2C_TransferConfig+0x70>)
 80056ac:	430a      	orrs	r2, r1
 80056ae:	43d2      	mvns	r2, r2
 80056b0:	401a      	ands	r2, r3
 80056b2:	0011      	movs	r1, r2
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b007      	add	sp, #28
 80056c4:	bd90      	pop	{r4, r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	03ff63ff 	.word	0x03ff63ff

080056cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2241      	movs	r2, #65	; 0x41
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d138      	bne.n	8005754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2240      	movs	r2, #64	; 0x40
 80056e6:	5c9b      	ldrb	r3, [r3, r2]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e032      	b.n	8005756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2240      	movs	r2, #64	; 0x40
 80056f4:	2101      	movs	r1, #1
 80056f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2241      	movs	r2, #65	; 0x41
 80056fc:	2124      	movs	r1, #36	; 0x24
 80056fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2101      	movs	r1, #1
 800570c:	438a      	bics	r2, r1
 800570e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4911      	ldr	r1, [pc, #68]	; (8005760 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800571c:	400a      	ands	r2, r1
 800571e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2101      	movs	r1, #1
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2241      	movs	r2, #65	; 0x41
 8005744:	2120      	movs	r1, #32
 8005746:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	2100      	movs	r1, #0
 800574e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	ffffefff 	.word	0xffffefff

08005764 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2241      	movs	r2, #65	; 0x41
 8005772:	5c9b      	ldrb	r3, [r3, r2]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b20      	cmp	r3, #32
 8005778:	d139      	bne.n	80057ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2240      	movs	r2, #64	; 0x40
 800577e:	5c9b      	ldrb	r3, [r3, r2]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005784:	2302      	movs	r3, #2
 8005786:	e033      	b.n	80057f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2240      	movs	r2, #64	; 0x40
 800578c:	2101      	movs	r1, #1
 800578e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2241      	movs	r2, #65	; 0x41
 8005794:	2124      	movs	r1, #36	; 0x24
 8005796:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2101      	movs	r1, #1
 80057a4:	438a      	bics	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2101      	movs	r1, #1
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2241      	movs	r2, #65	; 0x41
 80057de:	2120      	movs	r1, #32
 80057e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2240      	movs	r2, #64	; 0x40
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b004      	add	sp, #16
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	fffff0ff 	.word	0xfffff0ff

080057fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057fc:	b5b0      	push	{r4, r5, r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f000 fbbf 	bl	8005f8e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005810:	4bc9      	ldr	r3, [pc, #804]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	220c      	movs	r2, #12
 8005816:	4013      	ands	r3, r2
 8005818:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800581a:	4bc7      	ldr	r3, [pc, #796]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	025b      	lsls	r3, r3, #9
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	4013      	ands	r3, r2
 800582e:	d100      	bne.n	8005832 <HAL_RCC_OscConfig+0x36>
 8005830:	e07e      	b.n	8005930 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d007      	beq.n	8005848 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d112      	bne.n	8005864 <HAL_RCC_OscConfig+0x68>
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	025b      	lsls	r3, r3, #9
 8005844:	429a      	cmp	r2, r3
 8005846:	d10d      	bne.n	8005864 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	4bbb      	ldr	r3, [pc, #748]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	4013      	ands	r3, r2
 8005852:	d100      	bne.n	8005856 <HAL_RCC_OscConfig+0x5a>
 8005854:	e06b      	b.n	800592e <HAL_RCC_OscConfig+0x132>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d167      	bne.n	800592e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f000 fb95 	bl	8005f8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	025b      	lsls	r3, r3, #9
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x84>
 8005870:	4bb1      	ldr	r3, [pc, #708]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4bb0      	ldr	r3, [pc, #704]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	0249      	lsls	r1, r1, #9
 800587a:	430a      	orrs	r2, r1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e027      	b.n	80058d0 <HAL_RCC_OscConfig+0xd4>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	23a0      	movs	r3, #160	; 0xa0
 8005886:	02db      	lsls	r3, r3, #11
 8005888:	429a      	cmp	r2, r3
 800588a:	d10e      	bne.n	80058aa <HAL_RCC_OscConfig+0xae>
 800588c:	4baa      	ldr	r3, [pc, #680]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4ba9      	ldr	r3, [pc, #676]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	02c9      	lsls	r1, r1, #11
 8005896:	430a      	orrs	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	4ba7      	ldr	r3, [pc, #668]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4ba6      	ldr	r3, [pc, #664]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	0249      	lsls	r1, r1, #9
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e012      	b.n	80058d0 <HAL_RCC_OscConfig+0xd4>
 80058aa:	4ba3      	ldr	r3, [pc, #652]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4ba2      	ldr	r3, [pc, #648]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058b0:	49a2      	ldr	r1, [pc, #648]	; (8005b3c <HAL_RCC_OscConfig+0x340>)
 80058b2:	400a      	ands	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	4ba0      	ldr	r3, [pc, #640]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	025b      	lsls	r3, r3, #9
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4b9c      	ldr	r3, [pc, #624]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b9b      	ldr	r3, [pc, #620]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058ca:	499d      	ldr	r1, [pc, #628]	; (8005b40 <HAL_RCC_OscConfig+0x344>)
 80058cc:	400a      	ands	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fe fc0e 	bl	80040f8 <HAL_GetTick>
 80058dc:	0003      	movs	r3, r0
 80058de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058e0:	e009      	b.n	80058f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e2:	f7fe fc09 	bl	80040f8 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b64      	cmp	r3, #100	; 0x64
 80058ee:	d902      	bls.n	80058f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	f000 fb4c 	bl	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058f6:	4b90      	ldr	r3, [pc, #576]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	4013      	ands	r3, r2
 8005900:	d0ef      	beq.n	80058e2 <HAL_RCC_OscConfig+0xe6>
 8005902:	e015      	b.n	8005930 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fe fbf8 	bl	80040f8 <HAL_GetTick>
 8005908:	0003      	movs	r3, r0
 800590a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590e:	f7fe fbf3 	bl	80040f8 <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b64      	cmp	r3, #100	; 0x64
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e336      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005920:	4b85      	ldr	r3, [pc, #532]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	4013      	ands	r3, r2
 800592a:	d1f0      	bne.n	800590e <HAL_RCC_OscConfig+0x112>
 800592c:	e000      	b.n	8005930 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2202      	movs	r2, #2
 8005936:	4013      	ands	r3, r2
 8005938:	d100      	bne.n	800593c <HAL_RCC_OscConfig+0x140>
 800593a:	e099      	b.n	8005a70 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	2220      	movs	r2, #32
 8005946:	4013      	ands	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800594a:	4b7b      	ldr	r3, [pc, #492]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b7a      	ldr	r3, [pc, #488]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005950:	2120      	movs	r1, #32
 8005952:	430a      	orrs	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	2220      	movs	r2, #32
 800595a:	4393      	bics	r3, r2
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d005      	beq.n	8005970 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d13e      	bne.n	80059e8 <HAL_RCC_OscConfig+0x1ec>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13b      	bne.n	80059e8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005970:	4b71      	ldr	r3, [pc, #452]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2204      	movs	r2, #4
 8005976:	4013      	ands	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_RCC_OscConfig+0x188>
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e304      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005984:	4b6c      	ldr	r3, [pc, #432]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a6e      	ldr	r2, [pc, #440]	; (8005b44 <HAL_RCC_OscConfig+0x348>)
 800598a:	4013      	ands	r3, r2
 800598c:	0019      	movs	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	021a      	lsls	r2, r3, #8
 8005994:	4b68      	ldr	r3, [pc, #416]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800599a:	4b67      	ldr	r3, [pc, #412]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2209      	movs	r2, #9
 80059a0:	4393      	bics	r3, r2
 80059a2:	0019      	movs	r1, r3
 80059a4:	4b64      	ldr	r3, [pc, #400]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80059a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ac:	f000 fc42 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80059b0:	0001      	movs	r1, r0
 80059b2:	4b61      	ldr	r3, [pc, #388]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	091b      	lsrs	r3, r3, #4
 80059b8:	220f      	movs	r2, #15
 80059ba:	4013      	ands	r3, r2
 80059bc:	4a62      	ldr	r2, [pc, #392]	; (8005b48 <HAL_RCC_OscConfig+0x34c>)
 80059be:	5cd3      	ldrb	r3, [r2, r3]
 80059c0:	000a      	movs	r2, r1
 80059c2:	40da      	lsrs	r2, r3
 80059c4:	4b61      	ldr	r3, [pc, #388]	; (8005b4c <HAL_RCC_OscConfig+0x350>)
 80059c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCC_OscConfig+0x354>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2513      	movs	r5, #19
 80059ce:	197c      	adds	r4, r7, r5
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7fe fb4b 	bl	800406c <HAL_InitTick>
 80059d6:	0003      	movs	r3, r0
 80059d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80059da:	197b      	adds	r3, r7, r5
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d046      	beq.n	8005a70 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80059e2:	197b      	adds	r3, r7, r5
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	e2d2      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d027      	beq.n	8005a3e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80059ee:	4b52      	ldr	r3, [pc, #328]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2209      	movs	r2, #9
 80059f4:	4393      	bics	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	4b4f      	ldr	r3, [pc, #316]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 80059fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fc:	430a      	orrs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a00:	f7fe fb7a 	bl	80040f8 <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a0a:	f7fe fb75 	bl	80040f8 <HAL_GetTick>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e2b8      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a1c:	4b46      	ldr	r3, [pc, #280]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2204      	movs	r2, #4
 8005a22:	4013      	ands	r3, r2
 8005a24:	d0f1      	beq.n	8005a0a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a26:	4b44      	ldr	r3, [pc, #272]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4a46      	ldr	r2, [pc, #280]	; (8005b44 <HAL_RCC_OscConfig+0x348>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	021a      	lsls	r2, r3, #8
 8005a36:	4b40      	ldr	r3, [pc, #256]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
 8005a3c:	e018      	b.n	8005a70 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b3d      	ldr	r3, [pc, #244]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a44:	2101      	movs	r1, #1
 8005a46:	438a      	bics	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7fe fb55 	bl	80040f8 <HAL_GetTick>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a54:	f7fe fb50 	bl	80040f8 <HAL_GetTick>
 8005a58:	0002      	movs	r2, r0
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e293      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d1f1      	bne.n	8005a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2210      	movs	r2, #16
 8005a76:	4013      	ands	r3, r2
 8005a78:	d100      	bne.n	8005a7c <HAL_RCC_OscConfig+0x280>
 8005a7a:	e0a2      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d140      	bne.n	8005b04 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a82:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d005      	beq.n	8005a9a <HAL_RCC_OscConfig+0x29e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e279      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a9a:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4a2d      	ldr	r2, [pc, #180]	; (8005b54 <HAL_RCC_OscConfig+0x358>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa8:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	0a19      	lsrs	r1, r3, #8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	061a      	lsls	r2, r3, #24
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	0b5b      	lsrs	r3, r3, #13
 8005ac8:	3301      	adds	r3, #1
 8005aca:	2280      	movs	r2, #128	; 0x80
 8005acc:	0212      	lsls	r2, r2, #8
 8005ace:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	400b      	ands	r3, r1
 8005ada:	491b      	ldr	r1, [pc, #108]	; (8005b48 <HAL_RCC_OscConfig+0x34c>)
 8005adc:	5ccb      	ldrb	r3, [r1, r3]
 8005ade:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_RCC_OscConfig+0x350>)
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <HAL_RCC_OscConfig+0x354>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2513      	movs	r5, #19
 8005aea:	197c      	adds	r4, r7, r5
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fe fabd 	bl	800406c <HAL_InitTick>
 8005af2:	0003      	movs	r3, r0
 8005af4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005af6:	197b      	adds	r3, r7, r5
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d061      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005afe:	197b      	adds	r3, r7, r5
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	e244      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d040      	beq.n	8005b8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_OscConfig+0x33c>)
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	0049      	lsls	r1, r1, #1
 8005b16:	430a      	orrs	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fe faed 	bl	80040f8 <HAL_GetTick>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b22:	e019      	b.n	8005b58 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b24:	f7fe fae8 	bl	80040f8 <HAL_GetTick>
 8005b28:	0002      	movs	r2, r0
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d912      	bls.n	8005b58 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e22b      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	fffeffff 	.word	0xfffeffff
 8005b40:	fffbffff 	.word	0xfffbffff
 8005b44:	ffffe0ff 	.word	0xffffe0ff
 8005b48:	0800cfa4 	.word	0x0800cfa4
 8005b4c:	20000004 	.word	0x20000004
 8005b50:	20000008 	.word	0x20000008
 8005b54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b58:	4bca      	ldr	r3, [pc, #808]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4013      	ands	r3, r2
 8005b62:	d0df      	beq.n	8005b24 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b64:	4bc7      	ldr	r3, [pc, #796]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4ac7      	ldr	r2, [pc, #796]	; (8005e88 <HAL_RCC_OscConfig+0x68c>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b72:	4bc4      	ldr	r3, [pc, #784]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b78:	4bc2      	ldr	r3, [pc, #776]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	0a19      	lsrs	r1, r3, #8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	061a      	lsls	r2, r3, #24
 8005b86:	4bbf      	ldr	r3, [pc, #764]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e019      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b8e:	4bbd      	ldr	r3, [pc, #756]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4bbc      	ldr	r3, [pc, #752]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005b94:	49bd      	ldr	r1, [pc, #756]	; (8005e8c <HAL_RCC_OscConfig+0x690>)
 8005b96:	400a      	ands	r2, r1
 8005b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fe faad 	bl	80040f8 <HAL_GetTick>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ba4:	f7fe faa8 	bl	80040f8 <HAL_GetTick>
 8005ba8:	0002      	movs	r2, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1eb      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005bb6:	4bb3      	ldr	r3, [pc, #716]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d036      	beq.n	8005c3a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d019      	beq.n	8005c08 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd4:	4bab      	ldr	r3, [pc, #684]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bd8:	4baa      	ldr	r3, [pc, #680]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005bda:	2101      	movs	r1, #1
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be0:	f7fe fa8a 	bl	80040f8 <HAL_GetTick>
 8005be4:	0003      	movs	r3, r0
 8005be6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bea:	f7fe fa85 	bl	80040f8 <HAL_GetTick>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e1c8      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bfc:	4ba1      	ldr	r3, [pc, #644]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	2202      	movs	r2, #2
 8005c02:	4013      	ands	r3, r2
 8005c04:	d0f1      	beq.n	8005bea <HAL_RCC_OscConfig+0x3ee>
 8005c06:	e018      	b.n	8005c3a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c08:	4b9e      	ldr	r3, [pc, #632]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c0c:	4b9d      	ldr	r3, [pc, #628]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005c0e:	2101      	movs	r1, #1
 8005c10:	438a      	bics	r2, r1
 8005c12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c14:	f7fe fa70 	bl	80040f8 <HAL_GetTick>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1e:	f7fe fa6b 	bl	80040f8 <HAL_GetTick>
 8005c22:	0002      	movs	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e1ae      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c30:	4b94      	ldr	r3, [pc, #592]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c34:	2202      	movs	r2, #2
 8005c36:	4013      	ands	r3, r2
 8005c38:	d1f1      	bne.n	8005c1e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2204      	movs	r2, #4
 8005c40:	4013      	ands	r3, r2
 8005c42:	d100      	bne.n	8005c46 <HAL_RCC_OscConfig+0x44a>
 8005c44:	e0ae      	b.n	8005da4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c46:	2023      	movs	r0, #35	; 0x23
 8005c48:	183b      	adds	r3, r7, r0
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4e:	4b8d      	ldr	r3, [pc, #564]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	055b      	lsls	r3, r3, #21
 8005c56:	4013      	ands	r3, r2
 8005c58:	d109      	bne.n	8005c6e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5a:	4b8a      	ldr	r3, [pc, #552]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5e:	4b89      	ldr	r3, [pc, #548]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	0549      	lsls	r1, r1, #21
 8005c64:	430a      	orrs	r2, r1
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005c68:	183b      	adds	r3, r7, r0
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4b88      	ldr	r3, [pc, #544]	; (8005e90 <HAL_RCC_OscConfig+0x694>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4013      	ands	r3, r2
 8005c78:	d11a      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7a:	4b85      	ldr	r3, [pc, #532]	; (8005e90 <HAL_RCC_OscConfig+0x694>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b84      	ldr	r3, [pc, #528]	; (8005e90 <HAL_RCC_OscConfig+0x694>)
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	0049      	lsls	r1, r1, #1
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c88:	f7fe fa36 	bl	80040f8 <HAL_GetTick>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c92:	f7fe fa31 	bl	80040f8 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b64      	cmp	r3, #100	; 0x64
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e174      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca4:	4b7a      	ldr	r3, [pc, #488]	; (8005e90 <HAL_RCC_OscConfig+0x694>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4d0>
 8005cbc:	4b71      	ldr	r3, [pc, #452]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc0:	4b70      	ldr	r3, [pc, #448]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005cc2:	2180      	movs	r1, #128	; 0x80
 8005cc4:	0049      	lsls	r1, r1, #1
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	651a      	str	r2, [r3, #80]	; 0x50
 8005cca:	e031      	b.n	8005d30 <HAL_RCC_OscConfig+0x534>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCC_OscConfig+0x4f2>
 8005cd4:	4b6b      	ldr	r3, [pc, #428]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cd8:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005cda:	496c      	ldr	r1, [pc, #432]	; (8005e8c <HAL_RCC_OscConfig+0x690>)
 8005cdc:	400a      	ands	r2, r1
 8005cde:	651a      	str	r2, [r3, #80]	; 0x50
 8005ce0:	4b68      	ldr	r3, [pc, #416]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce4:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005ce6:	496b      	ldr	r1, [pc, #428]	; (8005e94 <HAL_RCC_OscConfig+0x698>)
 8005ce8:	400a      	ands	r2, r1
 8005cea:	651a      	str	r2, [r3, #80]	; 0x50
 8005cec:	e020      	b.n	8005d30 <HAL_RCC_OscConfig+0x534>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	23a0      	movs	r3, #160	; 0xa0
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d10e      	bne.n	8005d18 <HAL_RCC_OscConfig+0x51c>
 8005cfa:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cfe:	4b61      	ldr	r3, [pc, #388]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	00c9      	lsls	r1, r1, #3
 8005d04:	430a      	orrs	r2, r1
 8005d06:	651a      	str	r2, [r3, #80]	; 0x50
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d0c:	4b5d      	ldr	r3, [pc, #372]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	0049      	lsls	r1, r1, #1
 8005d12:	430a      	orrs	r2, r1
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50
 8005d16:	e00b      	b.n	8005d30 <HAL_RCC_OscConfig+0x534>
 8005d18:	4b5a      	ldr	r3, [pc, #360]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d1c:	4b59      	ldr	r3, [pc, #356]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d1e:	495b      	ldr	r1, [pc, #364]	; (8005e8c <HAL_RCC_OscConfig+0x690>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	651a      	str	r2, [r3, #80]	; 0x50
 8005d24:	4b57      	ldr	r3, [pc, #348]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d28:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d2a:	495a      	ldr	r1, [pc, #360]	; (8005e94 <HAL_RCC_OscConfig+0x698>)
 8005d2c:	400a      	ands	r2, r1
 8005d2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d38:	f7fe f9de 	bl	80040f8 <HAL_GetTick>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d40:	e009      	b.n	8005d56 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fe f9d9 	bl	80040f8 <HAL_GetTick>
 8005d46:	0002      	movs	r2, r0
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	4a52      	ldr	r2, [pc, #328]	; (8005e98 <HAL_RCC_OscConfig+0x69c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e11b      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d56:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d0ef      	beq.n	8005d42 <HAL_RCC_OscConfig+0x546>
 8005d62:	e014      	b.n	8005d8e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d64:	f7fe f9c8 	bl	80040f8 <HAL_GetTick>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d6c:	e009      	b.n	8005d82 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fe f9c3 	bl	80040f8 <HAL_GetTick>
 8005d72:	0002      	movs	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	4a47      	ldr	r2, [pc, #284]	; (8005e98 <HAL_RCC_OscConfig+0x69c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e105      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d82:	4b40      	ldr	r3, [pc, #256]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d1ef      	bne.n	8005d6e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d8e:	2323      	movs	r3, #35	; 0x23
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d98:	4b3a      	ldr	r3, [pc, #232]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9c:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005d9e:	493f      	ldr	r1, [pc, #252]	; (8005e9c <HAL_RCC_OscConfig+0x6a0>)
 8005da0:	400a      	ands	r2, r1
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2220      	movs	r2, #32
 8005daa:	4013      	ands	r3, r2
 8005dac:	d049      	beq.n	8005e42 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d026      	beq.n	8005e04 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005db6:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005dc8:	2101      	movs	r1, #1
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8005dce:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <HAL_RCC_OscConfig+0x6a4>)
 8005dd0:	6a1a      	ldr	r2, [r3, #32]
 8005dd2:	4b33      	ldr	r3, [pc, #204]	; (8005ea0 <HAL_RCC_OscConfig+0x6a4>)
 8005dd4:	2180      	movs	r1, #128	; 0x80
 8005dd6:	0189      	lsls	r1, r1, #6
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fe f98c 	bl	80040f8 <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005de6:	f7fe f987 	bl	80040f8 <HAL_GetTick>
 8005dea:	0002      	movs	r2, r0
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e0ca      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005df8:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d0f1      	beq.n	8005de6 <HAL_RCC_OscConfig+0x5ea>
 8005e02:	e01e      	b.n	8005e42 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005e04:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	438a      	bics	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <HAL_RCC_OscConfig+0x6a4>)
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <HAL_RCC_OscConfig+0x6a4>)
 8005e16:	4923      	ldr	r1, [pc, #140]	; (8005ea4 <HAL_RCC_OscConfig+0x6a8>)
 8005e18:	400a      	ands	r2, r1
 8005e1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fe f96c 	bl	80040f8 <HAL_GetTick>
 8005e20:	0003      	movs	r3, r0
 8005e22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e26:	f7fe f967 	bl	80040f8 <HAL_GetTick>
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e0aa      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e38:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d1f1      	bne.n	8005e26 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d100      	bne.n	8005e4c <HAL_RCC_OscConfig+0x650>
 8005e4a:	e09f      	b.n	8005f8c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d100      	bne.n	8005e54 <HAL_RCC_OscConfig+0x658>
 8005e52:	e078      	b.n	8005f46 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d159      	bne.n	8005f10 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_RCC_OscConfig+0x688>)
 8005e62:	4911      	ldr	r1, [pc, #68]	; (8005ea8 <HAL_RCC_OscConfig+0x6ac>)
 8005e64:	400a      	ands	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fe f946 	bl	80040f8 <HAL_GetTick>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e70:	e01c      	b.n	8005eac <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e72:	f7fe f941 	bl	80040f8 <HAL_GetTick>
 8005e76:	0002      	movs	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d915      	bls.n	8005eac <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e084      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
 8005e84:	40021000 	.word	0x40021000
 8005e88:	ffff1fff 	.word	0xffff1fff
 8005e8c:	fffffeff 	.word	0xfffffeff
 8005e90:	40007000 	.word	0x40007000
 8005e94:	fffffbff 	.word	0xfffffbff
 8005e98:	00001388 	.word	0x00001388
 8005e9c:	efffffff 	.word	0xefffffff
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	ffffdfff 	.word	0xffffdfff
 8005ea8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005eac:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	049b      	lsls	r3, r3, #18
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d1dc      	bne.n	8005e72 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eb8:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4a37      	ldr	r2, [pc, #220]	; (8005f9c <HAL_RCC_OscConfig+0x7a0>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed8:	4b2f      	ldr	r3, [pc, #188]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005ede:	2180      	movs	r1, #128	; 0x80
 8005ee0:	0449      	lsls	r1, r1, #17
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee6:	f7fe f907 	bl	80040f8 <HAL_GetTick>
 8005eea:	0003      	movs	r3, r0
 8005eec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fe f902 	bl	80040f8 <HAL_GetTick>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e045      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005f02:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	049b      	lsls	r3, r3, #18
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x6f4>
 8005f0e:	e03d      	b.n	8005f8c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005f16:	4922      	ldr	r1, [pc, #136]	; (8005fa0 <HAL_RCC_OscConfig+0x7a4>)
 8005f18:	400a      	ands	r2, r1
 8005f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fe f8ec 	bl	80040f8 <HAL_GetTick>
 8005f20:	0003      	movs	r3, r0
 8005f22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fe f8e7 	bl	80040f8 <HAL_GetTick>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e02a      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	049b      	lsls	r3, r3, #18
 8005f40:	4013      	ands	r3, r2
 8005f42:	d1f0      	bne.n	8005f26 <HAL_RCC_OscConfig+0x72a>
 8005f44:	e022      	b.n	8005f8c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e01d      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <HAL_RCC_OscConfig+0x79c>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	2380      	movs	r3, #128	; 0x80
 8005f5c:	025b      	lsls	r3, r3, #9
 8005f5e:	401a      	ands	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d10f      	bne.n	8005f88 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	23f0      	movs	r3, #240	; 0xf0
 8005f6c:	039b      	lsls	r3, r3, #14
 8005f6e:	401a      	ands	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	23c0      	movs	r3, #192	; 0xc0
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	401a      	ands	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b00a      	add	sp, #40	; 0x28
 8005f94:	bdb0      	pop	{r4, r5, r7, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	ff02ffff 	.word	0xff02ffff
 8005fa0:	feffffff 	.word	0xfeffffff

08005fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b5b0      	push	{r4, r5, r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e128      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b96      	ldr	r3, [pc, #600]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d91e      	bls.n	8006004 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b93      	ldr	r3, [pc, #588]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4393      	bics	r3, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	4b90      	ldr	r3, [pc, #576]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fd8:	f7fe f88e 	bl	80040f8 <HAL_GetTick>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe0:	e009      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe2:	f7fe f889 	bl	80040f8 <HAL_GetTick>
 8005fe6:	0002      	movs	r2, r0
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	4a8a      	ldr	r2, [pc, #552]	; (8006218 <HAL_RCC_ClockConfig+0x274>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e109      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b87      	ldr	r3, [pc, #540]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d1ee      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2202      	movs	r2, #2
 800600a:	4013      	ands	r3, r2
 800600c:	d009      	beq.n	8006022 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800600e:	4b83      	ldr	r3, [pc, #524]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	22f0      	movs	r2, #240	; 0xf0
 8006014:	4393      	bics	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	4b7f      	ldr	r3, [pc, #508]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 800601e:	430a      	orrs	r2, r1
 8006020:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	4013      	ands	r3, r2
 800602a:	d100      	bne.n	800602e <HAL_RCC_ClockConfig+0x8a>
 800602c:	e089      	b.n	8006142 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006036:	4b79      	ldr	r3, [pc, #484]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	4013      	ands	r3, r2
 8006040:	d120      	bne.n	8006084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0e1      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800604e:	4b73      	ldr	r3, [pc, #460]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	049b      	lsls	r3, r3, #18
 8006056:	4013      	ands	r3, r2
 8006058:	d114      	bne.n	8006084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e0d5      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d106      	bne.n	8006074 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006066:	4b6d      	ldr	r3, [pc, #436]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2204      	movs	r2, #4
 800606c:	4013      	ands	r3, r2
 800606e:	d109      	bne.n	8006084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0ca      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006074:	4b69      	ldr	r3, [pc, #420]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4013      	ands	r3, r2
 800607e:	d101      	bne.n	8006084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0c2      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006084:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2203      	movs	r2, #3
 800608a:	4393      	bics	r3, r2
 800608c:	0019      	movs	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	4b62      	ldr	r3, [pc, #392]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006094:	430a      	orrs	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006098:	f7fe f82e 	bl	80040f8 <HAL_GetTick>
 800609c:	0003      	movs	r3, r0
 800609e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d111      	bne.n	80060cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80060a8:	e009      	b.n	80060be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060aa:	f7fe f825 	bl	80040f8 <HAL_GetTick>
 80060ae:	0002      	movs	r2, r0
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	4a58      	ldr	r2, [pc, #352]	; (8006218 <HAL_RCC_ClockConfig+0x274>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e0a5      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80060be:	4b57      	ldr	r3, [pc, #348]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	220c      	movs	r2, #12
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d1ef      	bne.n	80060aa <HAL_RCC_ClockConfig+0x106>
 80060ca:	e03a      	b.n	8006142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d111      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d4:	e009      	b.n	80060ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d6:	f7fe f80f 	bl	80040f8 <HAL_GetTick>
 80060da:	0002      	movs	r2, r0
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	4a4d      	ldr	r2, [pc, #308]	; (8006218 <HAL_RCC_ClockConfig+0x274>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e08f      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ea:	4b4c      	ldr	r3, [pc, #304]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	220c      	movs	r2, #12
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b0c      	cmp	r3, #12
 80060f4:	d1ef      	bne.n	80060d6 <HAL_RCC_ClockConfig+0x132>
 80060f6:	e024      	b.n	8006142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11b      	bne.n	8006138 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006100:	e009      	b.n	8006116 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006102:	f7fd fff9 	bl	80040f8 <HAL_GetTick>
 8006106:	0002      	movs	r2, r0
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	4a42      	ldr	r2, [pc, #264]	; (8006218 <HAL_RCC_ClockConfig+0x274>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e079      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006116:	4b41      	ldr	r3, [pc, #260]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	220c      	movs	r2, #12
 800611c:	4013      	ands	r3, r2
 800611e:	2b04      	cmp	r3, #4
 8006120:	d1ef      	bne.n	8006102 <HAL_RCC_ClockConfig+0x15e>
 8006122:	e00e      	b.n	8006142 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006124:	f7fd ffe8 	bl	80040f8 <HAL_GetTick>
 8006128:	0002      	movs	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	4a3a      	ldr	r2, [pc, #232]	; (8006218 <HAL_RCC_ClockConfig+0x274>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e068      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006138:	4b38      	ldr	r3, [pc, #224]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	220c      	movs	r2, #12
 800613e:	4013      	ands	r3, r2
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006142:	4b34      	ldr	r3, [pc, #208]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	4013      	ands	r3, r2
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d21e      	bcs.n	800618e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006150:	4b30      	ldr	r3, [pc, #192]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	4393      	bics	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	4b2e      	ldr	r3, [pc, #184]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006162:	f7fd ffc9 	bl	80040f8 <HAL_GetTick>
 8006166:	0003      	movs	r3, r0
 8006168:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	e009      	b.n	8006180 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800616c:	f7fd ffc4 	bl	80040f8 <HAL_GetTick>
 8006170:	0002      	movs	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	4a28      	ldr	r2, [pc, #160]	; (8006218 <HAL_RCC_ClockConfig+0x274>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e044      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006180:	4b24      	ldr	r3, [pc, #144]	; (8006214 <HAL_RCC_ClockConfig+0x270>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2201      	movs	r2, #1
 8006186:	4013      	ands	r3, r2
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d1ee      	bne.n	800616c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2204      	movs	r2, #4
 8006194:	4013      	ands	r3, r2
 8006196:	d009      	beq.n	80061ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006198:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	4a20      	ldr	r2, [pc, #128]	; (8006220 <HAL_RCC_ClockConfig+0x27c>)
 800619e:	4013      	ands	r3, r2
 80061a0:	0019      	movs	r1, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	4b1d      	ldr	r3, [pc, #116]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 80061a8:	430a      	orrs	r2, r1
 80061aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2208      	movs	r2, #8
 80061b2:	4013      	ands	r3, r2
 80061b4:	d00a      	beq.n	80061cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061b6:	4b19      	ldr	r3, [pc, #100]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4a1a      	ldr	r2, [pc, #104]	; (8006224 <HAL_RCC_ClockConfig+0x280>)
 80061bc:	4013      	ands	r3, r2
 80061be:	0019      	movs	r1, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	00da      	lsls	r2, r3, #3
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 80061c8:	430a      	orrs	r2, r1
 80061ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061cc:	f000 f832 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80061d0:	0001      	movs	r1, r0
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <HAL_RCC_ClockConfig+0x278>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	091b      	lsrs	r3, r3, #4
 80061d8:	220f      	movs	r2, #15
 80061da:	4013      	ands	r3, r2
 80061dc:	4a12      	ldr	r2, [pc, #72]	; (8006228 <HAL_RCC_ClockConfig+0x284>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	000a      	movs	r2, r1
 80061e2:	40da      	lsrs	r2, r3
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_RCC_ClockConfig+0x288>)
 80061e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <HAL_RCC_ClockConfig+0x28c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	250b      	movs	r5, #11
 80061ee:	197c      	adds	r4, r7, r5
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fd ff3b 	bl	800406c <HAL_InitTick>
 80061f6:	0003      	movs	r3, r0
 80061f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80061fa:	197b      	adds	r3, r7, r5
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006202:	197b      	adds	r3, r7, r5
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	e000      	b.n	800620a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b004      	add	sp, #16
 8006210:	bdb0      	pop	{r4, r5, r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	40022000 	.word	0x40022000
 8006218:	00001388 	.word	0x00001388
 800621c:	40021000 	.word	0x40021000
 8006220:	fffff8ff 	.word	0xfffff8ff
 8006224:	ffffc7ff 	.word	0xffffc7ff
 8006228:	0800cfa4 	.word	0x0800cfa4
 800622c:	20000004 	.word	0x20000004
 8006230:	20000008 	.word	0x20000008

08006234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006234:	b5b0      	push	{r4, r5, r7, lr}
 8006236:	b08e      	sub	sp, #56	; 0x38
 8006238:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800623a:	4b4c      	ldr	r3, [pc, #304]	; (800636c <HAL_RCC_GetSysClockFreq+0x138>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006242:	230c      	movs	r3, #12
 8006244:	4013      	ands	r3, r2
 8006246:	2b0c      	cmp	r3, #12
 8006248:	d014      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0x40>
 800624a:	d900      	bls.n	800624e <HAL_RCC_GetSysClockFreq+0x1a>
 800624c:	e07b      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x112>
 800624e:	2b04      	cmp	r3, #4
 8006250:	d002      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x24>
 8006252:	2b08      	cmp	r3, #8
 8006254:	d00b      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0x3a>
 8006256:	e076      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006258:	4b44      	ldr	r3, [pc, #272]	; (800636c <HAL_RCC_GetSysClockFreq+0x138>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2210      	movs	r2, #16
 800625e:	4013      	ands	r3, r2
 8006260:	d002      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006262:	4b43      	ldr	r3, [pc, #268]	; (8006370 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006264:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006266:	e07c      	b.n	8006362 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006268:	4b42      	ldr	r3, [pc, #264]	; (8006374 <HAL_RCC_GetSysClockFreq+0x140>)
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800626c:	e079      	b.n	8006362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800626e:	4b42      	ldr	r3, [pc, #264]	; (8006378 <HAL_RCC_GetSysClockFreq+0x144>)
 8006270:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006272:	e076      	b.n	8006362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	0c9a      	lsrs	r2, r3, #18
 8006278:	230f      	movs	r3, #15
 800627a:	401a      	ands	r2, r3
 800627c:	4b3f      	ldr	r3, [pc, #252]	; (800637c <HAL_RCC_GetSysClockFreq+0x148>)
 800627e:	5c9b      	ldrb	r3, [r3, r2]
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	0d9a      	lsrs	r2, r3, #22
 8006286:	2303      	movs	r3, #3
 8006288:	4013      	ands	r3, r2
 800628a:	3301      	adds	r3, #1
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800628e:	4b37      	ldr	r3, [pc, #220]	; (800636c <HAL_RCC_GetSysClockFreq+0x138>)
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	025b      	lsls	r3, r3, #9
 8006296:	4013      	ands	r3, r2
 8006298:	d01a      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	4a35      	ldr	r2, [pc, #212]	; (8006378 <HAL_RCC_GetSysClockFreq+0x144>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	69b8      	ldr	r0, [r7, #24]
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	f7fa f91d 	bl	80004e8 <__aeabi_lmul>
 80062ae:	0002      	movs	r2, r0
 80062b0:	000b      	movs	r3, r1
 80062b2:	0010      	movs	r0, r2
 80062b4:	0019      	movs	r1, r3
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f7fa f8f1 	bl	80004a8 <__aeabi_uldivmod>
 80062c6:	0002      	movs	r2, r0
 80062c8:	000b      	movs	r3, r1
 80062ca:	0013      	movs	r3, r2
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
 80062ce:	e037      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80062d0:	4b26      	ldr	r3, [pc, #152]	; (800636c <HAL_RCC_GetSysClockFreq+0x138>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2210      	movs	r2, #16
 80062d6:	4013      	ands	r3, r2
 80062d8:	d01a      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	4a23      	ldr	r2, [pc, #140]	; (8006370 <HAL_RCC_GetSysClockFreq+0x13c>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	68b8      	ldr	r0, [r7, #8]
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	f7fa f8fd 	bl	80004e8 <__aeabi_lmul>
 80062ee:	0002      	movs	r2, r0
 80062f0:	000b      	movs	r3, r1
 80062f2:	0010      	movs	r0, r2
 80062f4:	0019      	movs	r1, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	2300      	movs	r3, #0
 80062fc:	607b      	str	r3, [r7, #4]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f7fa f8d1 	bl	80004a8 <__aeabi_uldivmod>
 8006306:	0002      	movs	r2, r0
 8006308:	000b      	movs	r3, r1
 800630a:	0013      	movs	r3, r2
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
 800630e:	e017      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	0018      	movs	r0, r3
 8006314:	2300      	movs	r3, #0
 8006316:	0019      	movs	r1, r3
 8006318:	4a16      	ldr	r2, [pc, #88]	; (8006374 <HAL_RCC_GetSysClockFreq+0x140>)
 800631a:	2300      	movs	r3, #0
 800631c:	f7fa f8e4 	bl	80004e8 <__aeabi_lmul>
 8006320:	0002      	movs	r2, r0
 8006322:	000b      	movs	r3, r1
 8006324:	0010      	movs	r0, r2
 8006326:	0019      	movs	r1, r3
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	001c      	movs	r4, r3
 800632c:	2300      	movs	r3, #0
 800632e:	001d      	movs	r5, r3
 8006330:	0022      	movs	r2, r4
 8006332:	002b      	movs	r3, r5
 8006334:	f7fa f8b8 	bl	80004a8 <__aeabi_uldivmod>
 8006338:	0002      	movs	r2, r0
 800633a:	000b      	movs	r3, r1
 800633c:	0013      	movs	r3, r2
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006344:	e00d      	b.n	8006362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006346:	4b09      	ldr	r3, [pc, #36]	; (800636c <HAL_RCC_GetSysClockFreq+0x138>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	0b5b      	lsrs	r3, r3, #13
 800634c:	2207      	movs	r2, #7
 800634e:	4013      	ands	r3, r2
 8006350:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	3301      	adds	r3, #1
 8006356:	2280      	movs	r2, #128	; 0x80
 8006358:	0212      	lsls	r2, r2, #8
 800635a:	409a      	lsls	r2, r3
 800635c:	0013      	movs	r3, r2
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006360:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b00e      	add	sp, #56	; 0x38
 800636a:	bdb0      	pop	{r4, r5, r7, pc}
 800636c:	40021000 	.word	0x40021000
 8006370:	003d0900 	.word	0x003d0900
 8006374:	00f42400 	.word	0x00f42400
 8006378:	007a1200 	.word	0x007a1200
 800637c:	0800cfbc 	.word	0x0800cfbc

08006380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006384:	4b02      	ldr	r3, [pc, #8]	; (8006390 <HAL_RCC_GetHCLKFreq+0x10>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	20000004 	.word	0x20000004

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006398:	f7ff fff2 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 800639c:	0001      	movs	r1, r0
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	2207      	movs	r2, #7
 80063a6:	4013      	ands	r3, r2
 80063a8:	4a04      	ldr	r2, [pc, #16]	; (80063bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80063aa:	5cd3      	ldrb	r3, [r2, r3]
 80063ac:	40d9      	lsrs	r1, r3
 80063ae:	000b      	movs	r3, r1
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	40021000 	.word	0x40021000
 80063bc:	0800cfb4 	.word	0x0800cfb4

080063c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063c4:	f7ff ffdc 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063c8:	0001      	movs	r1, r0
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	0adb      	lsrs	r3, r3, #11
 80063d0:	2207      	movs	r2, #7
 80063d2:	4013      	ands	r3, r2
 80063d4:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	40d9      	lsrs	r1, r3
 80063da:	000b      	movs	r3, r1
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	40021000 	.word	0x40021000
 80063e8:	0800cfb4 	.word	0x0800cfb4

080063ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80063f4:	2317      	movs	r3, #23
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2220      	movs	r2, #32
 8006402:	4013      	ands	r3, r2
 8006404:	d106      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	4013      	ands	r3, r2
 8006410:	d100      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006412:	e104      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006414:	4bb9      	ldr	r3, [pc, #740]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	055b      	lsls	r3, r3, #21
 800641c:	4013      	ands	r3, r2
 800641e:	d10a      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006420:	4bb6      	ldr	r3, [pc, #728]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006424:	4bb5      	ldr	r3, [pc, #724]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	0549      	lsls	r1, r1, #21
 800642a:	430a      	orrs	r2, r1
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800642e:	2317      	movs	r3, #23
 8006430:	18fb      	adds	r3, r7, r3
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006436:	4bb2      	ldr	r3, [pc, #712]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4013      	ands	r3, r2
 8006440:	d11a      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006442:	4baf      	ldr	r3, [pc, #700]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4bae      	ldr	r3, [pc, #696]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	0049      	lsls	r1, r1, #1
 800644c:	430a      	orrs	r2, r1
 800644e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006450:	f7fd fe52 	bl	80040f8 <HAL_GetTick>
 8006454:	0003      	movs	r3, r0
 8006456:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006458:	e008      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645a:	f7fd fe4d 	bl	80040f8 <HAL_GetTick>
 800645e:	0002      	movs	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b64      	cmp	r3, #100	; 0x64
 8006466:	d901      	bls.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e143      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646c:	4ba4      	ldr	r3, [pc, #656]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4013      	ands	r3, r2
 8006476:	d0f0      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006478:	4ba0      	ldr	r3, [pc, #640]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	23c0      	movs	r3, #192	; 0xc0
 800647e:	039b      	lsls	r3, r3, #14
 8006480:	4013      	ands	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	23c0      	movs	r3, #192	; 0xc0
 800648a:	039b      	lsls	r3, r3, #14
 800648c:	4013      	ands	r3, r2
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	23c0      	movs	r3, #192	; 0xc0
 800649a:	039b      	lsls	r3, r3, #14
 800649c:	4013      	ands	r3, r2
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d013      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	23c0      	movs	r3, #192	; 0xc0
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	401a      	ands	r2, r3
 80064ae:	23c0      	movs	r3, #192	; 0xc0
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d10a      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064b6:	4b91      	ldr	r3, [pc, #580]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	2380      	movs	r3, #128	; 0x80
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	401a      	ands	r2, r3
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d101      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e113      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80064cc:	4b8b      	ldr	r3, [pc, #556]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80064ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064d0:	23c0      	movs	r3, #192	; 0xc0
 80064d2:	029b      	lsls	r3, r3, #10
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d049      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	23c0      	movs	r3, #192	; 0xc0
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	4013      	ands	r3, r2
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2220      	movs	r2, #32
 80064f4:	4013      	ands	r3, r2
 80064f6:	d10d      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	23c0      	movs	r3, #192	; 0xc0
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	4013      	ands	r3, r2
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	429a      	cmp	r2, r3
 8006506:	d034      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2380      	movs	r3, #128	; 0x80
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4013      	ands	r3, r2
 8006512:	d02e      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006514:	4b79      	ldr	r3, [pc, #484]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	4a7a      	ldr	r2, [pc, #488]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800651a:	4013      	ands	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800651e:	4b77      	ldr	r3, [pc, #476]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006522:	4b76      	ldr	r3, [pc, #472]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006524:	2180      	movs	r1, #128	; 0x80
 8006526:	0309      	lsls	r1, r1, #12
 8006528:	430a      	orrs	r2, r1
 800652a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800652c:	4b73      	ldr	r3, [pc, #460]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800652e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006530:	4b72      	ldr	r3, [pc, #456]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006532:	4975      	ldr	r1, [pc, #468]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006534:	400a      	ands	r2, r1
 8006536:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006538:	4b70      	ldr	r3, [pc, #448]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4013      	ands	r3, r2
 8006546:	d014      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fd fdd6 	bl	80040f8 <HAL_GetTick>
 800654c:	0003      	movs	r3, r0
 800654e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006550:	e009      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fd fdd1 	bl	80040f8 <HAL_GetTick>
 8006556:	0002      	movs	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	4a6b      	ldr	r2, [pc, #428]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0c6      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006566:	4b65      	ldr	r3, [pc, #404]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4013      	ands	r3, r2
 8006570:	d0ef      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	4013      	ands	r3, r2
 800657c:	d01f      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	23c0      	movs	r3, #192	; 0xc0
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	401a      	ands	r2, r3
 8006588:	23c0      	movs	r3, #192	; 0xc0
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	429a      	cmp	r2, r3
 800658e:	d10c      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006590:	4b5a      	ldr	r3, [pc, #360]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a5e      	ldr	r2, [pc, #376]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006596:	4013      	ands	r3, r2
 8006598:	0019      	movs	r1, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	23c0      	movs	r3, #192	; 0xc0
 80065a0:	039b      	lsls	r3, r3, #14
 80065a2:	401a      	ands	r2, r3
 80065a4:	4b55      	ldr	r3, [pc, #340]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065a6:	430a      	orrs	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	4b54      	ldr	r3, [pc, #336]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	23c0      	movs	r3, #192	; 0xc0
 80065b4:	029b      	lsls	r3, r3, #10
 80065b6:	401a      	ands	r2, r3
 80065b8:	4b50      	ldr	r3, [pc, #320]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065ba:	430a      	orrs	r2, r1
 80065bc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2220      	movs	r2, #32
 80065c4:	4013      	ands	r3, r2
 80065c6:	d01f      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	23c0      	movs	r3, #192	; 0xc0
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	401a      	ands	r2, r3
 80065d2:	23c0      	movs	r3, #192	; 0xc0
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80065da:	4b48      	ldr	r3, [pc, #288]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a4c      	ldr	r2, [pc, #304]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	0019      	movs	r1, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	23c0      	movs	r3, #192	; 0xc0
 80065ea:	039b      	lsls	r3, r3, #14
 80065ec:	401a      	ands	r2, r3
 80065ee:	4b43      	ldr	r3, [pc, #268]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065f0:	430a      	orrs	r2, r1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	4b41      	ldr	r3, [pc, #260]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80065f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	23c0      	movs	r3, #192	; 0xc0
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	401a      	ands	r2, r3
 8006602:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006604:	430a      	orrs	r2, r1
 8006606:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006608:	2317      	movs	r3, #23
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d105      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006612:	4b3a      	ldr	r3, [pc, #232]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006618:	493e      	ldr	r1, [pc, #248]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800661a:	400a      	ands	r2, r1
 800661c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2201      	movs	r2, #1
 8006624:	4013      	ands	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006628:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800662a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662c:	2203      	movs	r2, #3
 800662e:	4393      	bics	r3, r2
 8006630:	0019      	movs	r1, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	4b31      	ldr	r3, [pc, #196]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006638:	430a      	orrs	r2, r1
 800663a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2202      	movs	r2, #2
 8006642:	4013      	ands	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006646:	4b2d      	ldr	r3, [pc, #180]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664a:	220c      	movs	r2, #12
 800664c:	4393      	bics	r3, r2
 800664e:	0019      	movs	r1, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	4b29      	ldr	r3, [pc, #164]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006656:	430a      	orrs	r2, r1
 8006658:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2204      	movs	r2, #4
 8006660:	4013      	ands	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006664:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006668:	4a2b      	ldr	r2, [pc, #172]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800666a:	4013      	ands	r3, r2
 800666c:	0019      	movs	r1, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006674:	430a      	orrs	r2, r1
 8006676:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	4013      	ands	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006682:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	4a25      	ldr	r2, [pc, #148]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006688:	4013      	ands	r3, r2
 800668a:	0019      	movs	r1, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006692:	430a      	orrs	r2, r1
 8006694:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4013      	ands	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	0019      	movs	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066b2:	430a      	orrs	r2, r1
 80066b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	4013      	ands	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c0:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	0019      	movs	r1, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ce:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066d0:	430a      	orrs	r2, r1
 80066d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2280      	movs	r2, #128	; 0x80
 80066da:	4013      	ands	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80066de:	4b07      	ldr	r3, [pc, #28]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	0019      	movs	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80066ee:	430a      	orrs	r2, r1
 80066f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b006      	add	sp, #24
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40021000 	.word	0x40021000
 8006700:	40007000 	.word	0x40007000
 8006704:	fffcffff 	.word	0xfffcffff
 8006708:	fff7ffff 	.word	0xfff7ffff
 800670c:	00001388 	.word	0x00001388
 8006710:	ffcfffff 	.word	0xffcfffff
 8006714:	efffffff 	.word	0xefffffff
 8006718:	fffff3ff 	.word	0xfffff3ff
 800671c:	ffffcfff 	.word	0xffffcfff
 8006720:	fbffffff 	.word	0xfbffffff
 8006724:	fff3ffff 	.word	0xfff3ffff

08006728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e032      	b.n	80067a0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2239      	movs	r2, #57	; 0x39
 800673e:	5c9b      	ldrb	r3, [r3, r2]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d107      	bne.n	8006756 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2238      	movs	r2, #56	; 0x38
 800674a:	2100      	movs	r1, #0
 800674c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	0018      	movs	r0, r3
 8006752:	f7fd fac5 	bl	8003ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2239      	movs	r2, #57	; 0x39
 800675a:	2102      	movs	r1, #2
 800675c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3304      	adds	r3, #4
 8006766:	0019      	movs	r1, r3
 8006768:	0010      	movs	r0, r2
 800676a:	f000 f995 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	223e      	movs	r2, #62	; 0x3e
 8006772:	2101      	movs	r1, #1
 8006774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	223a      	movs	r2, #58	; 0x3a
 800677a:	2101      	movs	r1, #1
 800677c:	5499      	strb	r1, [r3, r2]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	223b      	movs	r2, #59	; 0x3b
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	223c      	movs	r2, #60	; 0x3c
 800678a:	2101      	movs	r1, #1
 800678c:	5499      	strb	r1, [r3, r2]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	223d      	movs	r2, #61	; 0x3d
 8006792:	2101      	movs	r1, #1
 8006794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2239      	movs	r2, #57	; 0x39
 800679a:	2101      	movs	r1, #1
 800679c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	0018      	movs	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b002      	add	sp, #8
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <HAL_TIM_Base_Stop+0x38>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	d107      	bne.n	80067cc <HAL_TIM_Base_Stop+0x24>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2101      	movs	r1, #1
 80067c8:	438a      	bics	r2, r1
 80067ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2239      	movs	r2, #57	; 0x39
 80067d0:	2101      	movs	r1, #1
 80067d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	0018      	movs	r0, r3
 80067d8:	46bd      	mov	sp, r7
 80067da:	b002      	add	sp, #8
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	00001111 	.word	0x00001111

080067e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2239      	movs	r2, #57	; 0x39
 80067f0:	5c9b      	ldrb	r3, [r3, r2]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d001      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e03b      	b.n	8006874 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2239      	movs	r2, #57	; 0x39
 8006800:	2102      	movs	r1, #2
 8006802:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2101      	movs	r1, #1
 8006810:	430a      	orrs	r2, r1
 8006812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	2380      	movs	r3, #128	; 0x80
 800681a:	05db      	lsls	r3, r3, #23
 800681c:	429a      	cmp	r2, r3
 800681e:	d00e      	beq.n	800683e <HAL_TIM_Base_Start_IT+0x5a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a15      	ldr	r2, [pc, #84]	; (800687c <HAL_TIM_Base_Start_IT+0x98>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d009      	beq.n	800683e <HAL_TIM_Base_Start_IT+0x5a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a14      	ldr	r2, [pc, #80]	; (8006880 <HAL_TIM_Base_Start_IT+0x9c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d004      	beq.n	800683e <HAL_TIM_Base_Start_IT+0x5a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a12      	ldr	r2, [pc, #72]	; (8006884 <HAL_TIM_Base_Start_IT+0xa0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d111      	bne.n	8006862 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2207      	movs	r2, #7
 8006846:	4013      	ands	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b06      	cmp	r3, #6
 800684e:	d010      	beq.n	8006872 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2101      	movs	r1, #1
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006860:	e007      	b.n	8006872 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2101      	movs	r1, #1
 800686e:	430a      	orrs	r2, r1
 8006870:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b004      	add	sp, #16
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40000400 	.word	0x40000400
 8006880:	40010800 	.word	0x40010800
 8006884:	40011400 	.word	0x40011400

08006888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2202      	movs	r2, #2
 8006898:	4013      	ands	r3, r2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d124      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2202      	movs	r2, #2
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d11d      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2203      	movs	r2, #3
 80068b2:	4252      	negs	r2, r2
 80068b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2203      	movs	r2, #3
 80068c4:	4013      	ands	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 f8cc 	bl	8006a68 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e007      	b.n	80068e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f000 f8bf 	bl	8006a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 f8cb 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2204      	movs	r2, #4
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d125      	bne.n	8006942 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2204      	movs	r2, #4
 80068fe:	4013      	ands	r3, r2
 8006900:	2b04      	cmp	r3, #4
 8006902:	d11e      	bne.n	8006942 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2205      	movs	r2, #5
 800690a:	4252      	negs	r2, r2
 800690c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	23c0      	movs	r3, #192	; 0xc0
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4013      	ands	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0018      	movs	r0, r3
 8006926:	f000 f89f 	bl	8006a68 <HAL_TIM_IC_CaptureCallback>
 800692a:	e007      	b.n	800693c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f892 	bl	8006a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 f89e 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2208      	movs	r2, #8
 800694a:	4013      	ands	r3, r2
 800694c:	2b08      	cmp	r3, #8
 800694e:	d124      	bne.n	800699a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2208      	movs	r2, #8
 8006958:	4013      	ands	r3, r2
 800695a:	2b08      	cmp	r3, #8
 800695c:	d11d      	bne.n	800699a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2209      	movs	r2, #9
 8006964:	4252      	negs	r2, r2
 8006966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2204      	movs	r2, #4
 800696c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	2203      	movs	r2, #3
 8006976:	4013      	ands	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	f000 f873 	bl	8006a68 <HAL_TIM_IC_CaptureCallback>
 8006982:	e007      	b.n	8006994 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0018      	movs	r0, r3
 8006988:	f000 f866 	bl	8006a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	0018      	movs	r0, r3
 8006990:	f000 f872 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2210      	movs	r2, #16
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d125      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2210      	movs	r2, #16
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d11e      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2211      	movs	r2, #17
 80069bc:	4252      	negs	r2, r2
 80069be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2208      	movs	r2, #8
 80069c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	23c0      	movs	r3, #192	; 0xc0
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4013      	ands	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 f846 	bl	8006a68 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e007      	b.n	80069ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 f839 	bl	8006a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 f845 	bl	8006a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2201      	movs	r2, #1
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10f      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d108      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2202      	movs	r2, #2
 8006a16:	4252      	negs	r2, r2
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7fc fafd 	bl	800301c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2240      	movs	r2, #64	; 0x40
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d10f      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d108      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2241      	movs	r2, #65	; 0x41
 8006a44:	4252      	negs	r2, r2
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 f81c 	bl	8006a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b002      	add	sp, #8
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b002      	add	sp, #8
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a70:	46c0      	nop			; (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b002      	add	sp, #8
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b002      	add	sp, #8
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	2380      	movs	r3, #128	; 0x80
 8006aac:	05db      	lsls	r3, r3, #23
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d00b      	beq.n	8006aca <TIM_Base_SetConfig+0x32>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a23      	ldr	r2, [pc, #140]	; (8006b44 <TIM_Base_SetConfig+0xac>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d007      	beq.n	8006aca <TIM_Base_SetConfig+0x32>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <TIM_Base_SetConfig+0xb0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <TIM_Base_SetConfig+0x32>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a21      	ldr	r2, [pc, #132]	; (8006b4c <TIM_Base_SetConfig+0xb4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d108      	bne.n	8006adc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2270      	movs	r2, #112	; 0x70
 8006ace:	4393      	bics	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	2380      	movs	r3, #128	; 0x80
 8006ae0:	05db      	lsls	r3, r3, #23
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d00b      	beq.n	8006afe <TIM_Base_SetConfig+0x66>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <TIM_Base_SetConfig+0xac>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_Base_SetConfig+0x66>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <TIM_Base_SetConfig+0xb0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_Base_SetConfig+0x66>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <TIM_Base_SetConfig+0xb4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d108      	bne.n	8006b10 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <TIM_Base_SetConfig+0xb8>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2280      	movs	r2, #128	; 0x80
 8006b14:	4393      	bics	r3, r2
 8006b16:	001a      	movs	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	615a      	str	r2, [r3, #20]
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b004      	add	sp, #16
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40010800 	.word	0x40010800
 8006b4c:	40011400 	.word	0x40011400
 8006b50:	fffffcff 	.word	0xfffffcff

08006b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2238      	movs	r2, #56	; 0x38
 8006b62:	5c9b      	ldrb	r3, [r3, r2]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e047      	b.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2238      	movs	r2, #56	; 0x38
 8006b70:	2101      	movs	r1, #1
 8006b72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2239      	movs	r2, #57	; 0x39
 8006b78:	2102      	movs	r1, #2
 8006b7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2270      	movs	r2, #112	; 0x70
 8006b90:	4393      	bics	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	05db      	lsls	r3, r3, #23
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a11      	ldr	r2, [pc, #68]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a10      	ldr	r2, [pc, #64]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10c      	bne.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2280      	movs	r2, #128	; 0x80
 8006bd4:	4393      	bics	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2239      	movs	r2, #57	; 0x39
 8006bee:	2101      	movs	r1, #1
 8006bf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2238      	movs	r2, #56	; 0x38
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b004      	add	sp, #16
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40010800 	.word	0x40010800
 8006c0c:	40011400 	.word	0x40011400

08006c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e044      	b.n	8006cac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2278      	movs	r2, #120	; 0x78
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7fd f889 	bl	8003d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2224      	movs	r2, #36	; 0x24
 8006c3e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	438a      	bics	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f000 f9b6 	bl	8006fc4 <UART_SetConfig>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e024      	b.n	8006cac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f000 fc47 	bl	8007500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	490d      	ldr	r1, [pc, #52]	; (8006cb4 <HAL_UART_Init+0xa4>)
 8006c7e:	400a      	ands	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	212a      	movs	r1, #42	; 0x2a
 8006c8e:	438a      	bics	r2, r1
 8006c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f000 fcdf 	bl	8007668 <UART_CheckIdleState>
 8006caa:	0003      	movs	r3, r0
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	ffffb7ff 	.word	0xffffb7ff

08006cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	1dbb      	adds	r3, r7, #6
 8006cc6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d000      	beq.n	8006cd2 <HAL_UART_Transmit+0x1a>
 8006cd0:	e08c      	b.n	8006dec <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_UART_Transmit+0x28>
 8006cd8:	1dbb      	adds	r3, r7, #6
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e084      	b.n	8006dee <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	015b      	lsls	r3, r3, #5
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d109      	bne.n	8006d04 <HAL_UART_Transmit+0x4c>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d001      	beq.n	8006d04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e074      	b.n	8006dee <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2284      	movs	r2, #132	; 0x84
 8006d08:	2100      	movs	r1, #0
 8006d0a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2221      	movs	r2, #33	; 0x21
 8006d10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d12:	f7fd f9f1 	bl	80040f8 <HAL_GetTick>
 8006d16:	0003      	movs	r3, r0
 8006d18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1dba      	adds	r2, r7, #6
 8006d1e:	2150      	movs	r1, #80	; 0x50
 8006d20:	8812      	ldrh	r2, [r2, #0]
 8006d22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	1dba      	adds	r2, r7, #6
 8006d28:	2152      	movs	r1, #82	; 0x52
 8006d2a:	8812      	ldrh	r2, [r2, #0]
 8006d2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	2380      	movs	r3, #128	; 0x80
 8006d34:	015b      	lsls	r3, r3, #5
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d108      	bne.n	8006d4c <HAL_UART_Transmit+0x94>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d104      	bne.n	8006d4c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e003      	b.n	8006d54 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d54:	e02f      	b.n	8006db6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	0013      	movs	r3, r2
 8006d60:	2200      	movs	r2, #0
 8006d62:	2180      	movs	r1, #128	; 0x80
 8006d64:	f000 fd28 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 8006d68:	1e03      	subs	r3, r0, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e03b      	b.n	8006dee <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	001a      	movs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	05d2      	lsls	r2, r2, #23
 8006d88:	0dd2      	lsrs	r2, r2, #23
 8006d8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	3302      	adds	r3, #2
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e007      	b.n	8006da4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	781a      	ldrb	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3301      	adds	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2252      	movs	r2, #82	; 0x52
 8006da8:	5a9b      	ldrh	r3, [r3, r2]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b299      	uxth	r1, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2252      	movs	r2, #82	; 0x52
 8006db4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2252      	movs	r2, #82	; 0x52
 8006dba:	5a9b      	ldrh	r3, [r3, r2]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1c9      	bne.n	8006d56 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	0013      	movs	r3, r2
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2140      	movs	r1, #64	; 0x40
 8006dd0:	f000 fcf2 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 8006dd4:	1e03      	subs	r3, r0, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e005      	b.n	8006dee <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	0018      	movs	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b008      	add	sp, #32
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	1dbb      	adds	r3, r7, #6
 8006e06:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2280      	movs	r2, #128	; 0x80
 8006e0c:	589b      	ldr	r3, [r3, r2]
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d000      	beq.n	8006e14 <HAL_UART_Receive+0x1c>
 8006e12:	e0d0      	b.n	8006fb6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_UART_Receive+0x2a>
 8006e1a:	1dbb      	adds	r3, r7, #6
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0c8      	b.n	8006fb8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	015b      	lsls	r3, r3, #5
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d109      	bne.n	8006e46 <HAL_UART_Receive+0x4e>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	4013      	ands	r3, r2
 8006e40:	d001      	beq.n	8006e46 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e0b8      	b.n	8006fb8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2284      	movs	r2, #132	; 0x84
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2280      	movs	r2, #128	; 0x80
 8006e52:	2122      	movs	r1, #34	; 0x22
 8006e54:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e5c:	f7fd f94c 	bl	80040f8 <HAL_GetTick>
 8006e60:	0003      	movs	r3, r0
 8006e62:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1dba      	adds	r2, r7, #6
 8006e68:	2158      	movs	r1, #88	; 0x58
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1dba      	adds	r2, r7, #6
 8006e72:	215a      	movs	r1, #90	; 0x5a
 8006e74:	8812      	ldrh	r2, [r2, #0]
 8006e76:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	015b      	lsls	r3, r3, #5
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d10d      	bne.n	8006ea0 <HAL_UART_Receive+0xa8>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <HAL_UART_Receive+0x9e>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	225c      	movs	r2, #92	; 0x5c
 8006e90:	494b      	ldr	r1, [pc, #300]	; (8006fc0 <HAL_UART_Receive+0x1c8>)
 8006e92:	5299      	strh	r1, [r3, r2]
 8006e94:	e02e      	b.n	8006ef4 <HAL_UART_Receive+0xfc>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	225c      	movs	r2, #92	; 0x5c
 8006e9a:	21ff      	movs	r1, #255	; 0xff
 8006e9c:	5299      	strh	r1, [r3, r2]
 8006e9e:	e029      	b.n	8006ef4 <HAL_UART_Receive+0xfc>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_UART_Receive+0xcc>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <HAL_UART_Receive+0xc2>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	225c      	movs	r2, #92	; 0x5c
 8006eb4:	21ff      	movs	r1, #255	; 0xff
 8006eb6:	5299      	strh	r1, [r3, r2]
 8006eb8:	e01c      	b.n	8006ef4 <HAL_UART_Receive+0xfc>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	225c      	movs	r2, #92	; 0x5c
 8006ebe:	217f      	movs	r1, #127	; 0x7f
 8006ec0:	5299      	strh	r1, [r3, r2]
 8006ec2:	e017      	b.n	8006ef4 <HAL_UART_Receive+0xfc>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	055b      	lsls	r3, r3, #21
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d10d      	bne.n	8006eec <HAL_UART_Receive+0xf4>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <HAL_UART_Receive+0xea>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	225c      	movs	r2, #92	; 0x5c
 8006edc:	217f      	movs	r1, #127	; 0x7f
 8006ede:	5299      	strh	r1, [r3, r2]
 8006ee0:	e008      	b.n	8006ef4 <HAL_UART_Receive+0xfc>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	225c      	movs	r2, #92	; 0x5c
 8006ee6:	213f      	movs	r1, #63	; 0x3f
 8006ee8:	5299      	strh	r1, [r3, r2]
 8006eea:	e003      	b.n	8006ef4 <HAL_UART_Receive+0xfc>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	225c      	movs	r2, #92	; 0x5c
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006ef4:	2312      	movs	r3, #18
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	215c      	movs	r1, #92	; 0x5c
 8006efc:	5a52      	ldrh	r2, [r2, r1]
 8006efe:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	2380      	movs	r3, #128	; 0x80
 8006f06:	015b      	lsls	r3, r3, #5
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d108      	bne.n	8006f1e <HAL_UART_Receive+0x126>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e003      	b.n	8006f26 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f26:	e03a      	b.n	8006f9e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	0013      	movs	r3, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	2120      	movs	r1, #32
 8006f36:	f000 fc3f 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d005      	beq.n	8006f4a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	2120      	movs	r1, #32
 8006f44:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e036      	b.n	8006fb8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10e      	bne.n	8006f6e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2212      	movs	r2, #18
 8006f5a:	18ba      	adds	r2, r7, r2
 8006f5c:	8812      	ldrh	r2, [r2, #0]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3302      	adds	r3, #2
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e00e      	b.n	8006f8c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2212      	movs	r2, #18
 8006f78:	18ba      	adds	r2, r7, r2
 8006f7a:	8812      	ldrh	r2, [r2, #0]
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	4013      	ands	r3, r2
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	225a      	movs	r2, #90	; 0x5a
 8006f90:	5a9b      	ldrh	r3, [r3, r2]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b299      	uxth	r1, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	225a      	movs	r2, #90	; 0x5a
 8006f9c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	225a      	movs	r2, #90	; 0x5a
 8006fa2:	5a9b      	ldrh	r3, [r3, r2]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1be      	bne.n	8006f28 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2280      	movs	r2, #128	; 0x80
 8006fae:	2120      	movs	r1, #32
 8006fb0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b008      	add	sp, #32
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	000001ff 	.word	0x000001ff

08006fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	b5b0      	push	{r4, r5, r7, lr}
 8006fc6:	b08e      	sub	sp, #56	; 0x38
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fcc:	231a      	movs	r3, #26
 8006fce:	2218      	movs	r2, #24
 8006fd0:	189b      	adds	r3, r3, r2
 8006fd2:	19db      	adds	r3, r3, r7
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4ac3      	ldr	r2, [pc, #780]	; (8007304 <UART_SetConfig+0x340>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007002:	430a      	orrs	r2, r1
 8007004:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4abe      	ldr	r2, [pc, #760]	; (8007308 <UART_SetConfig+0x344>)
 800700e:	4013      	ands	r3, r2
 8007010:	0019      	movs	r1, r3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4ab8      	ldr	r2, [pc, #736]	; (800730c <UART_SetConfig+0x348>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007034:	4313      	orrs	r3, r2
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	4ab4      	ldr	r2, [pc, #720]	; (8007310 <UART_SetConfig+0x34c>)
 8007040:	4013      	ands	r3, r2
 8007042:	0019      	movs	r1, r3
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800704a:	430a      	orrs	r2, r1
 800704c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4ab0      	ldr	r2, [pc, #704]	; (8007314 <UART_SetConfig+0x350>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d131      	bne.n	80070bc <UART_SetConfig+0xf8>
 8007058:	4baf      	ldr	r3, [pc, #700]	; (8007318 <UART_SetConfig+0x354>)
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705c:	2203      	movs	r2, #3
 800705e:	4013      	ands	r3, r2
 8007060:	2b03      	cmp	r3, #3
 8007062:	d01d      	beq.n	80070a0 <UART_SetConfig+0xdc>
 8007064:	d823      	bhi.n	80070ae <UART_SetConfig+0xea>
 8007066:	2b02      	cmp	r3, #2
 8007068:	d00c      	beq.n	8007084 <UART_SetConfig+0xc0>
 800706a:	d820      	bhi.n	80070ae <UART_SetConfig+0xea>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <UART_SetConfig+0xb2>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d00e      	beq.n	8007092 <UART_SetConfig+0xce>
 8007074:	e01b      	b.n	80070ae <UART_SetConfig+0xea>
 8007076:	231b      	movs	r3, #27
 8007078:	2218      	movs	r2, #24
 800707a:	189b      	adds	r3, r3, r2
 800707c:	19db      	adds	r3, r3, r7
 800707e:	2201      	movs	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e0b4      	b.n	80071ee <UART_SetConfig+0x22a>
 8007084:	231b      	movs	r3, #27
 8007086:	2218      	movs	r2, #24
 8007088:	189b      	adds	r3, r3, r2
 800708a:	19db      	adds	r3, r3, r7
 800708c:	2202      	movs	r2, #2
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e0ad      	b.n	80071ee <UART_SetConfig+0x22a>
 8007092:	231b      	movs	r3, #27
 8007094:	2218      	movs	r2, #24
 8007096:	189b      	adds	r3, r3, r2
 8007098:	19db      	adds	r3, r3, r7
 800709a:	2204      	movs	r2, #4
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e0a6      	b.n	80071ee <UART_SetConfig+0x22a>
 80070a0:	231b      	movs	r3, #27
 80070a2:	2218      	movs	r2, #24
 80070a4:	189b      	adds	r3, r3, r2
 80070a6:	19db      	adds	r3, r3, r7
 80070a8:	2208      	movs	r2, #8
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	e09f      	b.n	80071ee <UART_SetConfig+0x22a>
 80070ae:	231b      	movs	r3, #27
 80070b0:	2218      	movs	r2, #24
 80070b2:	189b      	adds	r3, r3, r2
 80070b4:	19db      	adds	r3, r3, r7
 80070b6:	2210      	movs	r2, #16
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e098      	b.n	80071ee <UART_SetConfig+0x22a>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a96      	ldr	r2, [pc, #600]	; (800731c <UART_SetConfig+0x358>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d131      	bne.n	800712a <UART_SetConfig+0x166>
 80070c6:	4b94      	ldr	r3, [pc, #592]	; (8007318 <UART_SetConfig+0x354>)
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	220c      	movs	r2, #12
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b0c      	cmp	r3, #12
 80070d0:	d01d      	beq.n	800710e <UART_SetConfig+0x14a>
 80070d2:	d823      	bhi.n	800711c <UART_SetConfig+0x158>
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d00c      	beq.n	80070f2 <UART_SetConfig+0x12e>
 80070d8:	d820      	bhi.n	800711c <UART_SetConfig+0x158>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <UART_SetConfig+0x120>
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d00e      	beq.n	8007100 <UART_SetConfig+0x13c>
 80070e2:	e01b      	b.n	800711c <UART_SetConfig+0x158>
 80070e4:	231b      	movs	r3, #27
 80070e6:	2218      	movs	r2, #24
 80070e8:	189b      	adds	r3, r3, r2
 80070ea:	19db      	adds	r3, r3, r7
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	e07d      	b.n	80071ee <UART_SetConfig+0x22a>
 80070f2:	231b      	movs	r3, #27
 80070f4:	2218      	movs	r2, #24
 80070f6:	189b      	adds	r3, r3, r2
 80070f8:	19db      	adds	r3, r3, r7
 80070fa:	2202      	movs	r2, #2
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e076      	b.n	80071ee <UART_SetConfig+0x22a>
 8007100:	231b      	movs	r3, #27
 8007102:	2218      	movs	r2, #24
 8007104:	189b      	adds	r3, r3, r2
 8007106:	19db      	adds	r3, r3, r7
 8007108:	2204      	movs	r2, #4
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e06f      	b.n	80071ee <UART_SetConfig+0x22a>
 800710e:	231b      	movs	r3, #27
 8007110:	2218      	movs	r2, #24
 8007112:	189b      	adds	r3, r3, r2
 8007114:	19db      	adds	r3, r3, r7
 8007116:	2208      	movs	r2, #8
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e068      	b.n	80071ee <UART_SetConfig+0x22a>
 800711c:	231b      	movs	r3, #27
 800711e:	2218      	movs	r2, #24
 8007120:	189b      	adds	r3, r3, r2
 8007122:	19db      	adds	r3, r3, r7
 8007124:	2210      	movs	r2, #16
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e061      	b.n	80071ee <UART_SetConfig+0x22a>
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a7c      	ldr	r2, [pc, #496]	; (8007320 <UART_SetConfig+0x35c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d106      	bne.n	8007142 <UART_SetConfig+0x17e>
 8007134:	231b      	movs	r3, #27
 8007136:	2218      	movs	r2, #24
 8007138:	189b      	adds	r3, r3, r2
 800713a:	19db      	adds	r3, r3, r7
 800713c:	2200      	movs	r2, #0
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e055      	b.n	80071ee <UART_SetConfig+0x22a>
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a77      	ldr	r2, [pc, #476]	; (8007324 <UART_SetConfig+0x360>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d106      	bne.n	800715a <UART_SetConfig+0x196>
 800714c:	231b      	movs	r3, #27
 800714e:	2218      	movs	r2, #24
 8007150:	189b      	adds	r3, r3, r2
 8007152:	19db      	adds	r3, r3, r7
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	e049      	b.n	80071ee <UART_SetConfig+0x22a>
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a6b      	ldr	r2, [pc, #428]	; (800730c <UART_SetConfig+0x348>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d13e      	bne.n	80071e2 <UART_SetConfig+0x21e>
 8007164:	4b6c      	ldr	r3, [pc, #432]	; (8007318 <UART_SetConfig+0x354>)
 8007166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007168:	23c0      	movs	r3, #192	; 0xc0
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4013      	ands	r3, r2
 800716e:	22c0      	movs	r2, #192	; 0xc0
 8007170:	0112      	lsls	r2, r2, #4
 8007172:	4293      	cmp	r3, r2
 8007174:	d027      	beq.n	80071c6 <UART_SetConfig+0x202>
 8007176:	22c0      	movs	r2, #192	; 0xc0
 8007178:	0112      	lsls	r2, r2, #4
 800717a:	4293      	cmp	r3, r2
 800717c:	d82a      	bhi.n	80071d4 <UART_SetConfig+0x210>
 800717e:	2280      	movs	r2, #128	; 0x80
 8007180:	0112      	lsls	r2, r2, #4
 8007182:	4293      	cmp	r3, r2
 8007184:	d011      	beq.n	80071aa <UART_SetConfig+0x1e6>
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	0112      	lsls	r2, r2, #4
 800718a:	4293      	cmp	r3, r2
 800718c:	d822      	bhi.n	80071d4 <UART_SetConfig+0x210>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <UART_SetConfig+0x1d8>
 8007192:	2280      	movs	r2, #128	; 0x80
 8007194:	00d2      	lsls	r2, r2, #3
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <UART_SetConfig+0x1f4>
 800719a:	e01b      	b.n	80071d4 <UART_SetConfig+0x210>
 800719c:	231b      	movs	r3, #27
 800719e:	2218      	movs	r2, #24
 80071a0:	189b      	adds	r3, r3, r2
 80071a2:	19db      	adds	r3, r3, r7
 80071a4:	2200      	movs	r2, #0
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e021      	b.n	80071ee <UART_SetConfig+0x22a>
 80071aa:	231b      	movs	r3, #27
 80071ac:	2218      	movs	r2, #24
 80071ae:	189b      	adds	r3, r3, r2
 80071b0:	19db      	adds	r3, r3, r7
 80071b2:	2202      	movs	r2, #2
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e01a      	b.n	80071ee <UART_SetConfig+0x22a>
 80071b8:	231b      	movs	r3, #27
 80071ba:	2218      	movs	r2, #24
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	19db      	adds	r3, r3, r7
 80071c0:	2204      	movs	r2, #4
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e013      	b.n	80071ee <UART_SetConfig+0x22a>
 80071c6:	231b      	movs	r3, #27
 80071c8:	2218      	movs	r2, #24
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	19db      	adds	r3, r3, r7
 80071ce:	2208      	movs	r2, #8
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e00c      	b.n	80071ee <UART_SetConfig+0x22a>
 80071d4:	231b      	movs	r3, #27
 80071d6:	2218      	movs	r2, #24
 80071d8:	189b      	adds	r3, r3, r2
 80071da:	19db      	adds	r3, r3, r7
 80071dc:	2210      	movs	r2, #16
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e005      	b.n	80071ee <UART_SetConfig+0x22a>
 80071e2:	231b      	movs	r3, #27
 80071e4:	2218      	movs	r2, #24
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	19db      	adds	r3, r3, r7
 80071ea:	2210      	movs	r2, #16
 80071ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a46      	ldr	r2, [pc, #280]	; (800730c <UART_SetConfig+0x348>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d000      	beq.n	80071fa <UART_SetConfig+0x236>
 80071f8:	e09a      	b.n	8007330 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071fa:	231b      	movs	r3, #27
 80071fc:	2218      	movs	r2, #24
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	19db      	adds	r3, r3, r7
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b08      	cmp	r3, #8
 8007206:	d01d      	beq.n	8007244 <UART_SetConfig+0x280>
 8007208:	dc20      	bgt.n	800724c <UART_SetConfig+0x288>
 800720a:	2b04      	cmp	r3, #4
 800720c:	d015      	beq.n	800723a <UART_SetConfig+0x276>
 800720e:	dc1d      	bgt.n	800724c <UART_SetConfig+0x288>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <UART_SetConfig+0x256>
 8007214:	2b02      	cmp	r3, #2
 8007216:	d005      	beq.n	8007224 <UART_SetConfig+0x260>
 8007218:	e018      	b.n	800724c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800721a:	f7ff f8bb 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800721e:	0003      	movs	r3, r0
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007222:	e01c      	b.n	800725e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007224:	4b3c      	ldr	r3, [pc, #240]	; (8007318 <UART_SetConfig+0x354>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2210      	movs	r2, #16
 800722a:	4013      	ands	r3, r2
 800722c:	d002      	beq.n	8007234 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800722e:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <UART_SetConfig+0x364>)
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007232:	e014      	b.n	800725e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007234:	4b3d      	ldr	r3, [pc, #244]	; (800732c <UART_SetConfig+0x368>)
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007238:	e011      	b.n	800725e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723a:	f7fe fffb 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 800723e:	0003      	movs	r3, r0
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007242:	e00c      	b.n	800725e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800724a:	e008      	b.n	800725e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007250:	231a      	movs	r3, #26
 8007252:	2218      	movs	r2, #24
 8007254:	189b      	adds	r3, r3, r2
 8007256:	19db      	adds	r3, r3, r7
 8007258:	2201      	movs	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]
        break;
 800725c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d100      	bne.n	8007266 <UART_SetConfig+0x2a2>
 8007264:	e133      	b.n	80074ce <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	0013      	movs	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	189b      	adds	r3, r3, r2
 8007270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007272:	429a      	cmp	r2, r3
 8007274:	d305      	bcc.n	8007282 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800727c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727e:	429a      	cmp	r2, r3
 8007280:	d906      	bls.n	8007290 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007282:	231a      	movs	r3, #26
 8007284:	2218      	movs	r2, #24
 8007286:	189b      	adds	r3, r3, r2
 8007288:	19db      	adds	r3, r3, r7
 800728a:	2201      	movs	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e11e      	b.n	80074ce <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	6939      	ldr	r1, [r7, #16]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	000b      	movs	r3, r1
 800729e:	0e1b      	lsrs	r3, r3, #24
 80072a0:	0010      	movs	r0, r2
 80072a2:	0205      	lsls	r5, r0, #8
 80072a4:	431d      	orrs	r5, r3
 80072a6:	000b      	movs	r3, r1
 80072a8:	021c      	lsls	r4, r3, #8
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	1900      	adds	r0, r0, r4
 80072bc:	4169      	adcs	r1, r5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	2300      	movs	r3, #0
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f7f9 f8ec 	bl	80004a8 <__aeabi_uldivmod>
 80072d0:	0002      	movs	r2, r0
 80072d2:	000b      	movs	r3, r1
 80072d4:	0013      	movs	r3, r2
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072da:	23c0      	movs	r3, #192	; 0xc0
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	429a      	cmp	r2, r3
 80072e0:	d309      	bcc.n	80072f6 <UART_SetConfig+0x332>
 80072e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	035b      	lsls	r3, r3, #13
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d204      	bcs.n	80072f6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	e0eb      	b.n	80074ce <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80072f6:	231a      	movs	r3, #26
 80072f8:	2218      	movs	r2, #24
 80072fa:	189b      	adds	r3, r3, r2
 80072fc:	19db      	adds	r3, r3, r7
 80072fe:	2201      	movs	r2, #1
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e0e4      	b.n	80074ce <UART_SetConfig+0x50a>
 8007304:	efff69f3 	.word	0xefff69f3
 8007308:	ffffcfff 	.word	0xffffcfff
 800730c:	40004800 	.word	0x40004800
 8007310:	fffff4ff 	.word	0xfffff4ff
 8007314:	40013800 	.word	0x40013800
 8007318:	40021000 	.word	0x40021000
 800731c:	40004400 	.word	0x40004400
 8007320:	40004c00 	.word	0x40004c00
 8007324:	40005000 	.word	0x40005000
 8007328:	003d0900 	.word	0x003d0900
 800732c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	2380      	movs	r3, #128	; 0x80
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	429a      	cmp	r2, r3
 800733a:	d000      	beq.n	800733e <UART_SetConfig+0x37a>
 800733c:	e070      	b.n	8007420 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800733e:	231b      	movs	r3, #27
 8007340:	2218      	movs	r2, #24
 8007342:	189b      	adds	r3, r3, r2
 8007344:	19db      	adds	r3, r3, r7
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d822      	bhi.n	8007392 <UART_SetConfig+0x3ce>
 800734c:	009a      	lsls	r2, r3, #2
 800734e:	4b67      	ldr	r3, [pc, #412]	; (80074ec <UART_SetConfig+0x528>)
 8007350:	18d3      	adds	r3, r2, r3
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007356:	f7ff f81d 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800735a:	0003      	movs	r3, r0
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800735e:	e021      	b.n	80073a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7ff f82e 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8007364:	0003      	movs	r3, r0
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007368:	e01c      	b.n	80073a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800736a:	4b61      	ldr	r3, [pc, #388]	; (80074f0 <UART_SetConfig+0x52c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2210      	movs	r2, #16
 8007370:	4013      	ands	r3, r2
 8007372:	d002      	beq.n	800737a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007374:	4b5f      	ldr	r3, [pc, #380]	; (80074f4 <UART_SetConfig+0x530>)
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007378:	e014      	b.n	80073a4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800737a:	4b5f      	ldr	r3, [pc, #380]	; (80074f8 <UART_SetConfig+0x534>)
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800737e:	e011      	b.n	80073a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007380:	f7fe ff58 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 8007384:	0003      	movs	r3, r0
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007388:	e00c      	b.n	80073a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738a:	2380      	movs	r3, #128	; 0x80
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007390:	e008      	b.n	80073a4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007396:	231a      	movs	r3, #26
 8007398:	2218      	movs	r2, #24
 800739a:	189b      	adds	r3, r3, r2
 800739c:	19db      	adds	r3, r3, r7
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
        break;
 80073a2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d100      	bne.n	80073ac <UART_SetConfig+0x3e8>
 80073aa:	e090      	b.n	80074ce <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	005a      	lsls	r2, r3, #1
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	18d2      	adds	r2, r2, r3
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	0019      	movs	r1, r3
 80073be:	0010      	movs	r0, r2
 80073c0:	f7f8 febe 	bl	8000140 <__udivsi3>
 80073c4:	0003      	movs	r3, r0
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	2b0f      	cmp	r3, #15
 80073cc:	d921      	bls.n	8007412 <UART_SetConfig+0x44e>
 80073ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d21c      	bcs.n	8007412 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	b29a      	uxth	r2, r3
 80073dc:	200e      	movs	r0, #14
 80073de:	2418      	movs	r4, #24
 80073e0:	1903      	adds	r3, r0, r4
 80073e2:	19db      	adds	r3, r3, r7
 80073e4:	210f      	movs	r1, #15
 80073e6:	438a      	bics	r2, r1
 80073e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2207      	movs	r2, #7
 80073f2:	4013      	ands	r3, r2
 80073f4:	b299      	uxth	r1, r3
 80073f6:	1903      	adds	r3, r0, r4
 80073f8:	19db      	adds	r3, r3, r7
 80073fa:	1902      	adds	r2, r0, r4
 80073fc:	19d2      	adds	r2, r2, r7
 80073fe:	8812      	ldrh	r2, [r2, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	1902      	adds	r2, r0, r4
 800740a:	19d2      	adds	r2, r2, r7
 800740c:	8812      	ldrh	r2, [r2, #0]
 800740e:	60da      	str	r2, [r3, #12]
 8007410:	e05d      	b.n	80074ce <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007412:	231a      	movs	r3, #26
 8007414:	2218      	movs	r2, #24
 8007416:	189b      	adds	r3, r3, r2
 8007418:	19db      	adds	r3, r3, r7
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e056      	b.n	80074ce <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007420:	231b      	movs	r3, #27
 8007422:	2218      	movs	r2, #24
 8007424:	189b      	adds	r3, r3, r2
 8007426:	19db      	adds	r3, r3, r7
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d822      	bhi.n	8007474 <UART_SetConfig+0x4b0>
 800742e:	009a      	lsls	r2, r3, #2
 8007430:	4b32      	ldr	r3, [pc, #200]	; (80074fc <UART_SetConfig+0x538>)
 8007432:	18d3      	adds	r3, r2, r3
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007438:	f7fe ffac 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800743c:	0003      	movs	r3, r0
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007440:	e021      	b.n	8007486 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007442:	f7fe ffbd 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8007446:	0003      	movs	r3, r0
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800744a:	e01c      	b.n	8007486 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800744c:	4b28      	ldr	r3, [pc, #160]	; (80074f0 <UART_SetConfig+0x52c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2210      	movs	r2, #16
 8007452:	4013      	ands	r3, r2
 8007454:	d002      	beq.n	800745c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007456:	4b27      	ldr	r3, [pc, #156]	; (80074f4 <UART_SetConfig+0x530>)
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800745a:	e014      	b.n	8007486 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800745c:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <UART_SetConfig+0x534>)
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007460:	e011      	b.n	8007486 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007462:	f7fe fee7 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 8007466:	0003      	movs	r3, r0
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800746a:	e00c      	b.n	8007486 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007472:	e008      	b.n	8007486 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007478:	231a      	movs	r3, #26
 800747a:	2218      	movs	r2, #24
 800747c:	189b      	adds	r3, r3, r2
 800747e:	19db      	adds	r3, r3, r7
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
        break;
 8007484:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d020      	beq.n	80074ce <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	085a      	lsrs	r2, r3, #1
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	18d2      	adds	r2, r2, r3
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	0019      	movs	r1, r3
 800749c:	0010      	movs	r0, r2
 800749e:	f7f8 fe4f 	bl	8000140 <__udivsi3>
 80074a2:	0003      	movs	r3, r0
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	d90a      	bls.n	80074c2 <UART_SetConfig+0x4fe>
 80074ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	025b      	lsls	r3, r3, #9
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d205      	bcs.n	80074c2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e005      	b.n	80074ce <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80074c2:	231a      	movs	r3, #26
 80074c4:	2218      	movs	r2, #24
 80074c6:	189b      	adds	r3, r3, r2
 80074c8:	19db      	adds	r3, r3, r7
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2200      	movs	r2, #0
 80074d2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2200      	movs	r2, #0
 80074d8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074da:	231a      	movs	r3, #26
 80074dc:	2218      	movs	r2, #24
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	19db      	adds	r3, r3, r7
 80074e2:	781b      	ldrb	r3, [r3, #0]
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b00e      	add	sp, #56	; 0x38
 80074ea:	bdb0      	pop	{r4, r5, r7, pc}
 80074ec:	0800cfc8 	.word	0x0800cfc8
 80074f0:	40021000 	.word	0x40021000
 80074f4:	003d0900 	.word	0x003d0900
 80074f8:	00f42400 	.word	0x00f42400
 80074fc:	0800cfec 	.word	0x0800cfec

08007500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2201      	movs	r2, #1
 800750e:	4013      	ands	r3, r2
 8007510:	d00b      	beq.n	800752a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4a4a      	ldr	r2, [pc, #296]	; (8007644 <UART_AdvFeatureConfig+0x144>)
 800751a:	4013      	ands	r3, r2
 800751c:	0019      	movs	r1, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	2202      	movs	r2, #2
 8007530:	4013      	ands	r3, r2
 8007532:	d00b      	beq.n	800754c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4a43      	ldr	r2, [pc, #268]	; (8007648 <UART_AdvFeatureConfig+0x148>)
 800753c:	4013      	ands	r3, r2
 800753e:	0019      	movs	r1, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2204      	movs	r2, #4
 8007552:	4013      	ands	r3, r2
 8007554:	d00b      	beq.n	800756e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4a3b      	ldr	r2, [pc, #236]	; (800764c <UART_AdvFeatureConfig+0x14c>)
 800755e:	4013      	ands	r3, r2
 8007560:	0019      	movs	r1, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2208      	movs	r2, #8
 8007574:	4013      	ands	r3, r2
 8007576:	d00b      	beq.n	8007590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4a34      	ldr	r2, [pc, #208]	; (8007650 <UART_AdvFeatureConfig+0x150>)
 8007580:	4013      	ands	r3, r2
 8007582:	0019      	movs	r1, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2210      	movs	r2, #16
 8007596:	4013      	ands	r3, r2
 8007598:	d00b      	beq.n	80075b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	4a2c      	ldr	r2, [pc, #176]	; (8007654 <UART_AdvFeatureConfig+0x154>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	0019      	movs	r1, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2220      	movs	r2, #32
 80075b8:	4013      	ands	r3, r2
 80075ba:	d00b      	beq.n	80075d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	4a25      	ldr	r2, [pc, #148]	; (8007658 <UART_AdvFeatureConfig+0x158>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	0019      	movs	r1, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2240      	movs	r2, #64	; 0x40
 80075da:	4013      	ands	r3, r2
 80075dc:	d01d      	beq.n	800761a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <UART_AdvFeatureConfig+0x15c>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	0019      	movs	r1, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	035b      	lsls	r3, r3, #13
 80075fe:	429a      	cmp	r2, r3
 8007600:	d10b      	bne.n	800761a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a15      	ldr	r2, [pc, #84]	; (8007660 <UART_AdvFeatureConfig+0x160>)
 800760a:	4013      	ands	r3, r2
 800760c:	0019      	movs	r1, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	4013      	ands	r3, r2
 8007622:	d00b      	beq.n	800763c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <UART_AdvFeatureConfig+0x164>)
 800762c:	4013      	ands	r3, r2
 800762e:	0019      	movs	r1, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }
}
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}
 8007644:	fffdffff 	.word	0xfffdffff
 8007648:	fffeffff 	.word	0xfffeffff
 800764c:	fffbffff 	.word	0xfffbffff
 8007650:	ffff7fff 	.word	0xffff7fff
 8007654:	ffffefff 	.word	0xffffefff
 8007658:	ffffdfff 	.word	0xffffdfff
 800765c:	ffefffff 	.word	0xffefffff
 8007660:	ff9fffff 	.word	0xff9fffff
 8007664:	fff7ffff 	.word	0xfff7ffff

08007668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b092      	sub	sp, #72	; 0x48
 800766c:	af02      	add	r7, sp, #8
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2284      	movs	r2, #132	; 0x84
 8007674:	2100      	movs	r1, #0
 8007676:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007678:	f7fc fd3e 	bl	80040f8 <HAL_GetTick>
 800767c:	0003      	movs	r3, r0
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2208      	movs	r2, #8
 8007688:	4013      	ands	r3, r2
 800768a:	2b08      	cmp	r3, #8
 800768c:	d12c      	bne.n	80076e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	2280      	movs	r2, #128	; 0x80
 8007692:	0391      	lsls	r1, r2, #14
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4a46      	ldr	r2, [pc, #280]	; (80077b0 <UART_CheckIdleState+0x148>)
 8007698:	9200      	str	r2, [sp, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	f000 f88c 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 80076a0:	1e03      	subs	r3, r0, #0
 80076a2:	d021      	beq.n	80076e8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a4:	f3ef 8310 	mrs	r3, PRIMASK
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ae:	2301      	movs	r3, #1
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2180      	movs	r1, #128	; 0x80
 80076c6:	438a      	bics	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	f383 8810 	msr	PRIMASK, r3
}
 80076d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2278      	movs	r2, #120	; 0x78
 80076e0:	2100      	movs	r1, #0
 80076e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e05f      	b.n	80077a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2204      	movs	r2, #4
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d146      	bne.n	8007784 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f8:	2280      	movs	r2, #128	; 0x80
 80076fa:	03d1      	lsls	r1, r2, #15
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <UART_CheckIdleState+0x148>)
 8007700:	9200      	str	r2, [sp, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	f000 f858 	bl	80077b8 <UART_WaitOnFlagUntilTimeout>
 8007708:	1e03      	subs	r3, r0, #0
 800770a:	d03b      	beq.n	8007784 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770c:	f3ef 8310 	mrs	r3, PRIMASK
 8007710:	60fb      	str	r3, [r7, #12]
  return(result);
 8007712:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
 8007716:	2301      	movs	r3, #1
 8007718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f383 8810 	msr	PRIMASK, r3
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4921      	ldr	r1, [pc, #132]	; (80077b4 <UART_CheckIdleState+0x14c>)
 800772e:	400a      	ands	r2, r1
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800773e:	f3ef 8310 	mrs	r3, PRIMASK
 8007742:	61bb      	str	r3, [r7, #24]
  return(result);
 8007744:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007746:	633b      	str	r3, [r7, #48]	; 0x30
 8007748:	2301      	movs	r3, #1
 800774a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f383 8810 	msr	PRIMASK, r3
}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2101      	movs	r1, #1
 8007760:	438a      	bics	r2, r1
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	f383 8810 	msr	PRIMASK, r3
}
 800776e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	2120      	movs	r1, #32
 8007776:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2278      	movs	r2, #120	; 0x78
 800777c:	2100      	movs	r1, #0
 800777e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e011      	b.n	80077a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2280      	movs	r2, #128	; 0x80
 800778e:	2120      	movs	r1, #32
 8007790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2278      	movs	r2, #120	; 0x78
 80077a2:	2100      	movs	r1, #0
 80077a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	0018      	movs	r0, r3
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b010      	add	sp, #64	; 0x40
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	01ffffff 	.word	0x01ffffff
 80077b4:	fffffedf 	.word	0xfffffedf

080077b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	1dfb      	adds	r3, r7, #7
 80077c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c8:	e04b      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	3301      	adds	r3, #1
 80077ce:	d048      	beq.n	8007862 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d0:	f7fc fc92 	bl	80040f8 <HAL_GetTick>
 80077d4:	0002      	movs	r2, r0
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d302      	bcc.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e04b      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2204      	movs	r2, #4
 80077f2:	4013      	ands	r3, r2
 80077f4:	d035      	beq.n	8007862 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	2208      	movs	r2, #8
 80077fe:	4013      	ands	r3, r2
 8007800:	2b08      	cmp	r3, #8
 8007802:	d111      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2208      	movs	r2, #8
 800780a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	0018      	movs	r0, r3
 8007810:	f000 f83c 	bl	800788c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2284      	movs	r2, #132	; 0x84
 8007818:	2108      	movs	r1, #8
 800781a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2278      	movs	r2, #120	; 0x78
 8007820:	2100      	movs	r1, #0
 8007822:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e02c      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	2380      	movs	r3, #128	; 0x80
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	401a      	ands	r2, r3
 8007834:	2380      	movs	r3, #128	; 0x80
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	429a      	cmp	r2, r3
 800783a:	d112      	bne.n	8007862 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2280      	movs	r2, #128	; 0x80
 8007842:	0112      	lsls	r2, r2, #4
 8007844:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0018      	movs	r0, r3
 800784a:	f000 f81f 	bl	800788c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2284      	movs	r2, #132	; 0x84
 8007852:	2120      	movs	r1, #32
 8007854:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2278      	movs	r2, #120	; 0x78
 800785a:	2100      	movs	r1, #0
 800785c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e00f      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4013      	ands	r3, r2
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	425a      	negs	r2, r3
 8007872:	4153      	adcs	r3, r2
 8007874:	b2db      	uxtb	r3, r3
 8007876:	001a      	movs	r2, r3
 8007878:	1dfb      	adds	r3, r7, #7
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d0a4      	beq.n	80077ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	0018      	movs	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	b004      	add	sp, #16
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08e      	sub	sp, #56	; 0x38
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007894:	f3ef 8310 	mrs	r3, PRIMASK
 8007898:	617b      	str	r3, [r7, #20]
  return(result);
 800789a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
 800789e:	2301      	movs	r3, #1
 80078a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f383 8810 	msr	PRIMASK, r3
}
 80078a8:	46c0      	nop			; (mov r8, r8)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4926      	ldr	r1, [pc, #152]	; (8007950 <UART_EndRxTransfer+0xc4>)
 80078b6:	400a      	ands	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f383 8810 	msr	PRIMASK, r3
}
 80078c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c6:	f3ef 8310 	mrs	r3, PRIMASK
 80078ca:	623b      	str	r3, [r7, #32]
  return(result);
 80078cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ce:	633b      	str	r3, [r7, #48]	; 0x30
 80078d0:	2301      	movs	r3, #1
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	f383 8810 	msr	PRIMASK, r3
}
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2101      	movs	r1, #1
 80078e8:	438a      	bics	r2, r1
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	f383 8810 	msr	PRIMASK, r3
}
 80078f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d118      	bne.n	8007932 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007900:	f3ef 8310 	mrs	r3, PRIMASK
 8007904:	60bb      	str	r3, [r7, #8]
  return(result);
 8007906:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800790a:	2301      	movs	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f383 8810 	msr	PRIMASK, r3
}
 8007914:	46c0      	nop			; (mov r8, r8)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2110      	movs	r1, #16
 8007922:	438a      	bics	r2, r1
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f383 8810 	msr	PRIMASK, r3
}
 8007930:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	2120      	movs	r1, #32
 8007938:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	46bd      	mov	sp, r7
 800794a:	b00e      	add	sp, #56	; 0x38
 800794c:	bd80      	pop	{r7, pc}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	fffffedf 	.word	0xfffffedf

08007954 <__cvt>:
 8007954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007956:	001e      	movs	r6, r3
 8007958:	2300      	movs	r3, #0
 800795a:	0014      	movs	r4, r2
 800795c:	b08b      	sub	sp, #44	; 0x2c
 800795e:	429e      	cmp	r6, r3
 8007960:	da04      	bge.n	800796c <__cvt+0x18>
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	0609      	lsls	r1, r1, #24
 8007966:	1873      	adds	r3, r6, r1
 8007968:	001e      	movs	r6, r3
 800796a:	232d      	movs	r3, #45	; 0x2d
 800796c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800796e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007970:	7013      	strb	r3, [r2, #0]
 8007972:	2320      	movs	r3, #32
 8007974:	2203      	movs	r2, #3
 8007976:	439f      	bics	r7, r3
 8007978:	2f46      	cmp	r7, #70	; 0x46
 800797a:	d007      	beq.n	800798c <__cvt+0x38>
 800797c:	003b      	movs	r3, r7
 800797e:	3b45      	subs	r3, #69	; 0x45
 8007980:	4259      	negs	r1, r3
 8007982:	414b      	adcs	r3, r1
 8007984:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007986:	3a01      	subs	r2, #1
 8007988:	18cb      	adds	r3, r1, r3
 800798a:	9310      	str	r3, [sp, #64]	; 0x40
 800798c:	ab09      	add	r3, sp, #36	; 0x24
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	ab08      	add	r3, sp, #32
 8007992:	9303      	str	r3, [sp, #12]
 8007994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007996:	9200      	str	r2, [sp, #0]
 8007998:	9302      	str	r3, [sp, #8]
 800799a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800799c:	0022      	movs	r2, r4
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	0033      	movs	r3, r6
 80079a2:	f001 f915 	bl	8008bd0 <_dtoa_r>
 80079a6:	0005      	movs	r5, r0
 80079a8:	2f47      	cmp	r7, #71	; 0x47
 80079aa:	d102      	bne.n	80079b2 <__cvt+0x5e>
 80079ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d528      	bpl.n	8007a04 <__cvt+0xb0>
 80079b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079b4:	18eb      	adds	r3, r5, r3
 80079b6:	9307      	str	r3, [sp, #28]
 80079b8:	2f46      	cmp	r7, #70	; 0x46
 80079ba:	d114      	bne.n	80079e6 <__cvt+0x92>
 80079bc:	782b      	ldrb	r3, [r5, #0]
 80079be:	2b30      	cmp	r3, #48	; 0x30
 80079c0:	d10c      	bne.n	80079dc <__cvt+0x88>
 80079c2:	2200      	movs	r2, #0
 80079c4:	2300      	movs	r3, #0
 80079c6:	0020      	movs	r0, r4
 80079c8:	0031      	movs	r1, r6
 80079ca:	f7f8 fd3f 	bl	800044c <__aeabi_dcmpeq>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d104      	bne.n	80079dc <__cvt+0x88>
 80079d2:	2301      	movs	r3, #1
 80079d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079de:	9a07      	ldr	r2, [sp, #28]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	18d3      	adds	r3, r2, r3
 80079e4:	9307      	str	r3, [sp, #28]
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	0020      	movs	r0, r4
 80079ec:	0031      	movs	r1, r6
 80079ee:	f7f8 fd2d 	bl	800044c <__aeabi_dcmpeq>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d001      	beq.n	80079fa <__cvt+0xa6>
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	9309      	str	r3, [sp, #36]	; 0x24
 80079fa:	2230      	movs	r2, #48	; 0x30
 80079fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fe:	9907      	ldr	r1, [sp, #28]
 8007a00:	428b      	cmp	r3, r1
 8007a02:	d306      	bcc.n	8007a12 <__cvt+0xbe>
 8007a04:	0028      	movs	r0, r5
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a0a:	1b5b      	subs	r3, r3, r5
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	b00b      	add	sp, #44	; 0x2c
 8007a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a12:	1c59      	adds	r1, r3, #1
 8007a14:	9109      	str	r1, [sp, #36]	; 0x24
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e7f0      	b.n	80079fc <__cvt+0xa8>

08007a1a <__exponent>:
 8007a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1c:	1c83      	adds	r3, r0, #2
 8007a1e:	b087      	sub	sp, #28
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	0005      	movs	r5, r0
 8007a24:	000c      	movs	r4, r1
 8007a26:	232b      	movs	r3, #43	; 0x2b
 8007a28:	7002      	strb	r2, [r0, #0]
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	da01      	bge.n	8007a32 <__exponent+0x18>
 8007a2e:	424c      	negs	r4, r1
 8007a30:	3302      	adds	r3, #2
 8007a32:	706b      	strb	r3, [r5, #1]
 8007a34:	2c09      	cmp	r4, #9
 8007a36:	dd2f      	ble.n	8007a98 <__exponent+0x7e>
 8007a38:	270a      	movs	r7, #10
 8007a3a:	ab04      	add	r3, sp, #16
 8007a3c:	1dde      	adds	r6, r3, #7
 8007a3e:	0020      	movs	r0, r4
 8007a40:	0039      	movs	r1, r7
 8007a42:	9601      	str	r6, [sp, #4]
 8007a44:	f7f8 fcec 	bl	8000420 <__aeabi_idivmod>
 8007a48:	3e01      	subs	r6, #1
 8007a4a:	3130      	adds	r1, #48	; 0x30
 8007a4c:	0020      	movs	r0, r4
 8007a4e:	7031      	strb	r1, [r6, #0]
 8007a50:	0039      	movs	r1, r7
 8007a52:	9402      	str	r4, [sp, #8]
 8007a54:	f7f8 fbfe 	bl	8000254 <__divsi3>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	0004      	movs	r4, r0
 8007a5c:	2b63      	cmp	r3, #99	; 0x63
 8007a5e:	dcee      	bgt.n	8007a3e <__exponent+0x24>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	3430      	adds	r4, #48	; 0x30
 8007a64:	1e9a      	subs	r2, r3, #2
 8007a66:	0013      	movs	r3, r2
 8007a68:	9903      	ldr	r1, [sp, #12]
 8007a6a:	7014      	strb	r4, [r2, #0]
 8007a6c:	a804      	add	r0, sp, #16
 8007a6e:	3007      	adds	r0, #7
 8007a70:	4298      	cmp	r0, r3
 8007a72:	d80c      	bhi.n	8007a8e <__exponent+0x74>
 8007a74:	2300      	movs	r3, #0
 8007a76:	4282      	cmp	r2, r0
 8007a78:	d804      	bhi.n	8007a84 <__exponent+0x6a>
 8007a7a:	aa04      	add	r2, sp, #16
 8007a7c:	3309      	adds	r3, #9
 8007a7e:	189b      	adds	r3, r3, r2
 8007a80:	9a01      	ldr	r2, [sp, #4]
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	9a03      	ldr	r2, [sp, #12]
 8007a86:	18d3      	adds	r3, r2, r3
 8007a88:	1b58      	subs	r0, r3, r5
 8007a8a:	b007      	add	sp, #28
 8007a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a8e:	7818      	ldrb	r0, [r3, #0]
 8007a90:	3301      	adds	r3, #1
 8007a92:	7008      	strb	r0, [r1, #0]
 8007a94:	3101      	adds	r1, #1
 8007a96:	e7e9      	b.n	8007a6c <__exponent+0x52>
 8007a98:	2330      	movs	r3, #48	; 0x30
 8007a9a:	3430      	adds	r4, #48	; 0x30
 8007a9c:	70ab      	strb	r3, [r5, #2]
 8007a9e:	70ec      	strb	r4, [r5, #3]
 8007aa0:	1d2b      	adds	r3, r5, #4
 8007aa2:	e7f1      	b.n	8007a88 <__exponent+0x6e>

08007aa4 <_printf_float>:
 8007aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa6:	b095      	sub	sp, #84	; 0x54
 8007aa8:	000c      	movs	r4, r1
 8007aaa:	9208      	str	r2, [sp, #32]
 8007aac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	0007      	movs	r7, r0
 8007ab2:	f000 ff65 	bl	8008980 <_localeconv_r>
 8007ab6:	6803      	ldr	r3, [r0, #0]
 8007ab8:	0018      	movs	r0, r3
 8007aba:	930c      	str	r3, [sp, #48]	; 0x30
 8007abc:	f7f8 fb24 	bl	8000108 <strlen>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ac4:	7e23      	ldrb	r3, [r4, #24]
 8007ac6:	2207      	movs	r2, #7
 8007ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	900d      	str	r0, [sp, #52]	; 0x34
 8007ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	05c9      	lsls	r1, r1, #23
 8007ad6:	d547      	bpl.n	8007b68 <_printf_float+0xc4>
 8007ad8:	189b      	adds	r3, r3, r2
 8007ada:	4393      	bics	r3, r2
 8007adc:	001a      	movs	r2, r3
 8007ade:	3208      	adds	r2, #8
 8007ae0:	602a      	str	r2, [r5, #0]
 8007ae2:	681e      	ldr	r6, [r3, #0]
 8007ae4:	685d      	ldr	r5, [r3, #4]
 8007ae6:	0032      	movs	r2, r6
 8007ae8:	002b      	movs	r3, r5
 8007aea:	64a2      	str	r2, [r4, #72]	; 0x48
 8007aec:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007aee:	2201      	movs	r2, #1
 8007af0:	006b      	lsls	r3, r5, #1
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	930e      	str	r3, [sp, #56]	; 0x38
 8007af6:	0030      	movs	r0, r6
 8007af8:	4bab      	ldr	r3, [pc, #684]	; (8007da8 <_printf_float+0x304>)
 8007afa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007afc:	4252      	negs	r2, r2
 8007afe:	f7fb f84b 	bl	8002b98 <__aeabi_dcmpun>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d132      	bne.n	8007b6c <_printf_float+0xc8>
 8007b06:	2201      	movs	r2, #1
 8007b08:	0030      	movs	r0, r6
 8007b0a:	4ba7      	ldr	r3, [pc, #668]	; (8007da8 <_printf_float+0x304>)
 8007b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b0e:	4252      	negs	r2, r2
 8007b10:	f7f8 fcac 	bl	800046c <__aeabi_dcmple>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d129      	bne.n	8007b6c <_printf_float+0xc8>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	0030      	movs	r0, r6
 8007b1e:	0029      	movs	r1, r5
 8007b20:	f7f8 fc9a 	bl	8000458 <__aeabi_dcmplt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d003      	beq.n	8007b30 <_printf_float+0x8c>
 8007b28:	0023      	movs	r3, r4
 8007b2a:	222d      	movs	r2, #45	; 0x2d
 8007b2c:	3343      	adds	r3, #67	; 0x43
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b32:	4d9e      	ldr	r5, [pc, #632]	; (8007dac <_printf_float+0x308>)
 8007b34:	2b47      	cmp	r3, #71	; 0x47
 8007b36:	d900      	bls.n	8007b3a <_printf_float+0x96>
 8007b38:	4d9d      	ldr	r5, [pc, #628]	; (8007db0 <_printf_float+0x30c>)
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	3301      	adds	r3, #1
 8007b42:	439a      	bics	r2, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	6022      	str	r2, [r4, #0]
 8007b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4c:	0021      	movs	r1, r4
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	0038      	movs	r0, r7
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	aa13      	add	r2, sp, #76	; 0x4c
 8007b56:	f000 f9fb 	bl	8007f50 <_printf_common>
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d000      	beq.n	8007b60 <_printf_float+0xbc>
 8007b5e:	e0a3      	b.n	8007ca8 <_printf_float+0x204>
 8007b60:	2001      	movs	r0, #1
 8007b62:	4240      	negs	r0, r0
 8007b64:	b015      	add	sp, #84	; 0x54
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b68:	3307      	adds	r3, #7
 8007b6a:	e7b6      	b.n	8007ada <_printf_float+0x36>
 8007b6c:	0032      	movs	r2, r6
 8007b6e:	002b      	movs	r3, r5
 8007b70:	0030      	movs	r0, r6
 8007b72:	0029      	movs	r1, r5
 8007b74:	f7fb f810 	bl	8002b98 <__aeabi_dcmpun>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d00b      	beq.n	8007b94 <_printf_float+0xf0>
 8007b7c:	2d00      	cmp	r5, #0
 8007b7e:	da03      	bge.n	8007b88 <_printf_float+0xe4>
 8007b80:	0023      	movs	r3, r4
 8007b82:	222d      	movs	r2, #45	; 0x2d
 8007b84:	3343      	adds	r3, #67	; 0x43
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8a:	4d8a      	ldr	r5, [pc, #552]	; (8007db4 <_printf_float+0x310>)
 8007b8c:	2b47      	cmp	r3, #71	; 0x47
 8007b8e:	d9d4      	bls.n	8007b3a <_printf_float+0x96>
 8007b90:	4d89      	ldr	r5, [pc, #548]	; (8007db8 <_printf_float+0x314>)
 8007b92:	e7d2      	b.n	8007b3a <_printf_float+0x96>
 8007b94:	2220      	movs	r2, #32
 8007b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	4391      	bics	r1, r2
 8007b9c:	910e      	str	r1, [sp, #56]	; 0x38
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	d14a      	bne.n	8007c38 <_printf_float+0x194>
 8007ba2:	3307      	adds	r3, #7
 8007ba4:	6063      	str	r3, [r4, #4]
 8007ba6:	2380      	movs	r3, #128	; 0x80
 8007ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4313      	orrs	r3, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	9206      	str	r2, [sp, #24]
 8007bb2:	aa12      	add	r2, sp, #72	; 0x48
 8007bb4:	9205      	str	r2, [sp, #20]
 8007bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	9204      	str	r2, [sp, #16]
 8007bbc:	aa11      	add	r2, sp, #68	; 0x44
 8007bbe:	9203      	str	r2, [sp, #12]
 8007bc0:	2223      	movs	r2, #35	; 0x23
 8007bc2:	a908      	add	r1, sp, #32
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	1852      	adds	r2, r2, r1
 8007bca:	9202      	str	r2, [sp, #8]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	0032      	movs	r2, r6
 8007bd0:	002b      	movs	r3, r5
 8007bd2:	0038      	movs	r0, r7
 8007bd4:	f7ff febe 	bl	8007954 <__cvt>
 8007bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bda:	0005      	movs	r5, r0
 8007bdc:	2b47      	cmp	r3, #71	; 0x47
 8007bde:	d109      	bne.n	8007bf4 <_printf_float+0x150>
 8007be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be2:	1cda      	adds	r2, r3, #3
 8007be4:	db02      	blt.n	8007bec <_printf_float+0x148>
 8007be6:	6862      	ldr	r2, [r4, #4]
 8007be8:	4293      	cmp	r3, r2
 8007bea:	dd49      	ble.n	8007c80 <_printf_float+0x1dc>
 8007bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bee:	3b02      	subs	r3, #2
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bf8:	2b65      	cmp	r3, #101	; 0x65
 8007bfa:	d824      	bhi.n	8007c46 <_printf_float+0x1a2>
 8007bfc:	0020      	movs	r0, r4
 8007bfe:	001a      	movs	r2, r3
 8007c00:	3901      	subs	r1, #1
 8007c02:	3050      	adds	r0, #80	; 0x50
 8007c04:	9111      	str	r1, [sp, #68]	; 0x44
 8007c06:	f7ff ff08 	bl	8007a1a <__exponent>
 8007c0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c0e:	1813      	adds	r3, r2, r0
 8007c10:	6123      	str	r3, [r4, #16]
 8007c12:	2a01      	cmp	r2, #1
 8007c14:	dc02      	bgt.n	8007c1c <_printf_float+0x178>
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	07d2      	lsls	r2, r2, #31
 8007c1a:	d501      	bpl.n	8007c20 <_printf_float+0x17c>
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	6123      	str	r3, [r4, #16]
 8007c20:	2323      	movs	r3, #35	; 0x23
 8007c22:	aa08      	add	r2, sp, #32
 8007c24:	189b      	adds	r3, r3, r2
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d100      	bne.n	8007c2e <_printf_float+0x18a>
 8007c2c:	e78d      	b.n	8007b4a <_printf_float+0xa6>
 8007c2e:	0023      	movs	r3, r4
 8007c30:	222d      	movs	r2, #45	; 0x2d
 8007c32:	3343      	adds	r3, #67	; 0x43
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e788      	b.n	8007b4a <_printf_float+0xa6>
 8007c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c3a:	2a47      	cmp	r2, #71	; 0x47
 8007c3c:	d1b3      	bne.n	8007ba6 <_printf_float+0x102>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1b1      	bne.n	8007ba6 <_printf_float+0x102>
 8007c42:	3301      	adds	r3, #1
 8007c44:	e7ae      	b.n	8007ba4 <_printf_float+0x100>
 8007c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c48:	2b66      	cmp	r3, #102	; 0x66
 8007c4a:	d11b      	bne.n	8007c84 <_printf_float+0x1e0>
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	dd09      	ble.n	8007c66 <_printf_float+0x1c2>
 8007c52:	6121      	str	r1, [r4, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <_printf_float+0x1ba>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	07d2      	lsls	r2, r2, #31
 8007c5c:	d50b      	bpl.n	8007c76 <_printf_float+0x1d2>
 8007c5e:	3301      	adds	r3, #1
 8007c60:	185b      	adds	r3, r3, r1
 8007c62:	6123      	str	r3, [r4, #16]
 8007c64:	e007      	b.n	8007c76 <_printf_float+0x1d2>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <_printf_float+0x1ce>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	6821      	ldr	r1, [r4, #0]
 8007c6e:	4211      	tst	r1, r2
 8007c70:	d000      	beq.n	8007c74 <_printf_float+0x1d0>
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	6122      	str	r2, [r4, #16]
 8007c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c78:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c7e:	e7cf      	b.n	8007c20 <_printf_float+0x17c>
 8007c80:	2367      	movs	r3, #103	; 0x67
 8007c82:	930a      	str	r3, [sp, #40]	; 0x28
 8007c84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	db06      	blt.n	8007c9a <_printf_float+0x1f6>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	6121      	str	r1, [r4, #16]
 8007c90:	07db      	lsls	r3, r3, #31
 8007c92:	d5f0      	bpl.n	8007c76 <_printf_float+0x1d2>
 8007c94:	3101      	adds	r1, #1
 8007c96:	6121      	str	r1, [r4, #16]
 8007c98:	e7ed      	b.n	8007c76 <_printf_float+0x1d2>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	dc01      	bgt.n	8007ca4 <_printf_float+0x200>
 8007ca0:	1892      	adds	r2, r2, r2
 8007ca2:	1a52      	subs	r2, r2, r1
 8007ca4:	189b      	adds	r3, r3, r2
 8007ca6:	e7dc      	b.n	8007c62 <_printf_float+0x1be>
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	0553      	lsls	r3, r2, #21
 8007cac:	d408      	bmi.n	8007cc0 <_printf_float+0x21c>
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	002a      	movs	r2, r5
 8007cb2:	0038      	movs	r0, r7
 8007cb4:	9908      	ldr	r1, [sp, #32]
 8007cb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cb8:	47a8      	blx	r5
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d12a      	bne.n	8007d14 <_printf_float+0x270>
 8007cbe:	e74f      	b.n	8007b60 <_printf_float+0xbc>
 8007cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc2:	2b65      	cmp	r3, #101	; 0x65
 8007cc4:	d800      	bhi.n	8007cc8 <_printf_float+0x224>
 8007cc6:	e0ec      	b.n	8007ea2 <_printf_float+0x3fe>
 8007cc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007cca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f7f8 fbbc 	bl	800044c <__aeabi_dcmpeq>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d034      	beq.n	8007d42 <_printf_float+0x29e>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	0038      	movs	r0, r7
 8007cdc:	4a37      	ldr	r2, [pc, #220]	; (8007dbc <_printf_float+0x318>)
 8007cde:	9908      	ldr	r1, [sp, #32]
 8007ce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ce2:	47a8      	blx	r5
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d100      	bne.n	8007cea <_printf_float+0x246>
 8007ce8:	e73a      	b.n	8007b60 <_printf_float+0xbc>
 8007cea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	db02      	blt.n	8007cf8 <_printf_float+0x254>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	07db      	lsls	r3, r3, #31
 8007cf6:	d50d      	bpl.n	8007d14 <_printf_float+0x270>
 8007cf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cfa:	0038      	movs	r0, r7
 8007cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d00:	9908      	ldr	r1, [sp, #32]
 8007d02:	47a8      	blx	r5
 8007d04:	2500      	movs	r5, #0
 8007d06:	3001      	adds	r0, #1
 8007d08:	d100      	bne.n	8007d0c <_printf_float+0x268>
 8007d0a:	e729      	b.n	8007b60 <_printf_float+0xbc>
 8007d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc0a      	bgt.n	8007d2a <_printf_float+0x286>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	079b      	lsls	r3, r3, #30
 8007d18:	d500      	bpl.n	8007d1c <_printf_float+0x278>
 8007d1a:	e116      	b.n	8007f4a <_printf_float+0x4a6>
 8007d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d1e:	68e0      	ldr	r0, [r4, #12]
 8007d20:	4298      	cmp	r0, r3
 8007d22:	db00      	blt.n	8007d26 <_printf_float+0x282>
 8007d24:	e71e      	b.n	8007b64 <_printf_float+0xc0>
 8007d26:	0018      	movs	r0, r3
 8007d28:	e71c      	b.n	8007b64 <_printf_float+0xc0>
 8007d2a:	0022      	movs	r2, r4
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	0038      	movs	r0, r7
 8007d30:	9908      	ldr	r1, [sp, #32]
 8007d32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d34:	321a      	adds	r2, #26
 8007d36:	47b0      	blx	r6
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d100      	bne.n	8007d3e <_printf_float+0x29a>
 8007d3c:	e710      	b.n	8007b60 <_printf_float+0xbc>
 8007d3e:	3501      	adds	r5, #1
 8007d40:	e7e4      	b.n	8007d0c <_printf_float+0x268>
 8007d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc3b      	bgt.n	8007dc0 <_printf_float+0x31c>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	0038      	movs	r0, r7
 8007d4c:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <_printf_float+0x318>)
 8007d4e:	9908      	ldr	r1, [sp, #32]
 8007d50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d52:	47b0      	blx	r6
 8007d54:	3001      	adds	r0, #1
 8007d56:	d100      	bne.n	8007d5a <_printf_float+0x2b6>
 8007d58:	e702      	b.n	8007b60 <_printf_float+0xbc>
 8007d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	d102      	bne.n	8007d68 <_printf_float+0x2c4>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	07db      	lsls	r3, r3, #31
 8007d66:	d5d5      	bpl.n	8007d14 <_printf_float+0x270>
 8007d68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d6a:	0038      	movs	r0, r7
 8007d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6e:	9908      	ldr	r1, [sp, #32]
 8007d70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d72:	47b0      	blx	r6
 8007d74:	2300      	movs	r3, #0
 8007d76:	3001      	adds	r0, #1
 8007d78:	d100      	bne.n	8007d7c <_printf_float+0x2d8>
 8007d7a:	e6f1      	b.n	8007b60 <_printf_float+0xbc>
 8007d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d82:	425b      	negs	r3, r3
 8007d84:	4293      	cmp	r3, r2
 8007d86:	dc01      	bgt.n	8007d8c <_printf_float+0x2e8>
 8007d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d8a:	e791      	b.n	8007cb0 <_printf_float+0x20c>
 8007d8c:	0022      	movs	r2, r4
 8007d8e:	2301      	movs	r3, #1
 8007d90:	0038      	movs	r0, r7
 8007d92:	9908      	ldr	r1, [sp, #32]
 8007d94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d96:	321a      	adds	r2, #26
 8007d98:	47b0      	blx	r6
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d100      	bne.n	8007da0 <_printf_float+0x2fc>
 8007d9e:	e6df      	b.n	8007b60 <_printf_float+0xbc>
 8007da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da2:	3301      	adds	r3, #1
 8007da4:	e7ea      	b.n	8007d7c <_printf_float+0x2d8>
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	7fefffff 	.word	0x7fefffff
 8007dac:	0800d010 	.word	0x0800d010
 8007db0:	0800d014 	.word	0x0800d014
 8007db4:	0800d018 	.word	0x0800d018
 8007db8:	0800d01c 	.word	0x0800d01c
 8007dbc:	0800d020 	.word	0x0800d020
 8007dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	dd00      	ble.n	8007dcc <_printf_float+0x328>
 8007dca:	930a      	str	r3, [sp, #40]	; 0x28
 8007dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dc3d      	bgt.n	8007e4e <_printf_float+0x3aa>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	17db      	asrs	r3, r3, #31
 8007ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007de6:	4013      	ands	r3, r2
 8007de8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dee:	4293      	cmp	r3, r2
 8007df0:	dc36      	bgt.n	8007e60 <_printf_float+0x3bc>
 8007df2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007df6:	429a      	cmp	r2, r3
 8007df8:	db40      	blt.n	8007e7c <_printf_float+0x3d8>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	07db      	lsls	r3, r3, #31
 8007dfe:	d43d      	bmi.n	8007e7c <_printf_float+0x3d8>
 8007e00:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007e02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e06:	1af3      	subs	r3, r6, r3
 8007e08:	1ab6      	subs	r6, r6, r2
 8007e0a:	429e      	cmp	r6, r3
 8007e0c:	dd00      	ble.n	8007e10 <_printf_float+0x36c>
 8007e0e:	001e      	movs	r6, r3
 8007e10:	2e00      	cmp	r6, #0
 8007e12:	dc3c      	bgt.n	8007e8e <_printf_float+0x3ea>
 8007e14:	2300      	movs	r3, #0
 8007e16:	930a      	str	r3, [sp, #40]	; 0x28
 8007e18:	43f3      	mvns	r3, r6
 8007e1a:	17db      	asrs	r3, r3, #31
 8007e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e26:	4032      	ands	r2, r6
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	dc00      	bgt.n	8007e32 <_printf_float+0x38e>
 8007e30:	e770      	b.n	8007d14 <_printf_float+0x270>
 8007e32:	0022      	movs	r2, r4
 8007e34:	2301      	movs	r3, #1
 8007e36:	0038      	movs	r0, r7
 8007e38:	9908      	ldr	r1, [sp, #32]
 8007e3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e3c:	321a      	adds	r2, #26
 8007e3e:	47a8      	blx	r5
 8007e40:	3001      	adds	r0, #1
 8007e42:	d100      	bne.n	8007e46 <_printf_float+0x3a2>
 8007e44:	e68c      	b.n	8007b60 <_printf_float+0xbc>
 8007e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e48:	3301      	adds	r3, #1
 8007e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4c:	e7e7      	b.n	8007e1e <_printf_float+0x37a>
 8007e4e:	002a      	movs	r2, r5
 8007e50:	0038      	movs	r0, r7
 8007e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e54:	9908      	ldr	r1, [sp, #32]
 8007e56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e58:	47b0      	blx	r6
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d1b9      	bne.n	8007dd2 <_printf_float+0x32e>
 8007e5e:	e67f      	b.n	8007b60 <_printf_float+0xbc>
 8007e60:	0022      	movs	r2, r4
 8007e62:	2301      	movs	r3, #1
 8007e64:	0038      	movs	r0, r7
 8007e66:	9908      	ldr	r1, [sp, #32]
 8007e68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e6a:	321a      	adds	r2, #26
 8007e6c:	47b0      	blx	r6
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d100      	bne.n	8007e74 <_printf_float+0x3d0>
 8007e72:	e675      	b.n	8007b60 <_printf_float+0xbc>
 8007e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e76:	3301      	adds	r3, #1
 8007e78:	930e      	str	r3, [sp, #56]	; 0x38
 8007e7a:	e7b0      	b.n	8007dde <_printf_float+0x33a>
 8007e7c:	0038      	movs	r0, r7
 8007e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e82:	9908      	ldr	r1, [sp, #32]
 8007e84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e86:	47b0      	blx	r6
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d1b9      	bne.n	8007e00 <_printf_float+0x35c>
 8007e8c:	e668      	b.n	8007b60 <_printf_float+0xbc>
 8007e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e90:	0038      	movs	r0, r7
 8007e92:	18ea      	adds	r2, r5, r3
 8007e94:	9908      	ldr	r1, [sp, #32]
 8007e96:	0033      	movs	r3, r6
 8007e98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e9a:	47a8      	blx	r5
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d1b9      	bne.n	8007e14 <_printf_float+0x370>
 8007ea0:	e65e      	b.n	8007b60 <_printf_float+0xbc>
 8007ea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	dc02      	bgt.n	8007eae <_printf_float+0x40a>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	421a      	tst	r2, r3
 8007eac:	d03a      	beq.n	8007f24 <_printf_float+0x480>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	002a      	movs	r2, r5
 8007eb2:	0038      	movs	r0, r7
 8007eb4:	9908      	ldr	r1, [sp, #32]
 8007eb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007eb8:	47b0      	blx	r6
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d100      	bne.n	8007ec0 <_printf_float+0x41c>
 8007ebe:	e64f      	b.n	8007b60 <_printf_float+0xbc>
 8007ec0:	0038      	movs	r0, r7
 8007ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ec6:	9908      	ldr	r1, [sp, #32]
 8007ec8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007eca:	47b0      	blx	r6
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d100      	bne.n	8007ed2 <_printf_float+0x42e>
 8007ed0:	e646      	b.n	8007b60 <_printf_float+0xbc>
 8007ed2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007ed4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007ed6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ed8:	2200      	movs	r2, #0
 8007eda:	001e      	movs	r6, r3
 8007edc:	2300      	movs	r3, #0
 8007ede:	f7f8 fab5 	bl	800044c <__aeabi_dcmpeq>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d11c      	bne.n	8007f20 <_printf_float+0x47c>
 8007ee6:	0033      	movs	r3, r6
 8007ee8:	1c6a      	adds	r2, r5, #1
 8007eea:	3b01      	subs	r3, #1
 8007eec:	0038      	movs	r0, r7
 8007eee:	9908      	ldr	r1, [sp, #32]
 8007ef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ef2:	47a8      	blx	r5
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d10f      	bne.n	8007f18 <_printf_float+0x474>
 8007ef8:	e632      	b.n	8007b60 <_printf_float+0xbc>
 8007efa:	0022      	movs	r2, r4
 8007efc:	2301      	movs	r3, #1
 8007efe:	0038      	movs	r0, r7
 8007f00:	9908      	ldr	r1, [sp, #32]
 8007f02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f04:	321a      	adds	r2, #26
 8007f06:	47b0      	blx	r6
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d100      	bne.n	8007f0e <_printf_float+0x46a>
 8007f0c:	e628      	b.n	8007b60 <_printf_float+0xbc>
 8007f0e:	3501      	adds	r5, #1
 8007f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f12:	3b01      	subs	r3, #1
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dcf0      	bgt.n	8007efa <_printf_float+0x456>
 8007f18:	0022      	movs	r2, r4
 8007f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f1c:	3250      	adds	r2, #80	; 0x50
 8007f1e:	e6c8      	b.n	8007cb2 <_printf_float+0x20e>
 8007f20:	2500      	movs	r5, #0
 8007f22:	e7f5      	b.n	8007f10 <_printf_float+0x46c>
 8007f24:	002a      	movs	r2, r5
 8007f26:	e7e1      	b.n	8007eec <_printf_float+0x448>
 8007f28:	0022      	movs	r2, r4
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	0038      	movs	r0, r7
 8007f2e:	9908      	ldr	r1, [sp, #32]
 8007f30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f32:	3219      	adds	r2, #25
 8007f34:	47b0      	blx	r6
 8007f36:	3001      	adds	r0, #1
 8007f38:	d100      	bne.n	8007f3c <_printf_float+0x498>
 8007f3a:	e611      	b.n	8007b60 <_printf_float+0xbc>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	68e3      	ldr	r3, [r4, #12]
 8007f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	42ab      	cmp	r3, r5
 8007f46:	dcef      	bgt.n	8007f28 <_printf_float+0x484>
 8007f48:	e6e8      	b.n	8007d1c <_printf_float+0x278>
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	e7f7      	b.n	8007f3e <_printf_float+0x49a>
 8007f4e:	46c0      	nop			; (mov r8, r8)

08007f50 <_printf_common>:
 8007f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f52:	0016      	movs	r6, r2
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	688a      	ldr	r2, [r1, #8]
 8007f58:	690b      	ldr	r3, [r1, #16]
 8007f5a:	000c      	movs	r4, r1
 8007f5c:	9000      	str	r0, [sp, #0]
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	da00      	bge.n	8007f64 <_printf_common+0x14>
 8007f62:	0013      	movs	r3, r2
 8007f64:	0022      	movs	r2, r4
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	3243      	adds	r2, #67	; 0x43
 8007f6a:	7812      	ldrb	r2, [r2, #0]
 8007f6c:	2a00      	cmp	r2, #0
 8007f6e:	d001      	beq.n	8007f74 <_printf_common+0x24>
 8007f70:	3301      	adds	r3, #1
 8007f72:	6033      	str	r3, [r6, #0]
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	069b      	lsls	r3, r3, #26
 8007f78:	d502      	bpl.n	8007f80 <_printf_common+0x30>
 8007f7a:	6833      	ldr	r3, [r6, #0]
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	2306      	movs	r3, #6
 8007f84:	0015      	movs	r5, r2
 8007f86:	401d      	ands	r5, r3
 8007f88:	421a      	tst	r2, r3
 8007f8a:	d027      	beq.n	8007fdc <_printf_common+0x8c>
 8007f8c:	0023      	movs	r3, r4
 8007f8e:	3343      	adds	r3, #67	; 0x43
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	1e5a      	subs	r2, r3, #1
 8007f94:	4193      	sbcs	r3, r2
 8007f96:	6822      	ldr	r2, [r4, #0]
 8007f98:	0692      	lsls	r2, r2, #26
 8007f9a:	d430      	bmi.n	8007ffe <_printf_common+0xae>
 8007f9c:	0022      	movs	r2, r4
 8007f9e:	9901      	ldr	r1, [sp, #4]
 8007fa0:	9800      	ldr	r0, [sp, #0]
 8007fa2:	9d08      	ldr	r5, [sp, #32]
 8007fa4:	3243      	adds	r2, #67	; 0x43
 8007fa6:	47a8      	blx	r5
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d025      	beq.n	8007ff8 <_printf_common+0xa8>
 8007fac:	2206      	movs	r2, #6
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	2500      	movs	r5, #0
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d105      	bne.n	8007fc4 <_printf_common+0x74>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	68e5      	ldr	r5, [r4, #12]
 8007fbc:	1aed      	subs	r5, r5, r3
 8007fbe:	43eb      	mvns	r3, r5
 8007fc0:	17db      	asrs	r3, r3, #31
 8007fc2:	401d      	ands	r5, r3
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	dd01      	ble.n	8007fd0 <_printf_common+0x80>
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	18ed      	adds	r5, r5, r3
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	42b5      	cmp	r5, r6
 8007fd4:	d120      	bne.n	8008018 <_printf_common+0xc8>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e010      	b.n	8007ffc <_printf_common+0xac>
 8007fda:	3501      	adds	r5, #1
 8007fdc:	68e3      	ldr	r3, [r4, #12]
 8007fde:	6832      	ldr	r2, [r6, #0]
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	42ab      	cmp	r3, r5
 8007fe4:	ddd2      	ble.n	8007f8c <_printf_common+0x3c>
 8007fe6:	0022      	movs	r2, r4
 8007fe8:	2301      	movs	r3, #1
 8007fea:	9901      	ldr	r1, [sp, #4]
 8007fec:	9800      	ldr	r0, [sp, #0]
 8007fee:	9f08      	ldr	r7, [sp, #32]
 8007ff0:	3219      	adds	r2, #25
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d1f0      	bne.n	8007fda <_printf_common+0x8a>
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	4240      	negs	r0, r0
 8007ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ffe:	2030      	movs	r0, #48	; 0x30
 8008000:	18e1      	adds	r1, r4, r3
 8008002:	3143      	adds	r1, #67	; 0x43
 8008004:	7008      	strb	r0, [r1, #0]
 8008006:	0021      	movs	r1, r4
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	3145      	adds	r1, #69	; 0x45
 800800c:	7809      	ldrb	r1, [r1, #0]
 800800e:	18a2      	adds	r2, r4, r2
 8008010:	3243      	adds	r2, #67	; 0x43
 8008012:	3302      	adds	r3, #2
 8008014:	7011      	strb	r1, [r2, #0]
 8008016:	e7c1      	b.n	8007f9c <_printf_common+0x4c>
 8008018:	0022      	movs	r2, r4
 800801a:	2301      	movs	r3, #1
 800801c:	9901      	ldr	r1, [sp, #4]
 800801e:	9800      	ldr	r0, [sp, #0]
 8008020:	9f08      	ldr	r7, [sp, #32]
 8008022:	321a      	adds	r2, #26
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	d0e6      	beq.n	8007ff8 <_printf_common+0xa8>
 800802a:	3601      	adds	r6, #1
 800802c:	e7d1      	b.n	8007fd2 <_printf_common+0x82>
	...

08008030 <_printf_i>:
 8008030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008032:	b08b      	sub	sp, #44	; 0x2c
 8008034:	9206      	str	r2, [sp, #24]
 8008036:	000a      	movs	r2, r1
 8008038:	3243      	adds	r2, #67	; 0x43
 800803a:	9307      	str	r3, [sp, #28]
 800803c:	9005      	str	r0, [sp, #20]
 800803e:	9204      	str	r2, [sp, #16]
 8008040:	7e0a      	ldrb	r2, [r1, #24]
 8008042:	000c      	movs	r4, r1
 8008044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008046:	2a78      	cmp	r2, #120	; 0x78
 8008048:	d809      	bhi.n	800805e <_printf_i+0x2e>
 800804a:	2a62      	cmp	r2, #98	; 0x62
 800804c:	d80b      	bhi.n	8008066 <_printf_i+0x36>
 800804e:	2a00      	cmp	r2, #0
 8008050:	d100      	bne.n	8008054 <_printf_i+0x24>
 8008052:	e0be      	b.n	80081d2 <_printf_i+0x1a2>
 8008054:	497c      	ldr	r1, [pc, #496]	; (8008248 <_printf_i+0x218>)
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	2a58      	cmp	r2, #88	; 0x58
 800805a:	d100      	bne.n	800805e <_printf_i+0x2e>
 800805c:	e093      	b.n	8008186 <_printf_i+0x156>
 800805e:	0026      	movs	r6, r4
 8008060:	3642      	adds	r6, #66	; 0x42
 8008062:	7032      	strb	r2, [r6, #0]
 8008064:	e022      	b.n	80080ac <_printf_i+0x7c>
 8008066:	0010      	movs	r0, r2
 8008068:	3863      	subs	r0, #99	; 0x63
 800806a:	2815      	cmp	r0, #21
 800806c:	d8f7      	bhi.n	800805e <_printf_i+0x2e>
 800806e:	f7f8 f85d 	bl	800012c <__gnu_thumb1_case_shi>
 8008072:	0016      	.short	0x0016
 8008074:	fff6001f 	.word	0xfff6001f
 8008078:	fff6fff6 	.word	0xfff6fff6
 800807c:	001ffff6 	.word	0x001ffff6
 8008080:	fff6fff6 	.word	0xfff6fff6
 8008084:	fff6fff6 	.word	0xfff6fff6
 8008088:	003600a3 	.word	0x003600a3
 800808c:	fff60083 	.word	0xfff60083
 8008090:	00b4fff6 	.word	0x00b4fff6
 8008094:	0036fff6 	.word	0x0036fff6
 8008098:	fff6fff6 	.word	0xfff6fff6
 800809c:	0087      	.short	0x0087
 800809e:	0026      	movs	r6, r4
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	3642      	adds	r6, #66	; 0x42
 80080a4:	1d11      	adds	r1, r2, #4
 80080a6:	6019      	str	r1, [r3, #0]
 80080a8:	6813      	ldr	r3, [r2, #0]
 80080aa:	7033      	strb	r3, [r6, #0]
 80080ac:	2301      	movs	r3, #1
 80080ae:	e0a2      	b.n	80081f6 <_printf_i+0x1c6>
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	6809      	ldr	r1, [r1, #0]
 80080b4:	1d02      	adds	r2, r0, #4
 80080b6:	060d      	lsls	r5, r1, #24
 80080b8:	d50b      	bpl.n	80080d2 <_printf_i+0xa2>
 80080ba:	6805      	ldr	r5, [r0, #0]
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	2d00      	cmp	r5, #0
 80080c0:	da03      	bge.n	80080ca <_printf_i+0x9a>
 80080c2:	232d      	movs	r3, #45	; 0x2d
 80080c4:	9a04      	ldr	r2, [sp, #16]
 80080c6:	426d      	negs	r5, r5
 80080c8:	7013      	strb	r3, [r2, #0]
 80080ca:	4b5f      	ldr	r3, [pc, #380]	; (8008248 <_printf_i+0x218>)
 80080cc:	270a      	movs	r7, #10
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	e01b      	b.n	800810a <_printf_i+0xda>
 80080d2:	6805      	ldr	r5, [r0, #0]
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	0649      	lsls	r1, r1, #25
 80080d8:	d5f1      	bpl.n	80080be <_printf_i+0x8e>
 80080da:	b22d      	sxth	r5, r5
 80080dc:	e7ef      	b.n	80080be <_printf_i+0x8e>
 80080de:	680d      	ldr	r5, [r1, #0]
 80080e0:	6819      	ldr	r1, [r3, #0]
 80080e2:	1d08      	adds	r0, r1, #4
 80080e4:	6018      	str	r0, [r3, #0]
 80080e6:	062e      	lsls	r6, r5, #24
 80080e8:	d501      	bpl.n	80080ee <_printf_i+0xbe>
 80080ea:	680d      	ldr	r5, [r1, #0]
 80080ec:	e003      	b.n	80080f6 <_printf_i+0xc6>
 80080ee:	066d      	lsls	r5, r5, #25
 80080f0:	d5fb      	bpl.n	80080ea <_printf_i+0xba>
 80080f2:	680d      	ldr	r5, [r1, #0]
 80080f4:	b2ad      	uxth	r5, r5
 80080f6:	4b54      	ldr	r3, [pc, #336]	; (8008248 <_printf_i+0x218>)
 80080f8:	2708      	movs	r7, #8
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	2a6f      	cmp	r2, #111	; 0x6f
 80080fe:	d000      	beq.n	8008102 <_printf_i+0xd2>
 8008100:	3702      	adds	r7, #2
 8008102:	0023      	movs	r3, r4
 8008104:	2200      	movs	r2, #0
 8008106:	3343      	adds	r3, #67	; 0x43
 8008108:	701a      	strb	r2, [r3, #0]
 800810a:	6863      	ldr	r3, [r4, #4]
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	db03      	blt.n	800811a <_printf_i+0xea>
 8008112:	2104      	movs	r1, #4
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	438a      	bics	r2, r1
 8008118:	6022      	str	r2, [r4, #0]
 800811a:	2d00      	cmp	r5, #0
 800811c:	d102      	bne.n	8008124 <_printf_i+0xf4>
 800811e:	9e04      	ldr	r6, [sp, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <_printf_i+0x10e>
 8008124:	9e04      	ldr	r6, [sp, #16]
 8008126:	0028      	movs	r0, r5
 8008128:	0039      	movs	r1, r7
 800812a:	f7f8 f88f 	bl	800024c <__aeabi_uidivmod>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	3e01      	subs	r6, #1
 8008132:	5c5b      	ldrb	r3, [r3, r1]
 8008134:	7033      	strb	r3, [r6, #0]
 8008136:	002b      	movs	r3, r5
 8008138:	0005      	movs	r5, r0
 800813a:	429f      	cmp	r7, r3
 800813c:	d9f3      	bls.n	8008126 <_printf_i+0xf6>
 800813e:	2f08      	cmp	r7, #8
 8008140:	d109      	bne.n	8008156 <_printf_i+0x126>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	07db      	lsls	r3, r3, #31
 8008146:	d506      	bpl.n	8008156 <_printf_i+0x126>
 8008148:	6862      	ldr	r2, [r4, #4]
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	dc02      	bgt.n	8008156 <_printf_i+0x126>
 8008150:	2330      	movs	r3, #48	; 0x30
 8008152:	3e01      	subs	r6, #1
 8008154:	7033      	strb	r3, [r6, #0]
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	1b9b      	subs	r3, r3, r6
 800815a:	6123      	str	r3, [r4, #16]
 800815c:	9b07      	ldr	r3, [sp, #28]
 800815e:	0021      	movs	r1, r4
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	9805      	ldr	r0, [sp, #20]
 8008164:	9b06      	ldr	r3, [sp, #24]
 8008166:	aa09      	add	r2, sp, #36	; 0x24
 8008168:	f7ff fef2 	bl	8007f50 <_printf_common>
 800816c:	3001      	adds	r0, #1
 800816e:	d147      	bne.n	8008200 <_printf_i+0x1d0>
 8008170:	2001      	movs	r0, #1
 8008172:	4240      	negs	r0, r0
 8008174:	b00b      	add	sp, #44	; 0x2c
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008178:	2220      	movs	r2, #32
 800817a:	6809      	ldr	r1, [r1, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	6022      	str	r2, [r4, #0]
 8008180:	2278      	movs	r2, #120	; 0x78
 8008182:	4932      	ldr	r1, [pc, #200]	; (800824c <_printf_i+0x21c>)
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	0021      	movs	r1, r4
 8008188:	3145      	adds	r1, #69	; 0x45
 800818a:	700a      	strb	r2, [r1, #0]
 800818c:	6819      	ldr	r1, [r3, #0]
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	c920      	ldmia	r1!, {r5}
 8008192:	0610      	lsls	r0, r2, #24
 8008194:	d402      	bmi.n	800819c <_printf_i+0x16c>
 8008196:	0650      	lsls	r0, r2, #25
 8008198:	d500      	bpl.n	800819c <_printf_i+0x16c>
 800819a:	b2ad      	uxth	r5, r5
 800819c:	6019      	str	r1, [r3, #0]
 800819e:	07d3      	lsls	r3, r2, #31
 80081a0:	d502      	bpl.n	80081a8 <_printf_i+0x178>
 80081a2:	2320      	movs	r3, #32
 80081a4:	4313      	orrs	r3, r2
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	2710      	movs	r7, #16
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	d1a9      	bne.n	8008102 <_printf_i+0xd2>
 80081ae:	2220      	movs	r2, #32
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	4393      	bics	r3, r2
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	e7a4      	b.n	8008102 <_printf_i+0xd2>
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	680d      	ldr	r5, [r1, #0]
 80081bc:	1d10      	adds	r0, r2, #4
 80081be:	6949      	ldr	r1, [r1, #20]
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	062e      	lsls	r6, r5, #24
 80081c6:	d501      	bpl.n	80081cc <_printf_i+0x19c>
 80081c8:	6019      	str	r1, [r3, #0]
 80081ca:	e002      	b.n	80081d2 <_printf_i+0x1a2>
 80081cc:	066d      	lsls	r5, r5, #25
 80081ce:	d5fb      	bpl.n	80081c8 <_printf_i+0x198>
 80081d0:	8019      	strh	r1, [r3, #0]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9e04      	ldr	r6, [sp, #16]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	e7c0      	b.n	800815c <_printf_i+0x12c>
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	1d11      	adds	r1, r2, #4
 80081de:	6019      	str	r1, [r3, #0]
 80081e0:	6816      	ldr	r6, [r2, #0]
 80081e2:	2100      	movs	r1, #0
 80081e4:	0030      	movs	r0, r6
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	f000 fc49 	bl	8008a7e <memchr>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d001      	beq.n	80081f4 <_printf_i+0x1c4>
 80081f0:	1b80      	subs	r0, r0, r6
 80081f2:	6060      	str	r0, [r4, #4]
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	7013      	strb	r3, [r2, #0]
 80081fe:	e7ad      	b.n	800815c <_printf_i+0x12c>
 8008200:	0032      	movs	r2, r6
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	9906      	ldr	r1, [sp, #24]
 8008206:	9805      	ldr	r0, [sp, #20]
 8008208:	9d07      	ldr	r5, [sp, #28]
 800820a:	47a8      	blx	r5
 800820c:	3001      	adds	r0, #1
 800820e:	d0af      	beq.n	8008170 <_printf_i+0x140>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	079b      	lsls	r3, r3, #30
 8008214:	d415      	bmi.n	8008242 <_printf_i+0x212>
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	68e0      	ldr	r0, [r4, #12]
 800821a:	4298      	cmp	r0, r3
 800821c:	daaa      	bge.n	8008174 <_printf_i+0x144>
 800821e:	0018      	movs	r0, r3
 8008220:	e7a8      	b.n	8008174 <_printf_i+0x144>
 8008222:	0022      	movs	r2, r4
 8008224:	2301      	movs	r3, #1
 8008226:	9906      	ldr	r1, [sp, #24]
 8008228:	9805      	ldr	r0, [sp, #20]
 800822a:	9e07      	ldr	r6, [sp, #28]
 800822c:	3219      	adds	r2, #25
 800822e:	47b0      	blx	r6
 8008230:	3001      	adds	r0, #1
 8008232:	d09d      	beq.n	8008170 <_printf_i+0x140>
 8008234:	3501      	adds	r5, #1
 8008236:	68e3      	ldr	r3, [r4, #12]
 8008238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	42ab      	cmp	r3, r5
 800823e:	dcf0      	bgt.n	8008222 <_printf_i+0x1f2>
 8008240:	e7e9      	b.n	8008216 <_printf_i+0x1e6>
 8008242:	2500      	movs	r5, #0
 8008244:	e7f7      	b.n	8008236 <_printf_i+0x206>
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	0800d022 	.word	0x0800d022
 800824c:	0800d033 	.word	0x0800d033

08008250 <_scanf_float>:
 8008250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008252:	b08b      	sub	sp, #44	; 0x2c
 8008254:	0016      	movs	r6, r2
 8008256:	9002      	str	r0, [sp, #8]
 8008258:	22ae      	movs	r2, #174	; 0xae
 800825a:	2000      	movs	r0, #0
 800825c:	9307      	str	r3, [sp, #28]
 800825e:	688b      	ldr	r3, [r1, #8]
 8008260:	000f      	movs	r7, r1
 8008262:	1e59      	subs	r1, r3, #1
 8008264:	0052      	lsls	r2, r2, #1
 8008266:	9006      	str	r0, [sp, #24]
 8008268:	4291      	cmp	r1, r2
 800826a:	d905      	bls.n	8008278 <_scanf_float+0x28>
 800826c:	3b5e      	subs	r3, #94	; 0x5e
 800826e:	3bff      	subs	r3, #255	; 0xff
 8008270:	9306      	str	r3, [sp, #24]
 8008272:	235e      	movs	r3, #94	; 0x5e
 8008274:	33ff      	adds	r3, #255	; 0xff
 8008276:	60bb      	str	r3, [r7, #8]
 8008278:	23f0      	movs	r3, #240	; 0xf0
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	00db      	lsls	r3, r3, #3
 800827e:	4313      	orrs	r3, r2
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	003b      	movs	r3, r7
 8008284:	2400      	movs	r4, #0
 8008286:	331c      	adds	r3, #28
 8008288:	001d      	movs	r5, r3
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	9403      	str	r4, [sp, #12]
 800828e:	9409      	str	r4, [sp, #36]	; 0x24
 8008290:	9408      	str	r4, [sp, #32]
 8008292:	9401      	str	r4, [sp, #4]
 8008294:	9405      	str	r4, [sp, #20]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	2a00      	cmp	r2, #0
 800829a:	d00a      	beq.n	80082b2 <_scanf_float+0x62>
 800829c:	6833      	ldr	r3, [r6, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b4e      	cmp	r3, #78	; 0x4e
 80082a2:	d844      	bhi.n	800832e <_scanf_float+0xde>
 80082a4:	0018      	movs	r0, r3
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d82c      	bhi.n	8008304 <_scanf_float+0xb4>
 80082aa:	382b      	subs	r0, #43	; 0x2b
 80082ac:	b2c1      	uxtb	r1, r0
 80082ae:	290e      	cmp	r1, #14
 80082b0:	d92a      	bls.n	8008308 <_scanf_float+0xb8>
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <_scanf_float+0x70>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	4aa3      	ldr	r2, [pc, #652]	; (8008548 <_scanf_float+0x2f8>)
 80082bc:	4013      	ands	r3, r2
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d900      	bls.n	80082ca <_scanf_float+0x7a>
 80082c8:	e0f9      	b.n	80084be <_scanf_float+0x26e>
 80082ca:	24be      	movs	r4, #190	; 0xbe
 80082cc:	0064      	lsls	r4, r4, #1
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	429d      	cmp	r5, r3
 80082d2:	d900      	bls.n	80082d6 <_scanf_float+0x86>
 80082d4:	e0e9      	b.n	80084aa <_scanf_float+0x25a>
 80082d6:	2301      	movs	r3, #1
 80082d8:	9303      	str	r3, [sp, #12]
 80082da:	e183      	b.n	80085e4 <_scanf_float+0x394>
 80082dc:	0018      	movs	r0, r3
 80082de:	3861      	subs	r0, #97	; 0x61
 80082e0:	280d      	cmp	r0, #13
 80082e2:	d8e6      	bhi.n	80082b2 <_scanf_float+0x62>
 80082e4:	f7f7 ff22 	bl	800012c <__gnu_thumb1_case_shi>
 80082e8:	ffe50083 	.word	0xffe50083
 80082ec:	ffe5ffe5 	.word	0xffe5ffe5
 80082f0:	00a200b6 	.word	0x00a200b6
 80082f4:	ffe5ffe5 	.word	0xffe5ffe5
 80082f8:	ffe50089 	.word	0xffe50089
 80082fc:	ffe5ffe5 	.word	0xffe5ffe5
 8008300:	0065ffe5 	.word	0x0065ffe5
 8008304:	3841      	subs	r0, #65	; 0x41
 8008306:	e7eb      	b.n	80082e0 <_scanf_float+0x90>
 8008308:	280e      	cmp	r0, #14
 800830a:	d8d2      	bhi.n	80082b2 <_scanf_float+0x62>
 800830c:	f7f7 ff0e 	bl	800012c <__gnu_thumb1_case_shi>
 8008310:	ffd1004b 	.word	0xffd1004b
 8008314:	0098004b 	.word	0x0098004b
 8008318:	0020ffd1 	.word	0x0020ffd1
 800831c:	00400040 	.word	0x00400040
 8008320:	00400040 	.word	0x00400040
 8008324:	00400040 	.word	0x00400040
 8008328:	00400040 	.word	0x00400040
 800832c:	0040      	.short	0x0040
 800832e:	2b6e      	cmp	r3, #110	; 0x6e
 8008330:	d809      	bhi.n	8008346 <_scanf_float+0xf6>
 8008332:	2b60      	cmp	r3, #96	; 0x60
 8008334:	d8d2      	bhi.n	80082dc <_scanf_float+0x8c>
 8008336:	2b54      	cmp	r3, #84	; 0x54
 8008338:	d07d      	beq.n	8008436 <_scanf_float+0x1e6>
 800833a:	2b59      	cmp	r3, #89	; 0x59
 800833c:	d1b9      	bne.n	80082b2 <_scanf_float+0x62>
 800833e:	2c07      	cmp	r4, #7
 8008340:	d1b7      	bne.n	80082b2 <_scanf_float+0x62>
 8008342:	2408      	movs	r4, #8
 8008344:	e02c      	b.n	80083a0 <_scanf_float+0x150>
 8008346:	2b74      	cmp	r3, #116	; 0x74
 8008348:	d075      	beq.n	8008436 <_scanf_float+0x1e6>
 800834a:	2b79      	cmp	r3, #121	; 0x79
 800834c:	d0f7      	beq.n	800833e <_scanf_float+0xee>
 800834e:	e7b0      	b.n	80082b2 <_scanf_float+0x62>
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	05c8      	lsls	r0, r1, #23
 8008354:	d51c      	bpl.n	8008390 <_scanf_float+0x140>
 8008356:	2380      	movs	r3, #128	; 0x80
 8008358:	4399      	bics	r1, r3
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	6039      	str	r1, [r7, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	9b06      	ldr	r3, [sp, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <_scanf_float+0x120>
 8008368:	3b01      	subs	r3, #1
 800836a:	3201      	adds	r2, #1
 800836c:	9306      	str	r3, [sp, #24]
 800836e:	60ba      	str	r2, [r7, #8]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	3b01      	subs	r3, #1
 8008374:	60bb      	str	r3, [r7, #8]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3301      	adds	r3, #1
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	6873      	ldr	r3, [r6, #4]
 800837e:	3b01      	subs	r3, #1
 8008380:	6073      	str	r3, [r6, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	dc00      	bgt.n	8008388 <_scanf_float+0x138>
 8008386:	e086      	b.n	8008496 <_scanf_float+0x246>
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	e782      	b.n	8008296 <_scanf_float+0x46>
 8008390:	9a03      	ldr	r2, [sp, #12]
 8008392:	1912      	adds	r2, r2, r4
 8008394:	2a00      	cmp	r2, #0
 8008396:	d18c      	bne.n	80082b2 <_scanf_float+0x62>
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	496c      	ldr	r1, [pc, #432]	; (800854c <_scanf_float+0x2fc>)
 800839c:	400a      	ands	r2, r1
 800839e:	603a      	str	r2, [r7, #0]
 80083a0:	702b      	strb	r3, [r5, #0]
 80083a2:	3501      	adds	r5, #1
 80083a4:	e7e4      	b.n	8008370 <_scanf_float+0x120>
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	420a      	tst	r2, r1
 80083ac:	d081      	beq.n	80082b2 <_scanf_float+0x62>
 80083ae:	438a      	bics	r2, r1
 80083b0:	e7f5      	b.n	800839e <_scanf_float+0x14e>
 80083b2:	9a03      	ldr	r2, [sp, #12]
 80083b4:	2a00      	cmp	r2, #0
 80083b6:	d10f      	bne.n	80083d8 <_scanf_float+0x188>
 80083b8:	9a01      	ldr	r2, [sp, #4]
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d10f      	bne.n	80083de <_scanf_float+0x18e>
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	21e0      	movs	r1, #224	; 0xe0
 80083c2:	0010      	movs	r0, r2
 80083c4:	00c9      	lsls	r1, r1, #3
 80083c6:	4008      	ands	r0, r1
 80083c8:	4288      	cmp	r0, r1
 80083ca:	d108      	bne.n	80083de <_scanf_float+0x18e>
 80083cc:	4960      	ldr	r1, [pc, #384]	; (8008550 <_scanf_float+0x300>)
 80083ce:	400a      	ands	r2, r1
 80083d0:	603a      	str	r2, [r7, #0]
 80083d2:	2201      	movs	r2, #1
 80083d4:	9203      	str	r2, [sp, #12]
 80083d6:	e7e3      	b.n	80083a0 <_scanf_float+0x150>
 80083d8:	9a03      	ldr	r2, [sp, #12]
 80083da:	2a02      	cmp	r2, #2
 80083dc:	d059      	beq.n	8008492 <_scanf_float+0x242>
 80083de:	2c01      	cmp	r4, #1
 80083e0:	d002      	beq.n	80083e8 <_scanf_float+0x198>
 80083e2:	2c04      	cmp	r4, #4
 80083e4:	d000      	beq.n	80083e8 <_scanf_float+0x198>
 80083e6:	e764      	b.n	80082b2 <_scanf_float+0x62>
 80083e8:	3401      	adds	r4, #1
 80083ea:	b2e4      	uxtb	r4, r4
 80083ec:	e7d8      	b.n	80083a0 <_scanf_float+0x150>
 80083ee:	9a03      	ldr	r2, [sp, #12]
 80083f0:	2a01      	cmp	r2, #1
 80083f2:	d000      	beq.n	80083f6 <_scanf_float+0x1a6>
 80083f4:	e75d      	b.n	80082b2 <_scanf_float+0x62>
 80083f6:	2202      	movs	r2, #2
 80083f8:	e7ec      	b.n	80083d4 <_scanf_float+0x184>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	d110      	bne.n	8008420 <_scanf_float+0x1d0>
 80083fe:	9a01      	ldr	r2, [sp, #4]
 8008400:	2a00      	cmp	r2, #0
 8008402:	d000      	beq.n	8008406 <_scanf_float+0x1b6>
 8008404:	e758      	b.n	80082b8 <_scanf_float+0x68>
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	21e0      	movs	r1, #224	; 0xe0
 800840a:	0010      	movs	r0, r2
 800840c:	00c9      	lsls	r1, r1, #3
 800840e:	4008      	ands	r0, r1
 8008410:	4288      	cmp	r0, r1
 8008412:	d000      	beq.n	8008416 <_scanf_float+0x1c6>
 8008414:	e754      	b.n	80082c0 <_scanf_float+0x70>
 8008416:	494e      	ldr	r1, [pc, #312]	; (8008550 <_scanf_float+0x300>)
 8008418:	3401      	adds	r4, #1
 800841a:	400a      	ands	r2, r1
 800841c:	603a      	str	r2, [r7, #0]
 800841e:	e7bf      	b.n	80083a0 <_scanf_float+0x150>
 8008420:	21fd      	movs	r1, #253	; 0xfd
 8008422:	1ee2      	subs	r2, r4, #3
 8008424:	420a      	tst	r2, r1
 8008426:	d000      	beq.n	800842a <_scanf_float+0x1da>
 8008428:	e743      	b.n	80082b2 <_scanf_float+0x62>
 800842a:	e7dd      	b.n	80083e8 <_scanf_float+0x198>
 800842c:	2c02      	cmp	r4, #2
 800842e:	d000      	beq.n	8008432 <_scanf_float+0x1e2>
 8008430:	e73f      	b.n	80082b2 <_scanf_float+0x62>
 8008432:	2403      	movs	r4, #3
 8008434:	e7b4      	b.n	80083a0 <_scanf_float+0x150>
 8008436:	2c06      	cmp	r4, #6
 8008438:	d000      	beq.n	800843c <_scanf_float+0x1ec>
 800843a:	e73a      	b.n	80082b2 <_scanf_float+0x62>
 800843c:	2407      	movs	r4, #7
 800843e:	e7af      	b.n	80083a0 <_scanf_float+0x150>
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	0591      	lsls	r1, r2, #22
 8008444:	d400      	bmi.n	8008448 <_scanf_float+0x1f8>
 8008446:	e734      	b.n	80082b2 <_scanf_float+0x62>
 8008448:	4942      	ldr	r1, [pc, #264]	; (8008554 <_scanf_float+0x304>)
 800844a:	400a      	ands	r2, r1
 800844c:	603a      	str	r2, [r7, #0]
 800844e:	9a01      	ldr	r2, [sp, #4]
 8008450:	9205      	str	r2, [sp, #20]
 8008452:	e7a5      	b.n	80083a0 <_scanf_float+0x150>
 8008454:	21a0      	movs	r1, #160	; 0xa0
 8008456:	2080      	movs	r0, #128	; 0x80
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	00c9      	lsls	r1, r1, #3
 800845c:	4011      	ands	r1, r2
 800845e:	00c0      	lsls	r0, r0, #3
 8008460:	4281      	cmp	r1, r0
 8008462:	d006      	beq.n	8008472 <_scanf_float+0x222>
 8008464:	4202      	tst	r2, r0
 8008466:	d100      	bne.n	800846a <_scanf_float+0x21a>
 8008468:	e723      	b.n	80082b2 <_scanf_float+0x62>
 800846a:	9901      	ldr	r1, [sp, #4]
 800846c:	2900      	cmp	r1, #0
 800846e:	d100      	bne.n	8008472 <_scanf_float+0x222>
 8008470:	e726      	b.n	80082c0 <_scanf_float+0x70>
 8008472:	0591      	lsls	r1, r2, #22
 8008474:	d404      	bmi.n	8008480 <_scanf_float+0x230>
 8008476:	9901      	ldr	r1, [sp, #4]
 8008478:	9805      	ldr	r0, [sp, #20]
 800847a:	9509      	str	r5, [sp, #36]	; 0x24
 800847c:	1a09      	subs	r1, r1, r0
 800847e:	9108      	str	r1, [sp, #32]
 8008480:	4933      	ldr	r1, [pc, #204]	; (8008550 <_scanf_float+0x300>)
 8008482:	400a      	ands	r2, r1
 8008484:	21c0      	movs	r1, #192	; 0xc0
 8008486:	0049      	lsls	r1, r1, #1
 8008488:	430a      	orrs	r2, r1
 800848a:	603a      	str	r2, [r7, #0]
 800848c:	2200      	movs	r2, #0
 800848e:	9201      	str	r2, [sp, #4]
 8008490:	e786      	b.n	80083a0 <_scanf_float+0x150>
 8008492:	2203      	movs	r2, #3
 8008494:	e79e      	b.n	80083d4 <_scanf_float+0x184>
 8008496:	23c0      	movs	r3, #192	; 0xc0
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	0031      	movs	r1, r6
 800849c:	58fb      	ldr	r3, [r7, r3]
 800849e:	9802      	ldr	r0, [sp, #8]
 80084a0:	4798      	blx	r3
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d100      	bne.n	80084a8 <_scanf_float+0x258>
 80084a6:	e6f6      	b.n	8008296 <_scanf_float+0x46>
 80084a8:	e703      	b.n	80082b2 <_scanf_float+0x62>
 80084aa:	3d01      	subs	r5, #1
 80084ac:	593b      	ldr	r3, [r7, r4]
 80084ae:	0032      	movs	r2, r6
 80084b0:	7829      	ldrb	r1, [r5, #0]
 80084b2:	9802      	ldr	r0, [sp, #8]
 80084b4:	4798      	blx	r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	e707      	b.n	80082ce <_scanf_float+0x7e>
 80084be:	1e63      	subs	r3, r4, #1
 80084c0:	2b06      	cmp	r3, #6
 80084c2:	d80e      	bhi.n	80084e2 <_scanf_float+0x292>
 80084c4:	9503      	str	r5, [sp, #12]
 80084c6:	2c02      	cmp	r4, #2
 80084c8:	d920      	bls.n	800850c <_scanf_float+0x2bc>
 80084ca:	1b63      	subs	r3, r4, r5
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	9306      	str	r3, [sp, #24]
 80084d0:	9b03      	ldr	r3, [sp, #12]
 80084d2:	9a06      	ldr	r2, [sp, #24]
 80084d4:	189b      	adds	r3, r3, r2
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d827      	bhi.n	800852c <_scanf_float+0x2dc>
 80084dc:	3c03      	subs	r4, #3
 80084de:	b2e4      	uxtb	r4, r4
 80084e0:	1b2d      	subs	r5, r5, r4
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	05da      	lsls	r2, r3, #23
 80084e6:	d552      	bpl.n	800858e <_scanf_float+0x33e>
 80084e8:	055b      	lsls	r3, r3, #21
 80084ea:	d535      	bpl.n	8008558 <_scanf_float+0x308>
 80084ec:	24be      	movs	r4, #190	; 0xbe
 80084ee:	0064      	lsls	r4, r4, #1
 80084f0:	9b04      	ldr	r3, [sp, #16]
 80084f2:	429d      	cmp	r5, r3
 80084f4:	d800      	bhi.n	80084f8 <_scanf_float+0x2a8>
 80084f6:	e6ee      	b.n	80082d6 <_scanf_float+0x86>
 80084f8:	3d01      	subs	r5, #1
 80084fa:	593b      	ldr	r3, [r7, r4]
 80084fc:	0032      	movs	r2, r6
 80084fe:	7829      	ldrb	r1, [r5, #0]
 8008500:	9802      	ldr	r0, [sp, #8]
 8008502:	4798      	blx	r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	3b01      	subs	r3, #1
 8008508:	613b      	str	r3, [r7, #16]
 800850a:	e7f1      	b.n	80084f0 <_scanf_float+0x2a0>
 800850c:	24be      	movs	r4, #190	; 0xbe
 800850e:	0064      	lsls	r4, r4, #1
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	429d      	cmp	r5, r3
 8008514:	d800      	bhi.n	8008518 <_scanf_float+0x2c8>
 8008516:	e6de      	b.n	80082d6 <_scanf_float+0x86>
 8008518:	3d01      	subs	r5, #1
 800851a:	593b      	ldr	r3, [r7, r4]
 800851c:	0032      	movs	r2, r6
 800851e:	7829      	ldrb	r1, [r5, #0]
 8008520:	9802      	ldr	r0, [sp, #8]
 8008522:	4798      	blx	r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	3b01      	subs	r3, #1
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	e7f1      	b.n	8008510 <_scanf_float+0x2c0>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	0032      	movs	r2, r6
 8008530:	3b01      	subs	r3, #1
 8008532:	7819      	ldrb	r1, [r3, #0]
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	23be      	movs	r3, #190	; 0xbe
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	58fb      	ldr	r3, [r7, r3]
 800853c:	9802      	ldr	r0, [sp, #8]
 800853e:	4798      	blx	r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3b01      	subs	r3, #1
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	e7c3      	b.n	80084d0 <_scanf_float+0x280>
 8008548:	fffffeff 	.word	0xfffffeff
 800854c:	fffffe7f 	.word	0xfffffe7f
 8008550:	fffff87f 	.word	0xfffff87f
 8008554:	fffffd7f 	.word	0xfffffd7f
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	1e6c      	subs	r4, r5, #1
 800855c:	7821      	ldrb	r1, [r4, #0]
 800855e:	3b01      	subs	r3, #1
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	2965      	cmp	r1, #101	; 0x65
 8008564:	d00c      	beq.n	8008580 <_scanf_float+0x330>
 8008566:	2945      	cmp	r1, #69	; 0x45
 8008568:	d00a      	beq.n	8008580 <_scanf_float+0x330>
 800856a:	23be      	movs	r3, #190	; 0xbe
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	58fb      	ldr	r3, [r7, r3]
 8008570:	0032      	movs	r2, r6
 8008572:	9802      	ldr	r0, [sp, #8]
 8008574:	4798      	blx	r3
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1eac      	subs	r4, r5, #2
 800857a:	3b01      	subs	r3, #1
 800857c:	7821      	ldrb	r1, [r4, #0]
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	23be      	movs	r3, #190	; 0xbe
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	0032      	movs	r2, r6
 8008586:	58fb      	ldr	r3, [r7, r3]
 8008588:	9802      	ldr	r0, [sp, #8]
 800858a:	4798      	blx	r3
 800858c:	0025      	movs	r5, r4
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	2310      	movs	r3, #16
 8008592:	0011      	movs	r1, r2
 8008594:	4019      	ands	r1, r3
 8008596:	9103      	str	r1, [sp, #12]
 8008598:	421a      	tst	r2, r3
 800859a:	d15b      	bne.n	8008654 <_scanf_float+0x404>
 800859c:	22c0      	movs	r2, #192	; 0xc0
 800859e:	7029      	strb	r1, [r5, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	00d2      	lsls	r2, r2, #3
 80085a4:	4013      	ands	r3, r2
 80085a6:	2280      	movs	r2, #128	; 0x80
 80085a8:	00d2      	lsls	r2, r2, #3
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d11d      	bne.n	80085ea <_scanf_float+0x39a>
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	9a01      	ldr	r2, [sp, #4]
 80085b2:	9901      	ldr	r1, [sp, #4]
 80085b4:	1a9a      	subs	r2, r3, r2
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d124      	bne.n	8008604 <_scanf_float+0x3b4>
 80085ba:	2200      	movs	r2, #0
 80085bc:	9904      	ldr	r1, [sp, #16]
 80085be:	9802      	ldr	r0, [sp, #8]
 80085c0:	f002 fcfa 	bl	800afb8 <_strtod_r>
 80085c4:	9b07      	ldr	r3, [sp, #28]
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	0004      	movs	r4, r0
 80085ca:	000d      	movs	r5, r1
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	0791      	lsls	r1, r2, #30
 80085d0:	d525      	bpl.n	800861e <_scanf_float+0x3ce>
 80085d2:	9907      	ldr	r1, [sp, #28]
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	600a      	str	r2, [r1, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	601c      	str	r4, [r3, #0]
 80085dc:	605d      	str	r5, [r3, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	9803      	ldr	r0, [sp, #12]
 80085e6:	b00b      	add	sp, #44	; 0x2c
 80085e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ea:	9b08      	ldr	r3, [sp, #32]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0e4      	beq.n	80085ba <_scanf_float+0x36a>
 80085f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f2:	9a03      	ldr	r2, [sp, #12]
 80085f4:	1c59      	adds	r1, r3, #1
 80085f6:	9802      	ldr	r0, [sp, #8]
 80085f8:	230a      	movs	r3, #10
 80085fa:	f002 fd6b 	bl	800b0d4 <_strtol_r>
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008602:	1ac2      	subs	r2, r0, r3
 8008604:	003b      	movs	r3, r7
 8008606:	3370      	adds	r3, #112	; 0x70
 8008608:	33ff      	adds	r3, #255	; 0xff
 800860a:	429d      	cmp	r5, r3
 800860c:	d302      	bcc.n	8008614 <_scanf_float+0x3c4>
 800860e:	003d      	movs	r5, r7
 8008610:	356f      	adds	r5, #111	; 0x6f
 8008612:	35ff      	adds	r5, #255	; 0xff
 8008614:	0028      	movs	r0, r5
 8008616:	4910      	ldr	r1, [pc, #64]	; (8008658 <_scanf_float+0x408>)
 8008618:	f000 f92a 	bl	8008870 <siprintf>
 800861c:	e7cd      	b.n	80085ba <_scanf_float+0x36a>
 800861e:	1d19      	adds	r1, r3, #4
 8008620:	0752      	lsls	r2, r2, #29
 8008622:	d502      	bpl.n	800862a <_scanf_float+0x3da>
 8008624:	9a07      	ldr	r2, [sp, #28]
 8008626:	6011      	str	r1, [r2, #0]
 8008628:	e7d6      	b.n	80085d8 <_scanf_float+0x388>
 800862a:	9a07      	ldr	r2, [sp, #28]
 800862c:	0020      	movs	r0, r4
 800862e:	6011      	str	r1, [r2, #0]
 8008630:	681e      	ldr	r6, [r3, #0]
 8008632:	0022      	movs	r2, r4
 8008634:	002b      	movs	r3, r5
 8008636:	0029      	movs	r1, r5
 8008638:	f7fa faae 	bl	8002b98 <__aeabi_dcmpun>
 800863c:	2800      	cmp	r0, #0
 800863e:	d004      	beq.n	800864a <_scanf_float+0x3fa>
 8008640:	4806      	ldr	r0, [pc, #24]	; (800865c <_scanf_float+0x40c>)
 8008642:	f000 fa31 	bl	8008aa8 <nanf>
 8008646:	6030      	str	r0, [r6, #0]
 8008648:	e7c9      	b.n	80085de <_scanf_float+0x38e>
 800864a:	0020      	movs	r0, r4
 800864c:	0029      	movs	r1, r5
 800864e:	f7fa fb95 	bl	8002d7c <__aeabi_d2f>
 8008652:	e7f8      	b.n	8008646 <_scanf_float+0x3f6>
 8008654:	2300      	movs	r3, #0
 8008656:	e63f      	b.n	80082d8 <_scanf_float+0x88>
 8008658:	0800d044 	.word	0x0800d044
 800865c:	0800d3d5 	.word	0x0800d3d5

08008660 <std>:
 8008660:	2300      	movs	r3, #0
 8008662:	b510      	push	{r4, lr}
 8008664:	0004      	movs	r4, r0
 8008666:	6003      	str	r3, [r0, #0]
 8008668:	6043      	str	r3, [r0, #4]
 800866a:	6083      	str	r3, [r0, #8]
 800866c:	8181      	strh	r1, [r0, #12]
 800866e:	6643      	str	r3, [r0, #100]	; 0x64
 8008670:	81c2      	strh	r2, [r0, #14]
 8008672:	6103      	str	r3, [r0, #16]
 8008674:	6143      	str	r3, [r0, #20]
 8008676:	6183      	str	r3, [r0, #24]
 8008678:	0019      	movs	r1, r3
 800867a:	2208      	movs	r2, #8
 800867c:	305c      	adds	r0, #92	; 0x5c
 800867e:	f000 f976 	bl	800896e <memset>
 8008682:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <std+0x50>)
 8008684:	6224      	str	r4, [r4, #32]
 8008686:	6263      	str	r3, [r4, #36]	; 0x24
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <std+0x54>)
 800868a:	62a3      	str	r3, [r4, #40]	; 0x28
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <std+0x58>)
 800868e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <std+0x5c>)
 8008692:	6323      	str	r3, [r4, #48]	; 0x30
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <std+0x60>)
 8008696:	429c      	cmp	r4, r3
 8008698:	d005      	beq.n	80086a6 <std+0x46>
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <std+0x64>)
 800869c:	429c      	cmp	r4, r3
 800869e:	d002      	beq.n	80086a6 <std+0x46>
 80086a0:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <std+0x68>)
 80086a2:	429c      	cmp	r4, r3
 80086a4:	d103      	bne.n	80086ae <std+0x4e>
 80086a6:	0020      	movs	r0, r4
 80086a8:	3058      	adds	r0, #88	; 0x58
 80086aa:	f000 f9e5 	bl	8008a78 <__retarget_lock_init_recursive>
 80086ae:	bd10      	pop	{r4, pc}
 80086b0:	080088b1 	.word	0x080088b1
 80086b4:	080088d9 	.word	0x080088d9
 80086b8:	08008911 	.word	0x08008911
 80086bc:	0800893d 	.word	0x0800893d
 80086c0:	2000062c 	.word	0x2000062c
 80086c4:	20000694 	.word	0x20000694
 80086c8:	200006fc 	.word	0x200006fc

080086cc <stdio_exit_handler>:
 80086cc:	b510      	push	{r4, lr}
 80086ce:	4a03      	ldr	r2, [pc, #12]	; (80086dc <stdio_exit_handler+0x10>)
 80086d0:	4903      	ldr	r1, [pc, #12]	; (80086e0 <stdio_exit_handler+0x14>)
 80086d2:	4804      	ldr	r0, [pc, #16]	; (80086e4 <stdio_exit_handler+0x18>)
 80086d4:	f000 f86c 	bl	80087b0 <_fwalk_sglue>
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	46c0      	nop			; (mov r8, r8)
 80086dc:	20000010 	.word	0x20000010
 80086e0:	0800b73d 	.word	0x0800b73d
 80086e4:	2000001c 	.word	0x2000001c

080086e8 <cleanup_stdio>:
 80086e8:	6841      	ldr	r1, [r0, #4]
 80086ea:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <cleanup_stdio+0x30>)
 80086ec:	b510      	push	{r4, lr}
 80086ee:	0004      	movs	r4, r0
 80086f0:	4299      	cmp	r1, r3
 80086f2:	d001      	beq.n	80086f8 <cleanup_stdio+0x10>
 80086f4:	f003 f822 	bl	800b73c <_fflush_r>
 80086f8:	68a1      	ldr	r1, [r4, #8]
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <cleanup_stdio+0x34>)
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <cleanup_stdio+0x1e>
 8008700:	0020      	movs	r0, r4
 8008702:	f003 f81b 	bl	800b73c <_fflush_r>
 8008706:	68e1      	ldr	r1, [r4, #12]
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <cleanup_stdio+0x38>)
 800870a:	4299      	cmp	r1, r3
 800870c:	d002      	beq.n	8008714 <cleanup_stdio+0x2c>
 800870e:	0020      	movs	r0, r4
 8008710:	f003 f814 	bl	800b73c <_fflush_r>
 8008714:	bd10      	pop	{r4, pc}
 8008716:	46c0      	nop			; (mov r8, r8)
 8008718:	2000062c 	.word	0x2000062c
 800871c:	20000694 	.word	0x20000694
 8008720:	200006fc 	.word	0x200006fc

08008724 <global_stdio_init.part.0>:
 8008724:	b510      	push	{r4, lr}
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <global_stdio_init.part.0+0x28>)
 8008728:	4a09      	ldr	r2, [pc, #36]	; (8008750 <global_stdio_init.part.0+0x2c>)
 800872a:	2104      	movs	r1, #4
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	4809      	ldr	r0, [pc, #36]	; (8008754 <global_stdio_init.part.0+0x30>)
 8008730:	2200      	movs	r2, #0
 8008732:	f7ff ff95 	bl	8008660 <std>
 8008736:	2201      	movs	r2, #1
 8008738:	2109      	movs	r1, #9
 800873a:	4807      	ldr	r0, [pc, #28]	; (8008758 <global_stdio_init.part.0+0x34>)
 800873c:	f7ff ff90 	bl	8008660 <std>
 8008740:	2202      	movs	r2, #2
 8008742:	2112      	movs	r1, #18
 8008744:	4805      	ldr	r0, [pc, #20]	; (800875c <global_stdio_init.part.0+0x38>)
 8008746:	f7ff ff8b 	bl	8008660 <std>
 800874a:	bd10      	pop	{r4, pc}
 800874c:	20000764 	.word	0x20000764
 8008750:	080086cd 	.word	0x080086cd
 8008754:	2000062c 	.word	0x2000062c
 8008758:	20000694 	.word	0x20000694
 800875c:	200006fc 	.word	0x200006fc

08008760 <__sfp_lock_acquire>:
 8008760:	b510      	push	{r4, lr}
 8008762:	4802      	ldr	r0, [pc, #8]	; (800876c <__sfp_lock_acquire+0xc>)
 8008764:	f000 f989 	bl	8008a7a <__retarget_lock_acquire_recursive>
 8008768:	bd10      	pop	{r4, pc}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	2000076d 	.word	0x2000076d

08008770 <__sfp_lock_release>:
 8008770:	b510      	push	{r4, lr}
 8008772:	4802      	ldr	r0, [pc, #8]	; (800877c <__sfp_lock_release+0xc>)
 8008774:	f000 f982 	bl	8008a7c <__retarget_lock_release_recursive>
 8008778:	bd10      	pop	{r4, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	2000076d 	.word	0x2000076d

08008780 <__sinit>:
 8008780:	b510      	push	{r4, lr}
 8008782:	0004      	movs	r4, r0
 8008784:	f7ff ffec 	bl	8008760 <__sfp_lock_acquire>
 8008788:	6a23      	ldr	r3, [r4, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <__sinit+0x14>
 800878e:	f7ff ffef 	bl	8008770 <__sfp_lock_release>
 8008792:	bd10      	pop	{r4, pc}
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <__sinit+0x28>)
 8008796:	6223      	str	r3, [r4, #32]
 8008798:	4b04      	ldr	r3, [pc, #16]	; (80087ac <__sinit+0x2c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f6      	bne.n	800878e <__sinit+0xe>
 80087a0:	f7ff ffc0 	bl	8008724 <global_stdio_init.part.0>
 80087a4:	e7f3      	b.n	800878e <__sinit+0xe>
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	080086e9 	.word	0x080086e9
 80087ac:	20000764 	.word	0x20000764

080087b0 <_fwalk_sglue>:
 80087b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087b2:	0014      	movs	r4, r2
 80087b4:	2600      	movs	r6, #0
 80087b6:	9000      	str	r0, [sp, #0]
 80087b8:	9101      	str	r1, [sp, #4]
 80087ba:	68a5      	ldr	r5, [r4, #8]
 80087bc:	6867      	ldr	r7, [r4, #4]
 80087be:	3f01      	subs	r7, #1
 80087c0:	d504      	bpl.n	80087cc <_fwalk_sglue+0x1c>
 80087c2:	6824      	ldr	r4, [r4, #0]
 80087c4:	2c00      	cmp	r4, #0
 80087c6:	d1f8      	bne.n	80087ba <_fwalk_sglue+0xa>
 80087c8:	0030      	movs	r0, r6
 80087ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087cc:	89ab      	ldrh	r3, [r5, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d908      	bls.n	80087e4 <_fwalk_sglue+0x34>
 80087d2:	220e      	movs	r2, #14
 80087d4:	5eab      	ldrsh	r3, [r5, r2]
 80087d6:	3301      	adds	r3, #1
 80087d8:	d004      	beq.n	80087e4 <_fwalk_sglue+0x34>
 80087da:	0029      	movs	r1, r5
 80087dc:	9800      	ldr	r0, [sp, #0]
 80087de:	9b01      	ldr	r3, [sp, #4]
 80087e0:	4798      	blx	r3
 80087e2:	4306      	orrs	r6, r0
 80087e4:	3568      	adds	r5, #104	; 0x68
 80087e6:	e7ea      	b.n	80087be <_fwalk_sglue+0xe>

080087e8 <iprintf>:
 80087e8:	b40f      	push	{r0, r1, r2, r3}
 80087ea:	b507      	push	{r0, r1, r2, lr}
 80087ec:	4905      	ldr	r1, [pc, #20]	; (8008804 <iprintf+0x1c>)
 80087ee:	ab04      	add	r3, sp, #16
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	cb04      	ldmia	r3!, {r2}
 80087f4:	6881      	ldr	r1, [r0, #8]
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	f002 fdfa 	bl	800b3f0 <_vfiprintf_r>
 80087fc:	b003      	add	sp, #12
 80087fe:	bc08      	pop	{r3}
 8008800:	b004      	add	sp, #16
 8008802:	4718      	bx	r3
 8008804:	20000068 	.word	0x20000068

08008808 <sniprintf>:
 8008808:	b40c      	push	{r2, r3}
 800880a:	b530      	push	{r4, r5, lr}
 800880c:	4b17      	ldr	r3, [pc, #92]	; (800886c <sniprintf+0x64>)
 800880e:	000c      	movs	r4, r1
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	b09d      	sub	sp, #116	; 0x74
 8008814:	2900      	cmp	r1, #0
 8008816:	da08      	bge.n	800882a <sniprintf+0x22>
 8008818:	238b      	movs	r3, #139	; 0x8b
 800881a:	2001      	movs	r0, #1
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	4240      	negs	r0, r0
 8008820:	b01d      	add	sp, #116	; 0x74
 8008822:	bc30      	pop	{r4, r5}
 8008824:	bc08      	pop	{r3}
 8008826:	b002      	add	sp, #8
 8008828:	4718      	bx	r3
 800882a:	2382      	movs	r3, #130	; 0x82
 800882c:	466a      	mov	r2, sp
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	8293      	strh	r3, [r2, #20]
 8008832:	2300      	movs	r3, #0
 8008834:	9002      	str	r0, [sp, #8]
 8008836:	9006      	str	r0, [sp, #24]
 8008838:	4299      	cmp	r1, r3
 800883a:	d000      	beq.n	800883e <sniprintf+0x36>
 800883c:	1e4b      	subs	r3, r1, #1
 800883e:	9304      	str	r3, [sp, #16]
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	2301      	movs	r3, #1
 8008844:	466a      	mov	r2, sp
 8008846:	425b      	negs	r3, r3
 8008848:	82d3      	strh	r3, [r2, #22]
 800884a:	0028      	movs	r0, r5
 800884c:	ab21      	add	r3, sp, #132	; 0x84
 800884e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008850:	a902      	add	r1, sp, #8
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f002 fca4 	bl	800b1a0 <_svfiprintf_r>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	da01      	bge.n	8008860 <sniprintf+0x58>
 800885c:	238b      	movs	r3, #139	; 0x8b
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	2c00      	cmp	r4, #0
 8008862:	d0dd      	beq.n	8008820 <sniprintf+0x18>
 8008864:	2200      	movs	r2, #0
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	e7d9      	b.n	8008820 <sniprintf+0x18>
 800886c:	20000068 	.word	0x20000068

08008870 <siprintf>:
 8008870:	b40e      	push	{r1, r2, r3}
 8008872:	b500      	push	{lr}
 8008874:	490b      	ldr	r1, [pc, #44]	; (80088a4 <siprintf+0x34>)
 8008876:	b09c      	sub	sp, #112	; 0x70
 8008878:	ab1d      	add	r3, sp, #116	; 0x74
 800887a:	9002      	str	r0, [sp, #8]
 800887c:	9006      	str	r0, [sp, #24]
 800887e:	9107      	str	r1, [sp, #28]
 8008880:	9104      	str	r1, [sp, #16]
 8008882:	4809      	ldr	r0, [pc, #36]	; (80088a8 <siprintf+0x38>)
 8008884:	4909      	ldr	r1, [pc, #36]	; (80088ac <siprintf+0x3c>)
 8008886:	cb04      	ldmia	r3!, {r2}
 8008888:	9105      	str	r1, [sp, #20]
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	a902      	add	r1, sp, #8
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	f002 fc86 	bl	800b1a0 <_svfiprintf_r>
 8008894:	2200      	movs	r2, #0
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	701a      	strb	r2, [r3, #0]
 800889a:	b01c      	add	sp, #112	; 0x70
 800889c:	bc08      	pop	{r3}
 800889e:	b003      	add	sp, #12
 80088a0:	4718      	bx	r3
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	7fffffff 	.word	0x7fffffff
 80088a8:	20000068 	.word	0x20000068
 80088ac:	ffff0208 	.word	0xffff0208

080088b0 <__sread>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	000c      	movs	r4, r1
 80088b4:	250e      	movs	r5, #14
 80088b6:	5f49      	ldrsh	r1, [r1, r5]
 80088b8:	f000 f88c 	bl	80089d4 <_read_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	db03      	blt.n	80088c8 <__sread+0x18>
 80088c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088c2:	181b      	adds	r3, r3, r0
 80088c4:	6563      	str	r3, [r4, #84]	; 0x54
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	4a02      	ldr	r2, [pc, #8]	; (80088d4 <__sread+0x24>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	e7f9      	b.n	80088c6 <__sread+0x16>
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	ffffefff 	.word	0xffffefff

080088d8 <__swrite>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	001f      	movs	r7, r3
 80088dc:	898b      	ldrh	r3, [r1, #12]
 80088de:	0005      	movs	r5, r0
 80088e0:	000c      	movs	r4, r1
 80088e2:	0016      	movs	r6, r2
 80088e4:	05db      	lsls	r3, r3, #23
 80088e6:	d505      	bpl.n	80088f4 <__swrite+0x1c>
 80088e8:	230e      	movs	r3, #14
 80088ea:	5ec9      	ldrsh	r1, [r1, r3]
 80088ec:	2200      	movs	r2, #0
 80088ee:	2302      	movs	r3, #2
 80088f0:	f000 f85c 	bl	80089ac <_lseek_r>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	4a05      	ldr	r2, [pc, #20]	; (800890c <__swrite+0x34>)
 80088f8:	0028      	movs	r0, r5
 80088fa:	4013      	ands	r3, r2
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	0032      	movs	r2, r6
 8008900:	230e      	movs	r3, #14
 8008902:	5ee1      	ldrsh	r1, [r4, r3]
 8008904:	003b      	movs	r3, r7
 8008906:	f000 f879 	bl	80089fc <_write_r>
 800890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890c:	ffffefff 	.word	0xffffefff

08008910 <__sseek>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	000c      	movs	r4, r1
 8008914:	250e      	movs	r5, #14
 8008916:	5f49      	ldrsh	r1, [r1, r5]
 8008918:	f000 f848 	bl	80089ac <_lseek_r>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	1c42      	adds	r2, r0, #1
 8008920:	d103      	bne.n	800892a <__sseek+0x1a>
 8008922:	4a05      	ldr	r2, [pc, #20]	; (8008938 <__sseek+0x28>)
 8008924:	4013      	ands	r3, r2
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	2280      	movs	r2, #128	; 0x80
 800892c:	0152      	lsls	r2, r2, #5
 800892e:	4313      	orrs	r3, r2
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	6560      	str	r0, [r4, #84]	; 0x54
 8008934:	e7f8      	b.n	8008928 <__sseek+0x18>
 8008936:	46c0      	nop			; (mov r8, r8)
 8008938:	ffffefff 	.word	0xffffefff

0800893c <__sclose>:
 800893c:	b510      	push	{r4, lr}
 800893e:	230e      	movs	r3, #14
 8008940:	5ec9      	ldrsh	r1, [r1, r3]
 8008942:	f000 f821 	bl	8008988 <_close_r>
 8008946:	bd10      	pop	{r4, pc}

08008948 <memmove>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4288      	cmp	r0, r1
 800894c:	d902      	bls.n	8008954 <memmove+0xc>
 800894e:	188b      	adds	r3, r1, r2
 8008950:	4298      	cmp	r0, r3
 8008952:	d303      	bcc.n	800895c <memmove+0x14>
 8008954:	2300      	movs	r3, #0
 8008956:	e007      	b.n	8008968 <memmove+0x20>
 8008958:	5c8b      	ldrb	r3, [r1, r2]
 800895a:	5483      	strb	r3, [r0, r2]
 800895c:	3a01      	subs	r2, #1
 800895e:	d2fb      	bcs.n	8008958 <memmove+0x10>
 8008960:	bd10      	pop	{r4, pc}
 8008962:	5ccc      	ldrb	r4, [r1, r3]
 8008964:	54c4      	strb	r4, [r0, r3]
 8008966:	3301      	adds	r3, #1
 8008968:	429a      	cmp	r2, r3
 800896a:	d1fa      	bne.n	8008962 <memmove+0x1a>
 800896c:	e7f8      	b.n	8008960 <memmove+0x18>

0800896e <memset>:
 800896e:	0003      	movs	r3, r0
 8008970:	1882      	adds	r2, r0, r2
 8008972:	4293      	cmp	r3, r2
 8008974:	d100      	bne.n	8008978 <memset+0xa>
 8008976:	4770      	bx	lr
 8008978:	7019      	strb	r1, [r3, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	e7f9      	b.n	8008972 <memset+0x4>
	...

08008980 <_localeconv_r>:
 8008980:	4800      	ldr	r0, [pc, #0]	; (8008984 <_localeconv_r+0x4>)
 8008982:	4770      	bx	lr
 8008984:	2000015c 	.word	0x2000015c

08008988 <_close_r>:
 8008988:	2300      	movs	r3, #0
 800898a:	b570      	push	{r4, r5, r6, lr}
 800898c:	4d06      	ldr	r5, [pc, #24]	; (80089a8 <_close_r+0x20>)
 800898e:	0004      	movs	r4, r0
 8008990:	0008      	movs	r0, r1
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	f7fb fab7 	bl	8003f06 <_close>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d103      	bne.n	80089a4 <_close_r+0x1c>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d000      	beq.n	80089a4 <_close_r+0x1c>
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	bd70      	pop	{r4, r5, r6, pc}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	20000768 	.word	0x20000768

080089ac <_lseek_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	0004      	movs	r4, r0
 80089b0:	0008      	movs	r0, r1
 80089b2:	0011      	movs	r1, r2
 80089b4:	001a      	movs	r2, r3
 80089b6:	2300      	movs	r3, #0
 80089b8:	4d05      	ldr	r5, [pc, #20]	; (80089d0 <_lseek_r+0x24>)
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7fb fac4 	bl	8003f48 <_lseek>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d103      	bne.n	80089cc <_lseek_r+0x20>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d000      	beq.n	80089cc <_lseek_r+0x20>
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	20000768 	.word	0x20000768

080089d4 <_read_r>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	0004      	movs	r4, r0
 80089d8:	0008      	movs	r0, r1
 80089da:	0011      	movs	r1, r2
 80089dc:	001a      	movs	r2, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	4d05      	ldr	r5, [pc, #20]	; (80089f8 <_read_r+0x24>)
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7fb fa56 	bl	8003e94 <_read>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d103      	bne.n	80089f4 <_read_r+0x20>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d000      	beq.n	80089f4 <_read_r+0x20>
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	20000768 	.word	0x20000768

080089fc <_write_r>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	0004      	movs	r4, r0
 8008a00:	0008      	movs	r0, r1
 8008a02:	0011      	movs	r1, r2
 8008a04:	001a      	movs	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	4d05      	ldr	r5, [pc, #20]	; (8008a20 <_write_r+0x24>)
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f7fb fa5f 	bl	8003ece <_write>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d103      	bne.n	8008a1c <_write_r+0x20>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d000      	beq.n	8008a1c <_write_r+0x20>
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	20000768 	.word	0x20000768

08008a24 <__errno>:
 8008a24:	4b01      	ldr	r3, [pc, #4]	; (8008a2c <__errno+0x8>)
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	4770      	bx	lr
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	20000068 	.word	0x20000068

08008a30 <__libc_init_array>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	2600      	movs	r6, #0
 8008a34:	4c0c      	ldr	r4, [pc, #48]	; (8008a68 <__libc_init_array+0x38>)
 8008a36:	4d0d      	ldr	r5, [pc, #52]	; (8008a6c <__libc_init_array+0x3c>)
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	d109      	bne.n	8008a54 <__libc_init_array+0x24>
 8008a40:	2600      	movs	r6, #0
 8008a42:	f003 fc61 	bl	800c308 <_init>
 8008a46:	4c0a      	ldr	r4, [pc, #40]	; (8008a70 <__libc_init_array+0x40>)
 8008a48:	4d0a      	ldr	r5, [pc, #40]	; (8008a74 <__libc_init_array+0x44>)
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	42a6      	cmp	r6, r4
 8008a50:	d105      	bne.n	8008a5e <__libc_init_array+0x2e>
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	00b3      	lsls	r3, r6, #2
 8008a56:	58eb      	ldr	r3, [r5, r3]
 8008a58:	4798      	blx	r3
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	e7ee      	b.n	8008a3c <__libc_init_array+0xc>
 8008a5e:	00b3      	lsls	r3, r6, #2
 8008a60:	58eb      	ldr	r3, [r5, r3]
 8008a62:	4798      	blx	r3
 8008a64:	3601      	adds	r6, #1
 8008a66:	e7f2      	b.n	8008a4e <__libc_init_array+0x1e>
 8008a68:	0800d440 	.word	0x0800d440
 8008a6c:	0800d440 	.word	0x0800d440
 8008a70:	0800d444 	.word	0x0800d444
 8008a74:	0800d440 	.word	0x0800d440

08008a78 <__retarget_lock_init_recursive>:
 8008a78:	4770      	bx	lr

08008a7a <__retarget_lock_acquire_recursive>:
 8008a7a:	4770      	bx	lr

08008a7c <__retarget_lock_release_recursive>:
 8008a7c:	4770      	bx	lr

08008a7e <memchr>:
 8008a7e:	b2c9      	uxtb	r1, r1
 8008a80:	1882      	adds	r2, r0, r2
 8008a82:	4290      	cmp	r0, r2
 8008a84:	d101      	bne.n	8008a8a <memchr+0xc>
 8008a86:	2000      	movs	r0, #0
 8008a88:	4770      	bx	lr
 8008a8a:	7803      	ldrb	r3, [r0, #0]
 8008a8c:	428b      	cmp	r3, r1
 8008a8e:	d0fb      	beq.n	8008a88 <memchr+0xa>
 8008a90:	3001      	adds	r0, #1
 8008a92:	e7f6      	b.n	8008a82 <memchr+0x4>

08008a94 <memcpy>:
 8008a94:	2300      	movs	r3, #0
 8008a96:	b510      	push	{r4, lr}
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d100      	bne.n	8008a9e <memcpy+0xa>
 8008a9c:	bd10      	pop	{r4, pc}
 8008a9e:	5ccc      	ldrb	r4, [r1, r3]
 8008aa0:	54c4      	strb	r4, [r0, r3]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	e7f8      	b.n	8008a98 <memcpy+0x4>
	...

08008aa8 <nanf>:
 8008aa8:	4800      	ldr	r0, [pc, #0]	; (8008aac <nanf+0x4>)
 8008aaa:	4770      	bx	lr
 8008aac:	7fc00000 	.word	0x7fc00000

08008ab0 <quorem>:
 8008ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab2:	6902      	ldr	r2, [r0, #16]
 8008ab4:	690b      	ldr	r3, [r1, #16]
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	0007      	movs	r7, r0
 8008aba:	9104      	str	r1, [sp, #16]
 8008abc:	2000      	movs	r0, #0
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	db69      	blt.n	8008b96 <quorem+0xe6>
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	009c      	lsls	r4, r3, #2
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	000b      	movs	r3, r1
 8008aca:	3314      	adds	r3, #20
 8008acc:	9306      	str	r3, [sp, #24]
 8008ace:	191b      	adds	r3, r3, r4
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	003b      	movs	r3, r7
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	191c      	adds	r4, r3, r4
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	6826      	ldr	r6, [r4, #0]
 8008ade:	681d      	ldr	r5, [r3, #0]
 8008ae0:	0030      	movs	r0, r6
 8008ae2:	3501      	adds	r5, #1
 8008ae4:	0029      	movs	r1, r5
 8008ae6:	f7f7 fb2b 	bl	8000140 <__udivsi3>
 8008aea:	9002      	str	r0, [sp, #8]
 8008aec:	42ae      	cmp	r6, r5
 8008aee:	d329      	bcc.n	8008b44 <quorem+0x94>
 8008af0:	9b06      	ldr	r3, [sp, #24]
 8008af2:	2600      	movs	r6, #0
 8008af4:	469c      	mov	ip, r3
 8008af6:	9d03      	ldr	r5, [sp, #12]
 8008af8:	9606      	str	r6, [sp, #24]
 8008afa:	4662      	mov	r2, ip
 8008afc:	ca08      	ldmia	r2!, {r3}
 8008afe:	6828      	ldr	r0, [r5, #0]
 8008b00:	4694      	mov	ip, r2
 8008b02:	9a02      	ldr	r2, [sp, #8]
 8008b04:	b299      	uxth	r1, r3
 8008b06:	4351      	muls	r1, r2
 8008b08:	0c1b      	lsrs	r3, r3, #16
 8008b0a:	4353      	muls	r3, r2
 8008b0c:	1989      	adds	r1, r1, r6
 8008b0e:	0c0a      	lsrs	r2, r1, #16
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	9307      	str	r3, [sp, #28]
 8008b14:	0c1e      	lsrs	r6, r3, #16
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	b282      	uxth	r2, r0
 8008b1a:	18d2      	adds	r2, r2, r3
 8008b1c:	466b      	mov	r3, sp
 8008b1e:	b289      	uxth	r1, r1
 8008b20:	8b9b      	ldrh	r3, [r3, #28]
 8008b22:	1a52      	subs	r2, r2, r1
 8008b24:	0c01      	lsrs	r1, r0, #16
 8008b26:	1ac9      	subs	r1, r1, r3
 8008b28:	1413      	asrs	r3, r2, #16
 8008b2a:	18cb      	adds	r3, r1, r3
 8008b2c:	1419      	asrs	r1, r3, #16
 8008b2e:	b292      	uxth	r2, r2
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	4313      	orrs	r3, r2
 8008b34:	c508      	stmia	r5!, {r3}
 8008b36:	9b05      	ldr	r3, [sp, #20]
 8008b38:	9106      	str	r1, [sp, #24]
 8008b3a:	4563      	cmp	r3, ip
 8008b3c:	d2dd      	bcs.n	8008afa <quorem+0x4a>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d030      	beq.n	8008ba6 <quorem+0xf6>
 8008b44:	0038      	movs	r0, r7
 8008b46:	9904      	ldr	r1, [sp, #16]
 8008b48:	f001 fa2a 	bl	8009fa0 <__mcmp>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	db21      	blt.n	8008b94 <quorem+0xe4>
 8008b50:	0038      	movs	r0, r7
 8008b52:	2600      	movs	r6, #0
 8008b54:	9b02      	ldr	r3, [sp, #8]
 8008b56:	9c04      	ldr	r4, [sp, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	3014      	adds	r0, #20
 8008b5e:	3414      	adds	r4, #20
 8008b60:	6803      	ldr	r3, [r0, #0]
 8008b62:	cc02      	ldmia	r4!, {r1}
 8008b64:	b29d      	uxth	r5, r3
 8008b66:	19ad      	adds	r5, r5, r6
 8008b68:	b28a      	uxth	r2, r1
 8008b6a:	1aaa      	subs	r2, r5, r2
 8008b6c:	0c09      	lsrs	r1, r1, #16
 8008b6e:	0c1b      	lsrs	r3, r3, #16
 8008b70:	1a5b      	subs	r3, r3, r1
 8008b72:	1411      	asrs	r1, r2, #16
 8008b74:	185b      	adds	r3, r3, r1
 8008b76:	141e      	asrs	r6, r3, #16
 8008b78:	b292      	uxth	r2, r2
 8008b7a:	041b      	lsls	r3, r3, #16
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	c008      	stmia	r0!, {r3}
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	42a3      	cmp	r3, r4
 8008b84:	d2ec      	bcs.n	8008b60 <quorem+0xb0>
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	9a03      	ldr	r2, [sp, #12]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	18d3      	adds	r3, r2, r3
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d015      	beq.n	8008bc0 <quorem+0x110>
 8008b94:	9802      	ldr	r0, [sp, #8]
 8008b96:	b009      	add	sp, #36	; 0x24
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <quorem+0xfe>
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	3c04      	subs	r4, #4
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	d3f5      	bcc.n	8008b9a <quorem+0xea>
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	e7c7      	b.n	8008b44 <quorem+0x94>
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	d106      	bne.n	8008bc8 <quorem+0x118>
 8008bba:	9a01      	ldr	r2, [sp, #4]
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	9201      	str	r2, [sp, #4]
 8008bc0:	9a03      	ldr	r2, [sp, #12]
 8008bc2:	3b04      	subs	r3, #4
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d3f5      	bcc.n	8008bb4 <quorem+0x104>
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	e7e2      	b.n	8008b94 <quorem+0xe4>
	...

08008bd0 <_dtoa_r>:
 8008bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd2:	0014      	movs	r4, r2
 8008bd4:	001d      	movs	r5, r3
 8008bd6:	69c6      	ldr	r6, [r0, #28]
 8008bd8:	b09d      	sub	sp, #116	; 0x74
 8008bda:	9408      	str	r4, [sp, #32]
 8008bdc:	9509      	str	r5, [sp, #36]	; 0x24
 8008bde:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008be0:	9004      	str	r0, [sp, #16]
 8008be2:	2e00      	cmp	r6, #0
 8008be4:	d10f      	bne.n	8008c06 <_dtoa_r+0x36>
 8008be6:	2010      	movs	r0, #16
 8008be8:	f000 fe4a 	bl	8009880 <malloc>
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	1e02      	subs	r2, r0, #0
 8008bf0:	61d8      	str	r0, [r3, #28]
 8008bf2:	d104      	bne.n	8008bfe <_dtoa_r+0x2e>
 8008bf4:	21ef      	movs	r1, #239	; 0xef
 8008bf6:	4bc6      	ldr	r3, [pc, #792]	; (8008f10 <_dtoa_r+0x340>)
 8008bf8:	48c6      	ldr	r0, [pc, #792]	; (8008f14 <_dtoa_r+0x344>)
 8008bfa:	f002 fe9b 	bl	800b934 <__assert_func>
 8008bfe:	6046      	str	r6, [r0, #4]
 8008c00:	6086      	str	r6, [r0, #8]
 8008c02:	6006      	str	r6, [r0, #0]
 8008c04:	60c6      	str	r6, [r0, #12]
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	6819      	ldr	r1, [r3, #0]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d00b      	beq.n	8008c28 <_dtoa_r+0x58>
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	2301      	movs	r3, #1
 8008c14:	4093      	lsls	r3, r2
 8008c16:	604a      	str	r2, [r1, #4]
 8008c18:	608b      	str	r3, [r1, #8]
 8008c1a:	9804      	ldr	r0, [sp, #16]
 8008c1c:	f000 ff32 	bl	8009a84 <_Bfree>
 8008c20:	2200      	movs	r2, #0
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	da1e      	bge.n	8008c6a <_dtoa_r+0x9a>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	006b      	lsls	r3, r5, #1
 8008c32:	085b      	lsrs	r3, r3, #1
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c38:	4bb7      	ldr	r3, [pc, #732]	; (8008f18 <_dtoa_r+0x348>)
 8008c3a:	4ab7      	ldr	r2, [pc, #732]	; (8008f18 <_dtoa_r+0x348>)
 8008c3c:	403b      	ands	r3, r7
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d116      	bne.n	8008c70 <_dtoa_r+0xa0>
 8008c42:	4bb6      	ldr	r3, [pc, #728]	; (8008f1c <_dtoa_r+0x34c>)
 8008c44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	033b      	lsls	r3, r7, #12
 8008c4a:	0b1b      	lsrs	r3, r3, #12
 8008c4c:	4323      	orrs	r3, r4
 8008c4e:	d101      	bne.n	8008c54 <_dtoa_r+0x84>
 8008c50:	f000 fdb5 	bl	80097be <_dtoa_r+0xbee>
 8008c54:	4bb2      	ldr	r3, [pc, #712]	; (8008f20 <_dtoa_r+0x350>)
 8008c56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c58:	9306      	str	r3, [sp, #24]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d002      	beq.n	8008c64 <_dtoa_r+0x94>
 8008c5e:	4bb1      	ldr	r3, [pc, #708]	; (8008f24 <_dtoa_r+0x354>)
 8008c60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	9806      	ldr	r0, [sp, #24]
 8008c66:	b01d      	add	sp, #116	; 0x74
 8008c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	e7e2      	b.n	8008c36 <_dtoa_r+0x66>
 8008c70:	9a08      	ldr	r2, [sp, #32]
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	9210      	str	r2, [sp, #64]	; 0x40
 8008c76:	9311      	str	r3, [sp, #68]	; 0x44
 8008c78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f7f7 fbe4 	bl	800044c <__aeabi_dcmpeq>
 8008c84:	1e06      	subs	r6, r0, #0
 8008c86:	d009      	beq.n	8008c9c <_dtoa_r+0xcc>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4ba6      	ldr	r3, [pc, #664]	; (8008f28 <_dtoa_r+0x358>)
 8008c90:	9306      	str	r3, [sp, #24]
 8008c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0e5      	beq.n	8008c64 <_dtoa_r+0x94>
 8008c98:	4ba4      	ldr	r3, [pc, #656]	; (8008f2c <_dtoa_r+0x35c>)
 8008c9a:	e7e1      	b.n	8008c60 <_dtoa_r+0x90>
 8008c9c:	ab1a      	add	r3, sp, #104	; 0x68
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	ab1b      	add	r3, sp, #108	; 0x6c
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	9804      	ldr	r0, [sp, #16]
 8008ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008caa:	f001 fa95 	bl	800a1d8 <__d2b>
 8008cae:	007a      	lsls	r2, r7, #1
 8008cb0:	9005      	str	r0, [sp, #20]
 8008cb2:	0d52      	lsrs	r2, r2, #21
 8008cb4:	d100      	bne.n	8008cb8 <_dtoa_r+0xe8>
 8008cb6:	e07b      	b.n	8008db0 <_dtoa_r+0x1e0>
 8008cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cba:	9617      	str	r6, [sp, #92]	; 0x5c
 8008cbc:	0319      	lsls	r1, r3, #12
 8008cbe:	4b9c      	ldr	r3, [pc, #624]	; (8008f30 <_dtoa_r+0x360>)
 8008cc0:	0b09      	lsrs	r1, r1, #12
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	499b      	ldr	r1, [pc, #620]	; (8008f34 <_dtoa_r+0x364>)
 8008cc6:	1857      	adds	r7, r2, r1
 8008cc8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008cca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ccc:	0019      	movs	r1, r3
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4b99      	ldr	r3, [pc, #612]	; (8008f38 <_dtoa_r+0x368>)
 8008cd2:	f7f9 fbdf 	bl	8002494 <__aeabi_dsub>
 8008cd6:	4a99      	ldr	r2, [pc, #612]	; (8008f3c <_dtoa_r+0x36c>)
 8008cd8:	4b99      	ldr	r3, [pc, #612]	; (8008f40 <_dtoa_r+0x370>)
 8008cda:	f7f9 f919 	bl	8001f10 <__aeabi_dmul>
 8008cde:	4a99      	ldr	r2, [pc, #612]	; (8008f44 <_dtoa_r+0x374>)
 8008ce0:	4b99      	ldr	r3, [pc, #612]	; (8008f48 <_dtoa_r+0x378>)
 8008ce2:	f7f8 f9bb 	bl	800105c <__aeabi_dadd>
 8008ce6:	0004      	movs	r4, r0
 8008ce8:	0038      	movs	r0, r7
 8008cea:	000d      	movs	r5, r1
 8008cec:	f7f9 ffa8 	bl	8002c40 <__aeabi_i2d>
 8008cf0:	4a96      	ldr	r2, [pc, #600]	; (8008f4c <_dtoa_r+0x37c>)
 8008cf2:	4b97      	ldr	r3, [pc, #604]	; (8008f50 <_dtoa_r+0x380>)
 8008cf4:	f7f9 f90c 	bl	8001f10 <__aeabi_dmul>
 8008cf8:	0002      	movs	r2, r0
 8008cfa:	000b      	movs	r3, r1
 8008cfc:	0020      	movs	r0, r4
 8008cfe:	0029      	movs	r1, r5
 8008d00:	f7f8 f9ac 	bl	800105c <__aeabi_dadd>
 8008d04:	0004      	movs	r4, r0
 8008d06:	000d      	movs	r5, r1
 8008d08:	f7f9 ff64 	bl	8002bd4 <__aeabi_d2iz>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	9003      	str	r0, [sp, #12]
 8008d10:	2300      	movs	r3, #0
 8008d12:	0020      	movs	r0, r4
 8008d14:	0029      	movs	r1, r5
 8008d16:	f7f7 fb9f 	bl	8000458 <__aeabi_dcmplt>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d00b      	beq.n	8008d36 <_dtoa_r+0x166>
 8008d1e:	9803      	ldr	r0, [sp, #12]
 8008d20:	f7f9 ff8e 	bl	8002c40 <__aeabi_i2d>
 8008d24:	002b      	movs	r3, r5
 8008d26:	0022      	movs	r2, r4
 8008d28:	f7f7 fb90 	bl	800044c <__aeabi_dcmpeq>
 8008d2c:	4243      	negs	r3, r0
 8008d2e:	4158      	adcs	r0, r3
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	1a1b      	subs	r3, r3, r0
 8008d34:	9303      	str	r3, [sp, #12]
 8008d36:	2301      	movs	r3, #1
 8008d38:	9316      	str	r3, [sp, #88]	; 0x58
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	2b16      	cmp	r3, #22
 8008d3e:	d810      	bhi.n	8008d62 <_dtoa_r+0x192>
 8008d40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d44:	9a03      	ldr	r2, [sp, #12]
 8008d46:	4b83      	ldr	r3, [pc, #524]	; (8008f54 <_dtoa_r+0x384>)
 8008d48:	00d2      	lsls	r2, r2, #3
 8008d4a:	189b      	adds	r3, r3, r2
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f7f7 fb82 	bl	8000458 <__aeabi_dcmplt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d047      	beq.n	8008de8 <_dtoa_r+0x218>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9316      	str	r3, [sp, #88]	; 0x58
 8008d62:	2200      	movs	r2, #0
 8008d64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008d66:	920a      	str	r2, [sp, #40]	; 0x28
 8008d68:	1bdb      	subs	r3, r3, r7
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	d53e      	bpl.n	8008dec <_dtoa_r+0x21c>
 8008d6e:	2201      	movs	r2, #1
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	930a      	str	r3, [sp, #40]	; 0x28
 8008d74:	2300      	movs	r3, #0
 8008d76:	930c      	str	r3, [sp, #48]	; 0x30
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	db38      	blt.n	8008df0 <_dtoa_r+0x220>
 8008d7e:	9a03      	ldr	r2, [sp, #12]
 8008d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d82:	4694      	mov	ip, r2
 8008d84:	4463      	add	r3, ip
 8008d86:	930c      	str	r3, [sp, #48]	; 0x30
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d8c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d90:	2401      	movs	r4, #1
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d867      	bhi.n	8008e66 <_dtoa_r+0x296>
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	dd02      	ble.n	8008da0 <_dtoa_r+0x1d0>
 8008d9a:	2400      	movs	r4, #0
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	9322      	str	r3, [sp, #136]	; 0x88
 8008da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008da2:	1e98      	subs	r0, r3, #2
 8008da4:	2803      	cmp	r0, #3
 8008da6:	d867      	bhi.n	8008e78 <_dtoa_r+0x2a8>
 8008da8:	f7f7 f9b6 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008dac:	5b383a2b 	.word	0x5b383a2b
 8008db0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008db2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008db4:	18f6      	adds	r6, r6, r3
 8008db6:	4b68      	ldr	r3, [pc, #416]	; (8008f58 <_dtoa_r+0x388>)
 8008db8:	18f2      	adds	r2, r6, r3
 8008dba:	2a20      	cmp	r2, #32
 8008dbc:	dd0f      	ble.n	8008dde <_dtoa_r+0x20e>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	1a9b      	subs	r3, r3, r2
 8008dc2:	409f      	lsls	r7, r3
 8008dc4:	4b65      	ldr	r3, [pc, #404]	; (8008f5c <_dtoa_r+0x38c>)
 8008dc6:	0038      	movs	r0, r7
 8008dc8:	18f3      	adds	r3, r6, r3
 8008dca:	40dc      	lsrs	r4, r3
 8008dcc:	4320      	orrs	r0, r4
 8008dce:	f7f9 ff67 	bl	8002ca0 <__aeabi_ui2d>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	4b62      	ldr	r3, [pc, #392]	; (8008f60 <_dtoa_r+0x390>)
 8008dd6:	1e77      	subs	r7, r6, #1
 8008dd8:	18cb      	adds	r3, r1, r3
 8008dda:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ddc:	e776      	b.n	8008ccc <_dtoa_r+0xfc>
 8008dde:	2320      	movs	r3, #32
 8008de0:	0020      	movs	r0, r4
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	4098      	lsls	r0, r3
 8008de6:	e7f2      	b.n	8008dce <_dtoa_r+0x1fe>
 8008de8:	9016      	str	r0, [sp, #88]	; 0x58
 8008dea:	e7ba      	b.n	8008d62 <_dtoa_r+0x192>
 8008dec:	920c      	str	r2, [sp, #48]	; 0x30
 8008dee:	e7c3      	b.n	8008d78 <_dtoa_r+0x1a8>
 8008df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df2:	9a03      	ldr	r2, [sp, #12]
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	930a      	str	r3, [sp, #40]	; 0x28
 8008df8:	4253      	negs	r3, r2
 8008dfa:	930d      	str	r3, [sp, #52]	; 0x34
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e00:	e7c5      	b.n	8008d8e <_dtoa_r+0x1be>
 8008e02:	2300      	movs	r3, #0
 8008e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dc13      	bgt.n	8008e38 <_dtoa_r+0x268>
 8008e10:	2301      	movs	r3, #1
 8008e12:	001a      	movs	r2, r3
 8008e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e16:	9307      	str	r3, [sp, #28]
 8008e18:	9223      	str	r2, [sp, #140]	; 0x8c
 8008e1a:	e00d      	b.n	8008e38 <_dtoa_r+0x268>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e7f1      	b.n	8008e04 <_dtoa_r+0x234>
 8008e20:	2300      	movs	r3, #0
 8008e22:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e26:	4694      	mov	ip, r2
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	4463      	add	r3, ip
 8008e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2e:	3301      	adds	r3, #1
 8008e30:	9307      	str	r3, [sp, #28]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dc00      	bgt.n	8008e38 <_dtoa_r+0x268>
 8008e36:	2301      	movs	r3, #1
 8008e38:	9a04      	ldr	r2, [sp, #16]
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	69d0      	ldr	r0, [r2, #28]
 8008e3e:	2204      	movs	r2, #4
 8008e40:	0015      	movs	r5, r2
 8008e42:	3514      	adds	r5, #20
 8008e44:	429d      	cmp	r5, r3
 8008e46:	d91b      	bls.n	8008e80 <_dtoa_r+0x2b0>
 8008e48:	6041      	str	r1, [r0, #4]
 8008e4a:	9804      	ldr	r0, [sp, #16]
 8008e4c:	f000 fdd6 	bl	80099fc <_Balloc>
 8008e50:	9006      	str	r0, [sp, #24]
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d117      	bne.n	8008e86 <_dtoa_r+0x2b6>
 8008e56:	21b0      	movs	r1, #176	; 0xb0
 8008e58:	4b42      	ldr	r3, [pc, #264]	; (8008f64 <_dtoa_r+0x394>)
 8008e5a:	482e      	ldr	r0, [pc, #184]	; (8008f14 <_dtoa_r+0x344>)
 8008e5c:	9a06      	ldr	r2, [sp, #24]
 8008e5e:	31ff      	adds	r1, #255	; 0xff
 8008e60:	e6cb      	b.n	8008bfa <_dtoa_r+0x2a>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7dd      	b.n	8008e22 <_dtoa_r+0x252>
 8008e66:	2300      	movs	r3, #0
 8008e68:	940f      	str	r4, [sp, #60]	; 0x3c
 8008e6a:	9322      	str	r3, [sp, #136]	; 0x88
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e70:	9307      	str	r3, [sp, #28]
 8008e72:	2200      	movs	r2, #0
 8008e74:	3313      	adds	r3, #19
 8008e76:	e7cf      	b.n	8008e18 <_dtoa_r+0x248>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e7c:	3b02      	subs	r3, #2
 8008e7e:	e7f6      	b.n	8008e6e <_dtoa_r+0x29e>
 8008e80:	3101      	adds	r1, #1
 8008e82:	0052      	lsls	r2, r2, #1
 8008e84:	e7dc      	b.n	8008e40 <_dtoa_r+0x270>
 8008e86:	9b04      	ldr	r3, [sp, #16]
 8008e88:	9a06      	ldr	r2, [sp, #24]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	9b07      	ldr	r3, [sp, #28]
 8008e90:	2b0e      	cmp	r3, #14
 8008e92:	d900      	bls.n	8008e96 <_dtoa_r+0x2c6>
 8008e94:	e0e5      	b.n	8009062 <_dtoa_r+0x492>
 8008e96:	2c00      	cmp	r4, #0
 8008e98:	d100      	bne.n	8008e9c <_dtoa_r+0x2cc>
 8008e9a:	e0e2      	b.n	8009062 <_dtoa_r+0x492>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dd64      	ble.n	8008f6c <_dtoa_r+0x39c>
 8008ea2:	210f      	movs	r1, #15
 8008ea4:	9a03      	ldr	r2, [sp, #12]
 8008ea6:	4b2b      	ldr	r3, [pc, #172]	; (8008f54 <_dtoa_r+0x384>)
 8008ea8:	400a      	ands	r2, r1
 8008eaa:	00d2      	lsls	r2, r2, #3
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	681e      	ldr	r6, [r3, #0]
 8008eb0:	685f      	ldr	r7, [r3, #4]
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	2402      	movs	r4, #2
 8008eb6:	111d      	asrs	r5, r3, #4
 8008eb8:	05db      	lsls	r3, r3, #23
 8008eba:	d50a      	bpl.n	8008ed2 <_dtoa_r+0x302>
 8008ebc:	4b2a      	ldr	r3, [pc, #168]	; (8008f68 <_dtoa_r+0x398>)
 8008ebe:	400d      	ands	r5, r1
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ec6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ec8:	f7f8 fc28 	bl	800171c <__aeabi_ddiv>
 8008ecc:	9008      	str	r0, [sp, #32]
 8008ece:	9109      	str	r1, [sp, #36]	; 0x24
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	4b25      	ldr	r3, [pc, #148]	; (8008f68 <_dtoa_r+0x398>)
 8008ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	d108      	bne.n	8008eec <_dtoa_r+0x31c>
 8008eda:	9808      	ldr	r0, [sp, #32]
 8008edc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ede:	0032      	movs	r2, r6
 8008ee0:	003b      	movs	r3, r7
 8008ee2:	f7f8 fc1b 	bl	800171c <__aeabi_ddiv>
 8008ee6:	9008      	str	r0, [sp, #32]
 8008ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8008eea:	e05a      	b.n	8008fa2 <_dtoa_r+0x3d2>
 8008eec:	2301      	movs	r3, #1
 8008eee:	421d      	tst	r5, r3
 8008ef0:	d009      	beq.n	8008f06 <_dtoa_r+0x336>
 8008ef2:	18e4      	adds	r4, r4, r3
 8008ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef6:	0030      	movs	r0, r6
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	0039      	movs	r1, r7
 8008efe:	f7f9 f807 	bl	8001f10 <__aeabi_dmul>
 8008f02:	0006      	movs	r6, r0
 8008f04:	000f      	movs	r7, r1
 8008f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f08:	106d      	asrs	r5, r5, #1
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	e7e2      	b.n	8008ed4 <_dtoa_r+0x304>
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	0800d056 	.word	0x0800d056
 8008f14:	0800d06d 	.word	0x0800d06d
 8008f18:	7ff00000 	.word	0x7ff00000
 8008f1c:	0000270f 	.word	0x0000270f
 8008f20:	0800d052 	.word	0x0800d052
 8008f24:	0800d055 	.word	0x0800d055
 8008f28:	0800d020 	.word	0x0800d020
 8008f2c:	0800d021 	.word	0x0800d021
 8008f30:	3ff00000 	.word	0x3ff00000
 8008f34:	fffffc01 	.word	0xfffffc01
 8008f38:	3ff80000 	.word	0x3ff80000
 8008f3c:	636f4361 	.word	0x636f4361
 8008f40:	3fd287a7 	.word	0x3fd287a7
 8008f44:	8b60c8b3 	.word	0x8b60c8b3
 8008f48:	3fc68a28 	.word	0x3fc68a28
 8008f4c:	509f79fb 	.word	0x509f79fb
 8008f50:	3fd34413 	.word	0x3fd34413
 8008f54:	0800d158 	.word	0x0800d158
 8008f58:	00000432 	.word	0x00000432
 8008f5c:	00000412 	.word	0x00000412
 8008f60:	fe100000 	.word	0xfe100000
 8008f64:	0800d0c5 	.word	0x0800d0c5
 8008f68:	0800d130 	.word	0x0800d130
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	2402      	movs	r4, #2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d016      	beq.n	8008fa2 <_dtoa_r+0x3d2>
 8008f74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f78:	220f      	movs	r2, #15
 8008f7a:	425d      	negs	r5, r3
 8008f7c:	402a      	ands	r2, r5
 8008f7e:	4bdd      	ldr	r3, [pc, #884]	; (80092f4 <_dtoa_r+0x724>)
 8008f80:	00d2      	lsls	r2, r2, #3
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f7f8 ffc2 	bl	8001f10 <__aeabi_dmul>
 8008f8c:	2701      	movs	r7, #1
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9008      	str	r0, [sp, #32]
 8008f92:	9109      	str	r1, [sp, #36]	; 0x24
 8008f94:	4ed8      	ldr	r6, [pc, #864]	; (80092f8 <_dtoa_r+0x728>)
 8008f96:	112d      	asrs	r5, r5, #4
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	d000      	beq.n	8008f9e <_dtoa_r+0x3ce>
 8008f9c:	e091      	b.n	80090c2 <_dtoa_r+0x4f2>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1a1      	bne.n	8008ee6 <_dtoa_r+0x316>
 8008fa2:	9e08      	ldr	r6, [sp, #32]
 8008fa4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d100      	bne.n	8008fae <_dtoa_r+0x3de>
 8008fac:	e094      	b.n	80090d8 <_dtoa_r+0x508>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	0030      	movs	r0, r6
 8008fb2:	0039      	movs	r1, r7
 8008fb4:	4bd1      	ldr	r3, [pc, #836]	; (80092fc <_dtoa_r+0x72c>)
 8008fb6:	f7f7 fa4f 	bl	8000458 <__aeabi_dcmplt>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d100      	bne.n	8008fc0 <_dtoa_r+0x3f0>
 8008fbe:	e08b      	b.n	80090d8 <_dtoa_r+0x508>
 8008fc0:	9b07      	ldr	r3, [sp, #28]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d100      	bne.n	8008fc8 <_dtoa_r+0x3f8>
 8008fc6:	e087      	b.n	80090d8 <_dtoa_r+0x508>
 8008fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dd45      	ble.n	800905a <_dtoa_r+0x48a>
 8008fce:	9b03      	ldr	r3, [sp, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8008fd6:	0030      	movs	r0, r6
 8008fd8:	4bc9      	ldr	r3, [pc, #804]	; (8009300 <_dtoa_r+0x730>)
 8008fda:	0039      	movs	r1, r7
 8008fdc:	f7f8 ff98 	bl	8001f10 <__aeabi_dmul>
 8008fe0:	9008      	str	r0, [sp, #32]
 8008fe2:	9109      	str	r1, [sp, #36]	; 0x24
 8008fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe6:	3401      	adds	r4, #1
 8008fe8:	0020      	movs	r0, r4
 8008fea:	9e08      	ldr	r6, [sp, #32]
 8008fec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fee:	9312      	str	r3, [sp, #72]	; 0x48
 8008ff0:	f7f9 fe26 	bl	8002c40 <__aeabi_i2d>
 8008ff4:	0032      	movs	r2, r6
 8008ff6:	003b      	movs	r3, r7
 8008ff8:	f7f8 ff8a 	bl	8001f10 <__aeabi_dmul>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4bc1      	ldr	r3, [pc, #772]	; (8009304 <_dtoa_r+0x734>)
 8009000:	f7f8 f82c 	bl	800105c <__aeabi_dadd>
 8009004:	4ac0      	ldr	r2, [pc, #768]	; (8009308 <_dtoa_r+0x738>)
 8009006:	9014      	str	r0, [sp, #80]	; 0x50
 8009008:	9115      	str	r1, [sp, #84]	; 0x54
 800900a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800900c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800900e:	4694      	mov	ip, r2
 8009010:	9308      	str	r3, [sp, #32]
 8009012:	9409      	str	r4, [sp, #36]	; 0x24
 8009014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009016:	4463      	add	r3, ip
 8009018:	9318      	str	r3, [sp, #96]	; 0x60
 800901a:	9309      	str	r3, [sp, #36]	; 0x24
 800901c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800901e:	2b00      	cmp	r3, #0
 8009020:	d15e      	bne.n	80090e0 <_dtoa_r+0x510>
 8009022:	2200      	movs	r2, #0
 8009024:	4bb9      	ldr	r3, [pc, #740]	; (800930c <_dtoa_r+0x73c>)
 8009026:	0030      	movs	r0, r6
 8009028:	0039      	movs	r1, r7
 800902a:	f7f9 fa33 	bl	8002494 <__aeabi_dsub>
 800902e:	9a08      	ldr	r2, [sp, #32]
 8009030:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009032:	0004      	movs	r4, r0
 8009034:	000d      	movs	r5, r1
 8009036:	f7f7 fa23 	bl	8000480 <__aeabi_dcmpgt>
 800903a:	2800      	cmp	r0, #0
 800903c:	d000      	beq.n	8009040 <_dtoa_r+0x470>
 800903e:	e2b3      	b.n	80095a8 <_dtoa_r+0x9d8>
 8009040:	48b3      	ldr	r0, [pc, #716]	; (8009310 <_dtoa_r+0x740>)
 8009042:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009044:	4684      	mov	ip, r0
 8009046:	4461      	add	r1, ip
 8009048:	000b      	movs	r3, r1
 800904a:	0020      	movs	r0, r4
 800904c:	0029      	movs	r1, r5
 800904e:	9a08      	ldr	r2, [sp, #32]
 8009050:	f7f7 fa02 	bl	8000458 <__aeabi_dcmplt>
 8009054:	2800      	cmp	r0, #0
 8009056:	d000      	beq.n	800905a <_dtoa_r+0x48a>
 8009058:	e2a3      	b.n	80095a2 <_dtoa_r+0x9d2>
 800905a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800905c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800905e:	9308      	str	r3, [sp, #32]
 8009060:	9409      	str	r4, [sp, #36]	; 0x24
 8009062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009064:	2b00      	cmp	r3, #0
 8009066:	da00      	bge.n	800906a <_dtoa_r+0x49a>
 8009068:	e179      	b.n	800935e <_dtoa_r+0x78e>
 800906a:	9a03      	ldr	r2, [sp, #12]
 800906c:	2a0e      	cmp	r2, #14
 800906e:	dd00      	ble.n	8009072 <_dtoa_r+0x4a2>
 8009070:	e175      	b.n	800935e <_dtoa_r+0x78e>
 8009072:	4ba0      	ldr	r3, [pc, #640]	; (80092f4 <_dtoa_r+0x724>)
 8009074:	00d2      	lsls	r2, r2, #3
 8009076:	189b      	adds	r3, r3, r2
 8009078:	681e      	ldr	r6, [r3, #0]
 800907a:	685f      	ldr	r7, [r3, #4]
 800907c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800907e:	2b00      	cmp	r3, #0
 8009080:	db00      	blt.n	8009084 <_dtoa_r+0x4b4>
 8009082:	e0e5      	b.n	8009250 <_dtoa_r+0x680>
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	2b00      	cmp	r3, #0
 8009088:	dd00      	ble.n	800908c <_dtoa_r+0x4bc>
 800908a:	e0e1      	b.n	8009250 <_dtoa_r+0x680>
 800908c:	d000      	beq.n	8009090 <_dtoa_r+0x4c0>
 800908e:	e288      	b.n	80095a2 <_dtoa_r+0x9d2>
 8009090:	2200      	movs	r2, #0
 8009092:	0030      	movs	r0, r6
 8009094:	0039      	movs	r1, r7
 8009096:	4b9d      	ldr	r3, [pc, #628]	; (800930c <_dtoa_r+0x73c>)
 8009098:	f7f8 ff3a 	bl	8001f10 <__aeabi_dmul>
 800909c:	9a08      	ldr	r2, [sp, #32]
 800909e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a0:	f7f7 f9f8 	bl	8000494 <__aeabi_dcmpge>
 80090a4:	9e07      	ldr	r6, [sp, #28]
 80090a6:	0037      	movs	r7, r6
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d000      	beq.n	80090ae <_dtoa_r+0x4de>
 80090ac:	e25f      	b.n	800956e <_dtoa_r+0x99e>
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	9a06      	ldr	r2, [sp, #24]
 80090b2:	3301      	adds	r3, #1
 80090b4:	9308      	str	r3, [sp, #32]
 80090b6:	2331      	movs	r3, #49	; 0x31
 80090b8:	7013      	strb	r3, [r2, #0]
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	e25a      	b.n	8009578 <_dtoa_r+0x9a8>
 80090c2:	423d      	tst	r5, r7
 80090c4:	d005      	beq.n	80090d2 <_dtoa_r+0x502>
 80090c6:	6832      	ldr	r2, [r6, #0]
 80090c8:	6873      	ldr	r3, [r6, #4]
 80090ca:	f7f8 ff21 	bl	8001f10 <__aeabi_dmul>
 80090ce:	003b      	movs	r3, r7
 80090d0:	3401      	adds	r4, #1
 80090d2:	106d      	asrs	r5, r5, #1
 80090d4:	3608      	adds	r6, #8
 80090d6:	e75f      	b.n	8008f98 <_dtoa_r+0x3c8>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	930e      	str	r3, [sp, #56]	; 0x38
 80090dc:	9b07      	ldr	r3, [sp, #28]
 80090de:	e783      	b.n	8008fe8 <_dtoa_r+0x418>
 80090e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090e2:	4b84      	ldr	r3, [pc, #528]	; (80092f4 <_dtoa_r+0x724>)
 80090e4:	3a01      	subs	r2, #1
 80090e6:	00d2      	lsls	r2, r2, #3
 80090e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	9c08      	ldr	r4, [sp, #32]
 80090ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d051      	beq.n	800919c <_dtoa_r+0x5cc>
 80090f8:	2000      	movs	r0, #0
 80090fa:	4986      	ldr	r1, [pc, #536]	; (8009314 <_dtoa_r+0x744>)
 80090fc:	f7f8 fb0e 	bl	800171c <__aeabi_ddiv>
 8009100:	0022      	movs	r2, r4
 8009102:	002b      	movs	r3, r5
 8009104:	f7f9 f9c6 	bl	8002494 <__aeabi_dsub>
 8009108:	9a06      	ldr	r2, [sp, #24]
 800910a:	0004      	movs	r4, r0
 800910c:	4694      	mov	ip, r2
 800910e:	000d      	movs	r5, r1
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	9314      	str	r3, [sp, #80]	; 0x50
 8009114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009116:	4463      	add	r3, ip
 8009118:	9318      	str	r3, [sp, #96]	; 0x60
 800911a:	0039      	movs	r1, r7
 800911c:	0030      	movs	r0, r6
 800911e:	f7f9 fd59 	bl	8002bd4 <__aeabi_d2iz>
 8009122:	9012      	str	r0, [sp, #72]	; 0x48
 8009124:	f7f9 fd8c 	bl	8002c40 <__aeabi_i2d>
 8009128:	0002      	movs	r2, r0
 800912a:	000b      	movs	r3, r1
 800912c:	0030      	movs	r0, r6
 800912e:	0039      	movs	r1, r7
 8009130:	f7f9 f9b0 	bl	8002494 <__aeabi_dsub>
 8009134:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009136:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009138:	3301      	adds	r3, #1
 800913a:	9308      	str	r3, [sp, #32]
 800913c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800913e:	0006      	movs	r6, r0
 8009140:	3330      	adds	r3, #48	; 0x30
 8009142:	7013      	strb	r3, [r2, #0]
 8009144:	0022      	movs	r2, r4
 8009146:	002b      	movs	r3, r5
 8009148:	000f      	movs	r7, r1
 800914a:	f7f7 f985 	bl	8000458 <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	d174      	bne.n	800923c <_dtoa_r+0x66c>
 8009152:	0032      	movs	r2, r6
 8009154:	003b      	movs	r3, r7
 8009156:	2000      	movs	r0, #0
 8009158:	4968      	ldr	r1, [pc, #416]	; (80092fc <_dtoa_r+0x72c>)
 800915a:	f7f9 f99b 	bl	8002494 <__aeabi_dsub>
 800915e:	0022      	movs	r2, r4
 8009160:	002b      	movs	r3, r5
 8009162:	f7f7 f979 	bl	8000458 <__aeabi_dcmplt>
 8009166:	2800      	cmp	r0, #0
 8009168:	d000      	beq.n	800916c <_dtoa_r+0x59c>
 800916a:	e0d7      	b.n	800931c <_dtoa_r+0x74c>
 800916c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800916e:	9a08      	ldr	r2, [sp, #32]
 8009170:	4293      	cmp	r3, r2
 8009172:	d100      	bne.n	8009176 <_dtoa_r+0x5a6>
 8009174:	e771      	b.n	800905a <_dtoa_r+0x48a>
 8009176:	2200      	movs	r2, #0
 8009178:	0020      	movs	r0, r4
 800917a:	0029      	movs	r1, r5
 800917c:	4b60      	ldr	r3, [pc, #384]	; (8009300 <_dtoa_r+0x730>)
 800917e:	f7f8 fec7 	bl	8001f10 <__aeabi_dmul>
 8009182:	4b5f      	ldr	r3, [pc, #380]	; (8009300 <_dtoa_r+0x730>)
 8009184:	0004      	movs	r4, r0
 8009186:	000d      	movs	r5, r1
 8009188:	0030      	movs	r0, r6
 800918a:	0039      	movs	r1, r7
 800918c:	2200      	movs	r2, #0
 800918e:	f7f8 febf 	bl	8001f10 <__aeabi_dmul>
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	0006      	movs	r6, r0
 8009196:	000f      	movs	r7, r1
 8009198:	9314      	str	r3, [sp, #80]	; 0x50
 800919a:	e7be      	b.n	800911a <_dtoa_r+0x54a>
 800919c:	0020      	movs	r0, r4
 800919e:	0029      	movs	r1, r5
 80091a0:	f7f8 feb6 	bl	8001f10 <__aeabi_dmul>
 80091a4:	9a06      	ldr	r2, [sp, #24]
 80091a6:	9b06      	ldr	r3, [sp, #24]
 80091a8:	4694      	mov	ip, r2
 80091aa:	9308      	str	r3, [sp, #32]
 80091ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091ae:	9014      	str	r0, [sp, #80]	; 0x50
 80091b0:	9115      	str	r1, [sp, #84]	; 0x54
 80091b2:	4463      	add	r3, ip
 80091b4:	9319      	str	r3, [sp, #100]	; 0x64
 80091b6:	0030      	movs	r0, r6
 80091b8:	0039      	movs	r1, r7
 80091ba:	f7f9 fd0b 	bl	8002bd4 <__aeabi_d2iz>
 80091be:	9018      	str	r0, [sp, #96]	; 0x60
 80091c0:	f7f9 fd3e 	bl	8002c40 <__aeabi_i2d>
 80091c4:	0002      	movs	r2, r0
 80091c6:	000b      	movs	r3, r1
 80091c8:	0030      	movs	r0, r6
 80091ca:	0039      	movs	r1, r7
 80091cc:	f7f9 f962 	bl	8002494 <__aeabi_dsub>
 80091d0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80091d2:	9b08      	ldr	r3, [sp, #32]
 80091d4:	3630      	adds	r6, #48	; 0x30
 80091d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80091d8:	701e      	strb	r6, [r3, #0]
 80091da:	3301      	adds	r3, #1
 80091dc:	0004      	movs	r4, r0
 80091de:	000d      	movs	r5, r1
 80091e0:	9308      	str	r3, [sp, #32]
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d12d      	bne.n	8009242 <_dtoa_r+0x672>
 80091e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80091e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80091ea:	9a06      	ldr	r2, [sp, #24]
 80091ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091ee:	4694      	mov	ip, r2
 80091f0:	4463      	add	r3, ip
 80091f2:	2200      	movs	r2, #0
 80091f4:	9308      	str	r3, [sp, #32]
 80091f6:	4b47      	ldr	r3, [pc, #284]	; (8009314 <_dtoa_r+0x744>)
 80091f8:	f7f7 ff30 	bl	800105c <__aeabi_dadd>
 80091fc:	0002      	movs	r2, r0
 80091fe:	000b      	movs	r3, r1
 8009200:	0020      	movs	r0, r4
 8009202:	0029      	movs	r1, r5
 8009204:	f7f7 f93c 	bl	8000480 <__aeabi_dcmpgt>
 8009208:	2800      	cmp	r0, #0
 800920a:	d000      	beq.n	800920e <_dtoa_r+0x63e>
 800920c:	e086      	b.n	800931c <_dtoa_r+0x74c>
 800920e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009212:	2000      	movs	r0, #0
 8009214:	493f      	ldr	r1, [pc, #252]	; (8009314 <_dtoa_r+0x744>)
 8009216:	f7f9 f93d 	bl	8002494 <__aeabi_dsub>
 800921a:	0002      	movs	r2, r0
 800921c:	000b      	movs	r3, r1
 800921e:	0020      	movs	r0, r4
 8009220:	0029      	movs	r1, r5
 8009222:	f7f7 f919 	bl	8000458 <__aeabi_dcmplt>
 8009226:	2800      	cmp	r0, #0
 8009228:	d100      	bne.n	800922c <_dtoa_r+0x65c>
 800922a:	e716      	b.n	800905a <_dtoa_r+0x48a>
 800922c:	9b08      	ldr	r3, [sp, #32]
 800922e:	001a      	movs	r2, r3
 8009230:	3a01      	subs	r2, #1
 8009232:	9208      	str	r2, [sp, #32]
 8009234:	7812      	ldrb	r2, [r2, #0]
 8009236:	2a30      	cmp	r2, #48	; 0x30
 8009238:	d0f8      	beq.n	800922c <_dtoa_r+0x65c>
 800923a:	9308      	str	r3, [sp, #32]
 800923c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	e046      	b.n	80092d0 <_dtoa_r+0x700>
 8009242:	2200      	movs	r2, #0
 8009244:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <_dtoa_r+0x730>)
 8009246:	f7f8 fe63 	bl	8001f10 <__aeabi_dmul>
 800924a:	0006      	movs	r6, r0
 800924c:	000f      	movs	r7, r1
 800924e:	e7b2      	b.n	80091b6 <_dtoa_r+0x5e6>
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	9a06      	ldr	r2, [sp, #24]
 8009254:	930a      	str	r3, [sp, #40]	; 0x28
 8009256:	9b07      	ldr	r3, [sp, #28]
 8009258:	9c08      	ldr	r4, [sp, #32]
 800925a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800925c:	3b01      	subs	r3, #1
 800925e:	189b      	adds	r3, r3, r2
 8009260:	930b      	str	r3, [sp, #44]	; 0x2c
 8009262:	0032      	movs	r2, r6
 8009264:	003b      	movs	r3, r7
 8009266:	0020      	movs	r0, r4
 8009268:	0029      	movs	r1, r5
 800926a:	f7f8 fa57 	bl	800171c <__aeabi_ddiv>
 800926e:	f7f9 fcb1 	bl	8002bd4 <__aeabi_d2iz>
 8009272:	9007      	str	r0, [sp, #28]
 8009274:	f7f9 fce4 	bl	8002c40 <__aeabi_i2d>
 8009278:	0032      	movs	r2, r6
 800927a:	003b      	movs	r3, r7
 800927c:	f7f8 fe48 	bl	8001f10 <__aeabi_dmul>
 8009280:	0002      	movs	r2, r0
 8009282:	000b      	movs	r3, r1
 8009284:	0020      	movs	r0, r4
 8009286:	0029      	movs	r1, r5
 8009288:	f7f9 f904 	bl	8002494 <__aeabi_dsub>
 800928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928e:	001a      	movs	r2, r3
 8009290:	3201      	adds	r2, #1
 8009292:	920a      	str	r2, [sp, #40]	; 0x28
 8009294:	9208      	str	r2, [sp, #32]
 8009296:	9a07      	ldr	r2, [sp, #28]
 8009298:	3230      	adds	r2, #48	; 0x30
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d14f      	bne.n	8009342 <_dtoa_r+0x772>
 80092a2:	0002      	movs	r2, r0
 80092a4:	000b      	movs	r3, r1
 80092a6:	f7f7 fed9 	bl	800105c <__aeabi_dadd>
 80092aa:	0032      	movs	r2, r6
 80092ac:	003b      	movs	r3, r7
 80092ae:	0004      	movs	r4, r0
 80092b0:	000d      	movs	r5, r1
 80092b2:	f7f7 f8e5 	bl	8000480 <__aeabi_dcmpgt>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d12e      	bne.n	8009318 <_dtoa_r+0x748>
 80092ba:	0032      	movs	r2, r6
 80092bc:	003b      	movs	r3, r7
 80092be:	0020      	movs	r0, r4
 80092c0:	0029      	movs	r1, r5
 80092c2:	f7f7 f8c3 	bl	800044c <__aeabi_dcmpeq>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d002      	beq.n	80092d0 <_dtoa_r+0x700>
 80092ca:	9b07      	ldr	r3, [sp, #28]
 80092cc:	07de      	lsls	r6, r3, #31
 80092ce:	d423      	bmi.n	8009318 <_dtoa_r+0x748>
 80092d0:	9905      	ldr	r1, [sp, #20]
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	f000 fbd6 	bl	8009a84 <_Bfree>
 80092d8:	2300      	movs	r3, #0
 80092da:	9a08      	ldr	r2, [sp, #32]
 80092dc:	7013      	strb	r3, [r2, #0]
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80092e2:	3301      	adds	r3, #1
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d100      	bne.n	80092ee <_dtoa_r+0x71e>
 80092ec:	e4ba      	b.n	8008c64 <_dtoa_r+0x94>
 80092ee:	9a08      	ldr	r2, [sp, #32]
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	e4b7      	b.n	8008c64 <_dtoa_r+0x94>
 80092f4:	0800d158 	.word	0x0800d158
 80092f8:	0800d130 	.word	0x0800d130
 80092fc:	3ff00000 	.word	0x3ff00000
 8009300:	40240000 	.word	0x40240000
 8009304:	401c0000 	.word	0x401c0000
 8009308:	fcc00000 	.word	0xfcc00000
 800930c:	40140000 	.word	0x40140000
 8009310:	7cc00000 	.word	0x7cc00000
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	930e      	str	r3, [sp, #56]	; 0x38
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	9308      	str	r3, [sp, #32]
 8009320:	3b01      	subs	r3, #1
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	2a39      	cmp	r2, #57	; 0x39
 8009326:	d108      	bne.n	800933a <_dtoa_r+0x76a>
 8009328:	9a06      	ldr	r2, [sp, #24]
 800932a:	429a      	cmp	r2, r3
 800932c:	d1f7      	bne.n	800931e <_dtoa_r+0x74e>
 800932e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009330:	9906      	ldr	r1, [sp, #24]
 8009332:	3201      	adds	r2, #1
 8009334:	920e      	str	r2, [sp, #56]	; 0x38
 8009336:	2230      	movs	r2, #48	; 0x30
 8009338:	700a      	strb	r2, [r1, #0]
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	3201      	adds	r2, #1
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e77c      	b.n	800923c <_dtoa_r+0x66c>
 8009342:	2200      	movs	r2, #0
 8009344:	4ba9      	ldr	r3, [pc, #676]	; (80095ec <_dtoa_r+0xa1c>)
 8009346:	f7f8 fde3 	bl	8001f10 <__aeabi_dmul>
 800934a:	2200      	movs	r2, #0
 800934c:	2300      	movs	r3, #0
 800934e:	0004      	movs	r4, r0
 8009350:	000d      	movs	r5, r1
 8009352:	f7f7 f87b 	bl	800044c <__aeabi_dcmpeq>
 8009356:	2800      	cmp	r0, #0
 8009358:	d100      	bne.n	800935c <_dtoa_r+0x78c>
 800935a:	e782      	b.n	8009262 <_dtoa_r+0x692>
 800935c:	e7b8      	b.n	80092d0 <_dtoa_r+0x700>
 800935e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009360:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009362:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009364:	2f00      	cmp	r7, #0
 8009366:	d012      	beq.n	800938e <_dtoa_r+0x7be>
 8009368:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800936a:	2a01      	cmp	r2, #1
 800936c:	dc6e      	bgt.n	800944c <_dtoa_r+0x87c>
 800936e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009370:	2a00      	cmp	r2, #0
 8009372:	d065      	beq.n	8009440 <_dtoa_r+0x870>
 8009374:	4a9e      	ldr	r2, [pc, #632]	; (80095f0 <_dtoa_r+0xa20>)
 8009376:	189b      	adds	r3, r3, r2
 8009378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800937a:	2101      	movs	r1, #1
 800937c:	18d2      	adds	r2, r2, r3
 800937e:	920a      	str	r2, [sp, #40]	; 0x28
 8009380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009382:	9804      	ldr	r0, [sp, #16]
 8009384:	18d3      	adds	r3, r2, r3
 8009386:	930c      	str	r3, [sp, #48]	; 0x30
 8009388:	f000 fc78 	bl	8009c7c <__i2b>
 800938c:	0007      	movs	r7, r0
 800938e:	2c00      	cmp	r4, #0
 8009390:	d00e      	beq.n	80093b0 <_dtoa_r+0x7e0>
 8009392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd0b      	ble.n	80093b0 <_dtoa_r+0x7e0>
 8009398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800939a:	0023      	movs	r3, r4
 800939c:	4294      	cmp	r4, r2
 800939e:	dd00      	ble.n	80093a2 <_dtoa_r+0x7d2>
 80093a0:	0013      	movs	r3, r2
 80093a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093a4:	1ae4      	subs	r4, r4, r3
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	920a      	str	r2, [sp, #40]	; 0x28
 80093aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	930c      	str	r3, [sp, #48]	; 0x30
 80093b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01e      	beq.n	80093f4 <_dtoa_r+0x824>
 80093b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d05c      	beq.n	8009476 <_dtoa_r+0x8a6>
 80093bc:	2d00      	cmp	r5, #0
 80093be:	dd10      	ble.n	80093e2 <_dtoa_r+0x812>
 80093c0:	0039      	movs	r1, r7
 80093c2:	002a      	movs	r2, r5
 80093c4:	9804      	ldr	r0, [sp, #16]
 80093c6:	f000 fd21 	bl	8009e0c <__pow5mult>
 80093ca:	9a05      	ldr	r2, [sp, #20]
 80093cc:	0001      	movs	r1, r0
 80093ce:	0007      	movs	r7, r0
 80093d0:	9804      	ldr	r0, [sp, #16]
 80093d2:	f000 fc6b 	bl	8009cac <__multiply>
 80093d6:	0006      	movs	r6, r0
 80093d8:	9905      	ldr	r1, [sp, #20]
 80093da:	9804      	ldr	r0, [sp, #16]
 80093dc:	f000 fb52 	bl	8009a84 <_Bfree>
 80093e0:	9605      	str	r6, [sp, #20]
 80093e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e4:	1b5a      	subs	r2, r3, r5
 80093e6:	42ab      	cmp	r3, r5
 80093e8:	d004      	beq.n	80093f4 <_dtoa_r+0x824>
 80093ea:	9905      	ldr	r1, [sp, #20]
 80093ec:	9804      	ldr	r0, [sp, #16]
 80093ee:	f000 fd0d 	bl	8009e0c <__pow5mult>
 80093f2:	9005      	str	r0, [sp, #20]
 80093f4:	2101      	movs	r1, #1
 80093f6:	9804      	ldr	r0, [sp, #16]
 80093f8:	f000 fc40 	bl	8009c7c <__i2b>
 80093fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093fe:	0006      	movs	r6, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	dd3a      	ble.n	800947a <_dtoa_r+0x8aa>
 8009404:	001a      	movs	r2, r3
 8009406:	0001      	movs	r1, r0
 8009408:	9804      	ldr	r0, [sp, #16]
 800940a:	f000 fcff 	bl	8009e0c <__pow5mult>
 800940e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009410:	0006      	movs	r6, r0
 8009412:	2500      	movs	r5, #0
 8009414:	2b01      	cmp	r3, #1
 8009416:	dc38      	bgt.n	800948a <_dtoa_r+0x8ba>
 8009418:	2500      	movs	r5, #0
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	42ab      	cmp	r3, r5
 800941e:	d130      	bne.n	8009482 <_dtoa_r+0x8b2>
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	031b      	lsls	r3, r3, #12
 8009424:	42ab      	cmp	r3, r5
 8009426:	d12c      	bne.n	8009482 <_dtoa_r+0x8b2>
 8009428:	4b72      	ldr	r3, [pc, #456]	; (80095f4 <_dtoa_r+0xa24>)
 800942a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800942c:	4213      	tst	r3, r2
 800942e:	d028      	beq.n	8009482 <_dtoa_r+0x8b2>
 8009430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009432:	3501      	adds	r5, #1
 8009434:	3301      	adds	r3, #1
 8009436:	930a      	str	r3, [sp, #40]	; 0x28
 8009438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800943a:	3301      	adds	r3, #1
 800943c:	930c      	str	r3, [sp, #48]	; 0x30
 800943e:	e020      	b.n	8009482 <_dtoa_r+0x8b2>
 8009440:	2336      	movs	r3, #54	; 0x36
 8009442:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009444:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009446:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	e795      	b.n	8009378 <_dtoa_r+0x7a8>
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	1e5d      	subs	r5, r3, #1
 8009450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009452:	42ab      	cmp	r3, r5
 8009454:	db07      	blt.n	8009466 <_dtoa_r+0x896>
 8009456:	1b5d      	subs	r5, r3, r5
 8009458:	9b07      	ldr	r3, [sp, #28]
 800945a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800945c:	2b00      	cmp	r3, #0
 800945e:	da8b      	bge.n	8009378 <_dtoa_r+0x7a8>
 8009460:	1ae4      	subs	r4, r4, r3
 8009462:	2300      	movs	r3, #0
 8009464:	e788      	b.n	8009378 <_dtoa_r+0x7a8>
 8009466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800946a:	1aeb      	subs	r3, r5, r3
 800946c:	18d3      	adds	r3, r2, r3
 800946e:	950d      	str	r5, [sp, #52]	; 0x34
 8009470:	9313      	str	r3, [sp, #76]	; 0x4c
 8009472:	2500      	movs	r5, #0
 8009474:	e7f0      	b.n	8009458 <_dtoa_r+0x888>
 8009476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009478:	e7b7      	b.n	80093ea <_dtoa_r+0x81a>
 800947a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800947c:	2500      	movs	r5, #0
 800947e:	2b01      	cmp	r3, #1
 8009480:	ddca      	ble.n	8009418 <_dtoa_r+0x848>
 8009482:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009484:	2001      	movs	r0, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <_dtoa_r+0x8cc>
 800948a:	6933      	ldr	r3, [r6, #16]
 800948c:	3303      	adds	r3, #3
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	18f3      	adds	r3, r6, r3
 8009492:	6858      	ldr	r0, [r3, #4]
 8009494:	f000 fbaa 	bl	8009bec <__hi0bits>
 8009498:	2320      	movs	r3, #32
 800949a:	1a18      	subs	r0, r3, r0
 800949c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800949e:	1818      	adds	r0, r3, r0
 80094a0:	0002      	movs	r2, r0
 80094a2:	231f      	movs	r3, #31
 80094a4:	401a      	ands	r2, r3
 80094a6:	4218      	tst	r0, r3
 80094a8:	d047      	beq.n	800953a <_dtoa_r+0x96a>
 80094aa:	3301      	adds	r3, #1
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	dd3f      	ble.n	8009532 <_dtoa_r+0x962>
 80094b2:	231c      	movs	r3, #28
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b8:	18e4      	adds	r4, r4, r3
 80094ba:	18d2      	adds	r2, r2, r3
 80094bc:	920a      	str	r2, [sp, #40]	; 0x28
 80094be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094c0:	18d3      	adds	r3, r2, r3
 80094c2:	930c      	str	r3, [sp, #48]	; 0x30
 80094c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dd05      	ble.n	80094d6 <_dtoa_r+0x906>
 80094ca:	001a      	movs	r2, r3
 80094cc:	9905      	ldr	r1, [sp, #20]
 80094ce:	9804      	ldr	r0, [sp, #16]
 80094d0:	f000 fcf8 	bl	8009ec4 <__lshift>
 80094d4:	9005      	str	r0, [sp, #20]
 80094d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dd05      	ble.n	80094e8 <_dtoa_r+0x918>
 80094dc:	0031      	movs	r1, r6
 80094de:	001a      	movs	r2, r3
 80094e0:	9804      	ldr	r0, [sp, #16]
 80094e2:	f000 fcef 	bl	8009ec4 <__lshift>
 80094e6:	0006      	movs	r6, r0
 80094e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d027      	beq.n	800953e <_dtoa_r+0x96e>
 80094ee:	0031      	movs	r1, r6
 80094f0:	9805      	ldr	r0, [sp, #20]
 80094f2:	f000 fd55 	bl	8009fa0 <__mcmp>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	da21      	bge.n	800953e <_dtoa_r+0x96e>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	220a      	movs	r2, #10
 80094fe:	3b01      	subs	r3, #1
 8009500:	9303      	str	r3, [sp, #12]
 8009502:	9905      	ldr	r1, [sp, #20]
 8009504:	2300      	movs	r3, #0
 8009506:	9804      	ldr	r0, [sp, #16]
 8009508:	f000 fae0 	bl	8009acc <__multadd>
 800950c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800950e:	9005      	str	r0, [sp, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d100      	bne.n	8009516 <_dtoa_r+0x946>
 8009514:	e15d      	b.n	80097d2 <_dtoa_r+0xc02>
 8009516:	2300      	movs	r3, #0
 8009518:	0039      	movs	r1, r7
 800951a:	220a      	movs	r2, #10
 800951c:	9804      	ldr	r0, [sp, #16]
 800951e:	f000 fad5 	bl	8009acc <__multadd>
 8009522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009524:	0007      	movs	r7, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	dc49      	bgt.n	80095be <_dtoa_r+0x9ee>
 800952a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800952c:	2b02      	cmp	r3, #2
 800952e:	dc0e      	bgt.n	800954e <_dtoa_r+0x97e>
 8009530:	e045      	b.n	80095be <_dtoa_r+0x9ee>
 8009532:	2b04      	cmp	r3, #4
 8009534:	d0c6      	beq.n	80094c4 <_dtoa_r+0x8f4>
 8009536:	331c      	adds	r3, #28
 8009538:	e7bd      	b.n	80094b6 <_dtoa_r+0x8e6>
 800953a:	0013      	movs	r3, r2
 800953c:	e7fb      	b.n	8009536 <_dtoa_r+0x966>
 800953e:	9b07      	ldr	r3, [sp, #28]
 8009540:	2b00      	cmp	r3, #0
 8009542:	dc36      	bgt.n	80095b2 <_dtoa_r+0x9e2>
 8009544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009546:	2b02      	cmp	r3, #2
 8009548:	dd33      	ble.n	80095b2 <_dtoa_r+0x9e2>
 800954a:	9b07      	ldr	r3, [sp, #28]
 800954c:	930b      	str	r3, [sp, #44]	; 0x2c
 800954e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10c      	bne.n	800956e <_dtoa_r+0x99e>
 8009554:	0031      	movs	r1, r6
 8009556:	2205      	movs	r2, #5
 8009558:	9804      	ldr	r0, [sp, #16]
 800955a:	f000 fab7 	bl	8009acc <__multadd>
 800955e:	0006      	movs	r6, r0
 8009560:	0001      	movs	r1, r0
 8009562:	9805      	ldr	r0, [sp, #20]
 8009564:	f000 fd1c 	bl	8009fa0 <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	dd00      	ble.n	800956e <_dtoa_r+0x99e>
 800956c:	e59f      	b.n	80090ae <_dtoa_r+0x4de>
 800956e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009570:	43db      	mvns	r3, r3
 8009572:	9303      	str	r3, [sp, #12]
 8009574:	9b06      	ldr	r3, [sp, #24]
 8009576:	9308      	str	r3, [sp, #32]
 8009578:	2500      	movs	r5, #0
 800957a:	0031      	movs	r1, r6
 800957c:	9804      	ldr	r0, [sp, #16]
 800957e:	f000 fa81 	bl	8009a84 <_Bfree>
 8009582:	2f00      	cmp	r7, #0
 8009584:	d100      	bne.n	8009588 <_dtoa_r+0x9b8>
 8009586:	e6a3      	b.n	80092d0 <_dtoa_r+0x700>
 8009588:	2d00      	cmp	r5, #0
 800958a:	d005      	beq.n	8009598 <_dtoa_r+0x9c8>
 800958c:	42bd      	cmp	r5, r7
 800958e:	d003      	beq.n	8009598 <_dtoa_r+0x9c8>
 8009590:	0029      	movs	r1, r5
 8009592:	9804      	ldr	r0, [sp, #16]
 8009594:	f000 fa76 	bl	8009a84 <_Bfree>
 8009598:	0039      	movs	r1, r7
 800959a:	9804      	ldr	r0, [sp, #16]
 800959c:	f000 fa72 	bl	8009a84 <_Bfree>
 80095a0:	e696      	b.n	80092d0 <_dtoa_r+0x700>
 80095a2:	2600      	movs	r6, #0
 80095a4:	0037      	movs	r7, r6
 80095a6:	e7e2      	b.n	800956e <_dtoa_r+0x99e>
 80095a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095aa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80095ac:	9303      	str	r3, [sp, #12]
 80095ae:	0037      	movs	r7, r6
 80095b0:	e57d      	b.n	80090ae <_dtoa_r+0x4de>
 80095b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d100      	bne.n	80095ba <_dtoa_r+0x9ea>
 80095b8:	e0c3      	b.n	8009742 <_dtoa_r+0xb72>
 80095ba:	9b07      	ldr	r3, [sp, #28]
 80095bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80095be:	2c00      	cmp	r4, #0
 80095c0:	dd05      	ble.n	80095ce <_dtoa_r+0x9fe>
 80095c2:	0039      	movs	r1, r7
 80095c4:	0022      	movs	r2, r4
 80095c6:	9804      	ldr	r0, [sp, #16]
 80095c8:	f000 fc7c 	bl	8009ec4 <__lshift>
 80095cc:	0007      	movs	r7, r0
 80095ce:	0038      	movs	r0, r7
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	d024      	beq.n	800961e <_dtoa_r+0xa4e>
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	9804      	ldr	r0, [sp, #16]
 80095d8:	f000 fa10 	bl	80099fc <_Balloc>
 80095dc:	1e04      	subs	r4, r0, #0
 80095de:	d111      	bne.n	8009604 <_dtoa_r+0xa34>
 80095e0:	0022      	movs	r2, r4
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <_dtoa_r+0xa28>)
 80095e4:	4805      	ldr	r0, [pc, #20]	; (80095fc <_dtoa_r+0xa2c>)
 80095e6:	4906      	ldr	r1, [pc, #24]	; (8009600 <_dtoa_r+0xa30>)
 80095e8:	f7ff fb07 	bl	8008bfa <_dtoa_r+0x2a>
 80095ec:	40240000 	.word	0x40240000
 80095f0:	00000433 	.word	0x00000433
 80095f4:	7ff00000 	.word	0x7ff00000
 80095f8:	0800d0c5 	.word	0x0800d0c5
 80095fc:	0800d06d 	.word	0x0800d06d
 8009600:	000002ef 	.word	0x000002ef
 8009604:	0039      	movs	r1, r7
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	310c      	adds	r1, #12
 800960a:	3202      	adds	r2, #2
 800960c:	0092      	lsls	r2, r2, #2
 800960e:	300c      	adds	r0, #12
 8009610:	f7ff fa40 	bl	8008a94 <memcpy>
 8009614:	2201      	movs	r2, #1
 8009616:	0021      	movs	r1, r4
 8009618:	9804      	ldr	r0, [sp, #16]
 800961a:	f000 fc53 	bl	8009ec4 <__lshift>
 800961e:	9b06      	ldr	r3, [sp, #24]
 8009620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009622:	9307      	str	r3, [sp, #28]
 8009624:	3b01      	subs	r3, #1
 8009626:	189b      	adds	r3, r3, r2
 8009628:	2201      	movs	r2, #1
 800962a:	003d      	movs	r5, r7
 800962c:	0007      	movs	r7, r0
 800962e:	930e      	str	r3, [sp, #56]	; 0x38
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	4013      	ands	r3, r2
 8009634:	930d      	str	r3, [sp, #52]	; 0x34
 8009636:	0031      	movs	r1, r6
 8009638:	9805      	ldr	r0, [sp, #20]
 800963a:	f7ff fa39 	bl	8008ab0 <quorem>
 800963e:	0029      	movs	r1, r5
 8009640:	0004      	movs	r4, r0
 8009642:	900b      	str	r0, [sp, #44]	; 0x2c
 8009644:	9805      	ldr	r0, [sp, #20]
 8009646:	f000 fcab 	bl	8009fa0 <__mcmp>
 800964a:	003a      	movs	r2, r7
 800964c:	900c      	str	r0, [sp, #48]	; 0x30
 800964e:	0031      	movs	r1, r6
 8009650:	9804      	ldr	r0, [sp, #16]
 8009652:	f000 fcc1 	bl	8009fd8 <__mdiff>
 8009656:	2201      	movs	r2, #1
 8009658:	68c3      	ldr	r3, [r0, #12]
 800965a:	3430      	adds	r4, #48	; 0x30
 800965c:	9008      	str	r0, [sp, #32]
 800965e:	920a      	str	r2, [sp, #40]	; 0x28
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <_dtoa_r+0xa9e>
 8009664:	0001      	movs	r1, r0
 8009666:	9805      	ldr	r0, [sp, #20]
 8009668:	f000 fc9a 	bl	8009fa0 <__mcmp>
 800966c:	900a      	str	r0, [sp, #40]	; 0x28
 800966e:	9908      	ldr	r1, [sp, #32]
 8009670:	9804      	ldr	r0, [sp, #16]
 8009672:	f000 fa07 	bl	8009a84 <_Bfree>
 8009676:	9b07      	ldr	r3, [sp, #28]
 8009678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800967a:	3301      	adds	r3, #1
 800967c:	9308      	str	r3, [sp, #32]
 800967e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009680:	4313      	orrs	r3, r2
 8009682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009684:	4313      	orrs	r3, r2
 8009686:	d109      	bne.n	800969c <_dtoa_r+0xacc>
 8009688:	2c39      	cmp	r4, #57	; 0x39
 800968a:	d022      	beq.n	80096d2 <_dtoa_r+0xb02>
 800968c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800968e:	2b00      	cmp	r3, #0
 8009690:	dd01      	ble.n	8009696 <_dtoa_r+0xac6>
 8009692:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009694:	3431      	adds	r4, #49	; 0x31
 8009696:	9b07      	ldr	r3, [sp, #28]
 8009698:	701c      	strb	r4, [r3, #0]
 800969a:	e76e      	b.n	800957a <_dtoa_r+0x9aa>
 800969c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800969e:	2b00      	cmp	r3, #0
 80096a0:	db04      	blt.n	80096ac <_dtoa_r+0xadc>
 80096a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80096a4:	4313      	orrs	r3, r2
 80096a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a8:	4313      	orrs	r3, r2
 80096aa:	d11e      	bne.n	80096ea <_dtoa_r+0xb1a>
 80096ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	ddf1      	ble.n	8009696 <_dtoa_r+0xac6>
 80096b2:	9905      	ldr	r1, [sp, #20]
 80096b4:	2201      	movs	r2, #1
 80096b6:	9804      	ldr	r0, [sp, #16]
 80096b8:	f000 fc04 	bl	8009ec4 <__lshift>
 80096bc:	0031      	movs	r1, r6
 80096be:	9005      	str	r0, [sp, #20]
 80096c0:	f000 fc6e 	bl	8009fa0 <__mcmp>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	dc02      	bgt.n	80096ce <_dtoa_r+0xafe>
 80096c8:	d1e5      	bne.n	8009696 <_dtoa_r+0xac6>
 80096ca:	07e3      	lsls	r3, r4, #31
 80096cc:	d5e3      	bpl.n	8009696 <_dtoa_r+0xac6>
 80096ce:	2c39      	cmp	r4, #57	; 0x39
 80096d0:	d1df      	bne.n	8009692 <_dtoa_r+0xac2>
 80096d2:	2339      	movs	r3, #57	; 0x39
 80096d4:	9a07      	ldr	r2, [sp, #28]
 80096d6:	7013      	strb	r3, [r2, #0]
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	9308      	str	r3, [sp, #32]
 80096dc:	3b01      	subs	r3, #1
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	2a39      	cmp	r2, #57	; 0x39
 80096e2:	d063      	beq.n	80097ac <_dtoa_r+0xbdc>
 80096e4:	3201      	adds	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e747      	b.n	800957a <_dtoa_r+0x9aa>
 80096ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd03      	ble.n	80096f8 <_dtoa_r+0xb28>
 80096f0:	2c39      	cmp	r4, #57	; 0x39
 80096f2:	d0ee      	beq.n	80096d2 <_dtoa_r+0xb02>
 80096f4:	3401      	adds	r4, #1
 80096f6:	e7ce      	b.n	8009696 <_dtoa_r+0xac6>
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	9a07      	ldr	r2, [sp, #28]
 80096fc:	701c      	strb	r4, [r3, #0]
 80096fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009700:	4293      	cmp	r3, r2
 8009702:	d03e      	beq.n	8009782 <_dtoa_r+0xbb2>
 8009704:	2300      	movs	r3, #0
 8009706:	220a      	movs	r2, #10
 8009708:	9905      	ldr	r1, [sp, #20]
 800970a:	9804      	ldr	r0, [sp, #16]
 800970c:	f000 f9de 	bl	8009acc <__multadd>
 8009710:	2300      	movs	r3, #0
 8009712:	9005      	str	r0, [sp, #20]
 8009714:	220a      	movs	r2, #10
 8009716:	0029      	movs	r1, r5
 8009718:	9804      	ldr	r0, [sp, #16]
 800971a:	42bd      	cmp	r5, r7
 800971c:	d106      	bne.n	800972c <_dtoa_r+0xb5c>
 800971e:	f000 f9d5 	bl	8009acc <__multadd>
 8009722:	0005      	movs	r5, r0
 8009724:	0007      	movs	r7, r0
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	9307      	str	r3, [sp, #28]
 800972a:	e784      	b.n	8009636 <_dtoa_r+0xa66>
 800972c:	f000 f9ce 	bl	8009acc <__multadd>
 8009730:	0039      	movs	r1, r7
 8009732:	0005      	movs	r5, r0
 8009734:	2300      	movs	r3, #0
 8009736:	220a      	movs	r2, #10
 8009738:	9804      	ldr	r0, [sp, #16]
 800973a:	f000 f9c7 	bl	8009acc <__multadd>
 800973e:	0007      	movs	r7, r0
 8009740:	e7f1      	b.n	8009726 <_dtoa_r+0xb56>
 8009742:	9b07      	ldr	r3, [sp, #28]
 8009744:	930b      	str	r3, [sp, #44]	; 0x2c
 8009746:	2500      	movs	r5, #0
 8009748:	0031      	movs	r1, r6
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	f7ff f9b0 	bl	8008ab0 <quorem>
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	3030      	adds	r0, #48	; 0x30
 8009754:	5558      	strb	r0, [r3, r5]
 8009756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009758:	3501      	adds	r5, #1
 800975a:	0004      	movs	r4, r0
 800975c:	42ab      	cmp	r3, r5
 800975e:	dd07      	ble.n	8009770 <_dtoa_r+0xba0>
 8009760:	2300      	movs	r3, #0
 8009762:	220a      	movs	r2, #10
 8009764:	9905      	ldr	r1, [sp, #20]
 8009766:	9804      	ldr	r0, [sp, #16]
 8009768:	f000 f9b0 	bl	8009acc <__multadd>
 800976c:	9005      	str	r0, [sp, #20]
 800976e:	e7eb      	b.n	8009748 <_dtoa_r+0xb78>
 8009770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009772:	2301      	movs	r3, #1
 8009774:	2a00      	cmp	r2, #0
 8009776:	dd00      	ble.n	800977a <_dtoa_r+0xbaa>
 8009778:	0013      	movs	r3, r2
 800977a:	2500      	movs	r5, #0
 800977c:	9a06      	ldr	r2, [sp, #24]
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	9308      	str	r3, [sp, #32]
 8009782:	9905      	ldr	r1, [sp, #20]
 8009784:	2201      	movs	r2, #1
 8009786:	9804      	ldr	r0, [sp, #16]
 8009788:	f000 fb9c 	bl	8009ec4 <__lshift>
 800978c:	0031      	movs	r1, r6
 800978e:	9005      	str	r0, [sp, #20]
 8009790:	f000 fc06 	bl	8009fa0 <__mcmp>
 8009794:	2800      	cmp	r0, #0
 8009796:	dc9f      	bgt.n	80096d8 <_dtoa_r+0xb08>
 8009798:	d101      	bne.n	800979e <_dtoa_r+0xbce>
 800979a:	07e4      	lsls	r4, r4, #31
 800979c:	d49c      	bmi.n	80096d8 <_dtoa_r+0xb08>
 800979e:	9b08      	ldr	r3, [sp, #32]
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	2a30      	cmp	r2, #48	; 0x30
 80097a8:	d0fa      	beq.n	80097a0 <_dtoa_r+0xbd0>
 80097aa:	e6e6      	b.n	800957a <_dtoa_r+0x9aa>
 80097ac:	9a06      	ldr	r2, [sp, #24]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d193      	bne.n	80096da <_dtoa_r+0xb0a>
 80097b2:	9b03      	ldr	r3, [sp, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	2331      	movs	r3, #49	; 0x31
 80097ba:	7013      	strb	r3, [r2, #0]
 80097bc:	e6dd      	b.n	800957a <_dtoa_r+0x9aa>
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <_dtoa_r+0xc14>)
 80097c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80097c2:	9306      	str	r3, [sp, #24]
 80097c4:	4b08      	ldr	r3, [pc, #32]	; (80097e8 <_dtoa_r+0xc18>)
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	d001      	beq.n	80097ce <_dtoa_r+0xbfe>
 80097ca:	f7ff fa49 	bl	8008c60 <_dtoa_r+0x90>
 80097ce:	f7ff fa49 	bl	8008c64 <_dtoa_r+0x94>
 80097d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dcb6      	bgt.n	8009746 <_dtoa_r+0xb76>
 80097d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097da:	2b02      	cmp	r3, #2
 80097dc:	dd00      	ble.n	80097e0 <_dtoa_r+0xc10>
 80097de:	e6b6      	b.n	800954e <_dtoa_r+0x97e>
 80097e0:	e7b1      	b.n	8009746 <_dtoa_r+0xb76>
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	0800d049 	.word	0x0800d049
 80097e8:	0800d051 	.word	0x0800d051

080097ec <_free_r>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	0005      	movs	r5, r0
 80097f0:	2900      	cmp	r1, #0
 80097f2:	d010      	beq.n	8009816 <_free_r+0x2a>
 80097f4:	1f0c      	subs	r4, r1, #4
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	da00      	bge.n	80097fe <_free_r+0x12>
 80097fc:	18e4      	adds	r4, r4, r3
 80097fe:	0028      	movs	r0, r5
 8009800:	f000 f8ec 	bl	80099dc <__malloc_lock>
 8009804:	4a1d      	ldr	r2, [pc, #116]	; (800987c <_free_r+0x90>)
 8009806:	6813      	ldr	r3, [r2, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <_free_r+0x2c>
 800980c:	6063      	str	r3, [r4, #4]
 800980e:	6014      	str	r4, [r2, #0]
 8009810:	0028      	movs	r0, r5
 8009812:	f000 f8eb 	bl	80099ec <__malloc_unlock>
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	42a3      	cmp	r3, r4
 800981a:	d908      	bls.n	800982e <_free_r+0x42>
 800981c:	6820      	ldr	r0, [r4, #0]
 800981e:	1821      	adds	r1, r4, r0
 8009820:	428b      	cmp	r3, r1
 8009822:	d1f3      	bne.n	800980c <_free_r+0x20>
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	1809      	adds	r1, r1, r0
 800982a:	6021      	str	r1, [r4, #0]
 800982c:	e7ee      	b.n	800980c <_free_r+0x20>
 800982e:	001a      	movs	r2, r3
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <_free_r+0x4e>
 8009836:	42a3      	cmp	r3, r4
 8009838:	d9f9      	bls.n	800982e <_free_r+0x42>
 800983a:	6811      	ldr	r1, [r2, #0]
 800983c:	1850      	adds	r0, r2, r1
 800983e:	42a0      	cmp	r0, r4
 8009840:	d10b      	bne.n	800985a <_free_r+0x6e>
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	1809      	adds	r1, r1, r0
 8009846:	1850      	adds	r0, r2, r1
 8009848:	6011      	str	r1, [r2, #0]
 800984a:	4283      	cmp	r3, r0
 800984c:	d1e0      	bne.n	8009810 <_free_r+0x24>
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	1841      	adds	r1, r0, r1
 8009854:	6011      	str	r1, [r2, #0]
 8009856:	6053      	str	r3, [r2, #4]
 8009858:	e7da      	b.n	8009810 <_free_r+0x24>
 800985a:	42a0      	cmp	r0, r4
 800985c:	d902      	bls.n	8009864 <_free_r+0x78>
 800985e:	230c      	movs	r3, #12
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	e7d5      	b.n	8009810 <_free_r+0x24>
 8009864:	6820      	ldr	r0, [r4, #0]
 8009866:	1821      	adds	r1, r4, r0
 8009868:	428b      	cmp	r3, r1
 800986a:	d103      	bne.n	8009874 <_free_r+0x88>
 800986c:	6819      	ldr	r1, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	1809      	adds	r1, r1, r0
 8009872:	6021      	str	r1, [r4, #0]
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	6054      	str	r4, [r2, #4]
 8009878:	e7ca      	b.n	8009810 <_free_r+0x24>
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	20000770 	.word	0x20000770

08009880 <malloc>:
 8009880:	b510      	push	{r4, lr}
 8009882:	4b03      	ldr	r3, [pc, #12]	; (8009890 <malloc+0x10>)
 8009884:	0001      	movs	r1, r0
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	f000 f826 	bl	80098d8 <_malloc_r>
 800988c:	bd10      	pop	{r4, pc}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	20000068 	.word	0x20000068

08009894 <sbrk_aligned>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4e0f      	ldr	r6, [pc, #60]	; (80098d4 <sbrk_aligned+0x40>)
 8009898:	000d      	movs	r5, r1
 800989a:	6831      	ldr	r1, [r6, #0]
 800989c:	0004      	movs	r4, r0
 800989e:	2900      	cmp	r1, #0
 80098a0:	d102      	bne.n	80098a8 <sbrk_aligned+0x14>
 80098a2:	f002 f82f 	bl	800b904 <_sbrk_r>
 80098a6:	6030      	str	r0, [r6, #0]
 80098a8:	0029      	movs	r1, r5
 80098aa:	0020      	movs	r0, r4
 80098ac:	f002 f82a 	bl	800b904 <_sbrk_r>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d00a      	beq.n	80098ca <sbrk_aligned+0x36>
 80098b4:	2303      	movs	r3, #3
 80098b6:	1cc5      	adds	r5, r0, #3
 80098b8:	439d      	bics	r5, r3
 80098ba:	42a8      	cmp	r0, r5
 80098bc:	d007      	beq.n	80098ce <sbrk_aligned+0x3a>
 80098be:	1a29      	subs	r1, r5, r0
 80098c0:	0020      	movs	r0, r4
 80098c2:	f002 f81f 	bl	800b904 <_sbrk_r>
 80098c6:	3001      	adds	r0, #1
 80098c8:	d101      	bne.n	80098ce <sbrk_aligned+0x3a>
 80098ca:	2501      	movs	r5, #1
 80098cc:	426d      	negs	r5, r5
 80098ce:	0028      	movs	r0, r5
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	20000774 	.word	0x20000774

080098d8 <_malloc_r>:
 80098d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098da:	2203      	movs	r2, #3
 80098dc:	1ccb      	adds	r3, r1, #3
 80098de:	4393      	bics	r3, r2
 80098e0:	3308      	adds	r3, #8
 80098e2:	0006      	movs	r6, r0
 80098e4:	001f      	movs	r7, r3
 80098e6:	2b0c      	cmp	r3, #12
 80098e8:	d238      	bcs.n	800995c <_malloc_r+0x84>
 80098ea:	270c      	movs	r7, #12
 80098ec:	42b9      	cmp	r1, r7
 80098ee:	d837      	bhi.n	8009960 <_malloc_r+0x88>
 80098f0:	0030      	movs	r0, r6
 80098f2:	f000 f873 	bl	80099dc <__malloc_lock>
 80098f6:	4b38      	ldr	r3, [pc, #224]	; (80099d8 <_malloc_r+0x100>)
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	001c      	movs	r4, r3
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d133      	bne.n	800996a <_malloc_r+0x92>
 8009902:	0039      	movs	r1, r7
 8009904:	0030      	movs	r0, r6
 8009906:	f7ff ffc5 	bl	8009894 <sbrk_aligned>
 800990a:	0004      	movs	r4, r0
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d15e      	bne.n	80099ce <_malloc_r+0xf6>
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	681c      	ldr	r4, [r3, #0]
 8009914:	0025      	movs	r5, r4
 8009916:	2d00      	cmp	r5, #0
 8009918:	d14e      	bne.n	80099b8 <_malloc_r+0xe0>
 800991a:	2c00      	cmp	r4, #0
 800991c:	d051      	beq.n	80099c2 <_malloc_r+0xea>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	0029      	movs	r1, r5
 8009922:	18e3      	adds	r3, r4, r3
 8009924:	0030      	movs	r0, r6
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	f001 ffec 	bl	800b904 <_sbrk_r>
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	4283      	cmp	r3, r0
 8009930:	d147      	bne.n	80099c2 <_malloc_r+0xea>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	0030      	movs	r0, r6
 8009936:	1aff      	subs	r7, r7, r3
 8009938:	0039      	movs	r1, r7
 800993a:	f7ff ffab 	bl	8009894 <sbrk_aligned>
 800993e:	3001      	adds	r0, #1
 8009940:	d03f      	beq.n	80099c2 <_malloc_r+0xea>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	19db      	adds	r3, r3, r7
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	9b00      	ldr	r3, [sp, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d040      	beq.n	80099d2 <_malloc_r+0xfa>
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	42a2      	cmp	r2, r4
 8009954:	d133      	bne.n	80099be <_malloc_r+0xe6>
 8009956:	2200      	movs	r2, #0
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	e014      	b.n	8009986 <_malloc_r+0xae>
 800995c:	2b00      	cmp	r3, #0
 800995e:	dac5      	bge.n	80098ec <_malloc_r+0x14>
 8009960:	230c      	movs	r3, #12
 8009962:	2500      	movs	r5, #0
 8009964:	6033      	str	r3, [r6, #0]
 8009966:	0028      	movs	r0, r5
 8009968:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800996a:	6821      	ldr	r1, [r4, #0]
 800996c:	1bc9      	subs	r1, r1, r7
 800996e:	d420      	bmi.n	80099b2 <_malloc_r+0xda>
 8009970:	290b      	cmp	r1, #11
 8009972:	d918      	bls.n	80099a6 <_malloc_r+0xce>
 8009974:	19e2      	adds	r2, r4, r7
 8009976:	6027      	str	r7, [r4, #0]
 8009978:	42a3      	cmp	r3, r4
 800997a:	d112      	bne.n	80099a2 <_malloc_r+0xca>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	6863      	ldr	r3, [r4, #4]
 8009982:	6011      	str	r1, [r2, #0]
 8009984:	6053      	str	r3, [r2, #4]
 8009986:	0030      	movs	r0, r6
 8009988:	0025      	movs	r5, r4
 800998a:	f000 f82f 	bl	80099ec <__malloc_unlock>
 800998e:	2207      	movs	r2, #7
 8009990:	350b      	adds	r5, #11
 8009992:	1d23      	adds	r3, r4, #4
 8009994:	4395      	bics	r5, r2
 8009996:	1aea      	subs	r2, r5, r3
 8009998:	429d      	cmp	r5, r3
 800999a:	d0e4      	beq.n	8009966 <_malloc_r+0x8e>
 800999c:	1b5b      	subs	r3, r3, r5
 800999e:	50a3      	str	r3, [r4, r2]
 80099a0:	e7e1      	b.n	8009966 <_malloc_r+0x8e>
 80099a2:	605a      	str	r2, [r3, #4]
 80099a4:	e7ec      	b.n	8009980 <_malloc_r+0xa8>
 80099a6:	6862      	ldr	r2, [r4, #4]
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	d1d5      	bne.n	8009958 <_malloc_r+0x80>
 80099ac:	9b00      	ldr	r3, [sp, #0]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e7e9      	b.n	8009986 <_malloc_r+0xae>
 80099b2:	0023      	movs	r3, r4
 80099b4:	6864      	ldr	r4, [r4, #4]
 80099b6:	e7a2      	b.n	80098fe <_malloc_r+0x26>
 80099b8:	002c      	movs	r4, r5
 80099ba:	686d      	ldr	r5, [r5, #4]
 80099bc:	e7ab      	b.n	8009916 <_malloc_r+0x3e>
 80099be:	0013      	movs	r3, r2
 80099c0:	e7c4      	b.n	800994c <_malloc_r+0x74>
 80099c2:	230c      	movs	r3, #12
 80099c4:	0030      	movs	r0, r6
 80099c6:	6033      	str	r3, [r6, #0]
 80099c8:	f000 f810 	bl	80099ec <__malloc_unlock>
 80099cc:	e7cb      	b.n	8009966 <_malloc_r+0x8e>
 80099ce:	6027      	str	r7, [r4, #0]
 80099d0:	e7d9      	b.n	8009986 <_malloc_r+0xae>
 80099d2:	605b      	str	r3, [r3, #4]
 80099d4:	deff      	udf	#255	; 0xff
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	20000770 	.word	0x20000770

080099dc <__malloc_lock>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	4802      	ldr	r0, [pc, #8]	; (80099e8 <__malloc_lock+0xc>)
 80099e0:	f7ff f84b 	bl	8008a7a <__retarget_lock_acquire_recursive>
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	46c0      	nop			; (mov r8, r8)
 80099e8:	2000076c 	.word	0x2000076c

080099ec <__malloc_unlock>:
 80099ec:	b510      	push	{r4, lr}
 80099ee:	4802      	ldr	r0, [pc, #8]	; (80099f8 <__malloc_unlock+0xc>)
 80099f0:	f7ff f844 	bl	8008a7c <__retarget_lock_release_recursive>
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	2000076c 	.word	0x2000076c

080099fc <_Balloc>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	69c5      	ldr	r5, [r0, #28]
 8009a00:	0006      	movs	r6, r0
 8009a02:	000c      	movs	r4, r1
 8009a04:	2d00      	cmp	r5, #0
 8009a06:	d10e      	bne.n	8009a26 <_Balloc+0x2a>
 8009a08:	2010      	movs	r0, #16
 8009a0a:	f7ff ff39 	bl	8009880 <malloc>
 8009a0e:	1e02      	subs	r2, r0, #0
 8009a10:	61f0      	str	r0, [r6, #28]
 8009a12:	d104      	bne.n	8009a1e <_Balloc+0x22>
 8009a14:	216b      	movs	r1, #107	; 0x6b
 8009a16:	4b19      	ldr	r3, [pc, #100]	; (8009a7c <_Balloc+0x80>)
 8009a18:	4819      	ldr	r0, [pc, #100]	; (8009a80 <_Balloc+0x84>)
 8009a1a:	f001 ff8b 	bl	800b934 <__assert_func>
 8009a1e:	6045      	str	r5, [r0, #4]
 8009a20:	6085      	str	r5, [r0, #8]
 8009a22:	6005      	str	r5, [r0, #0]
 8009a24:	60c5      	str	r5, [r0, #12]
 8009a26:	69f5      	ldr	r5, [r6, #28]
 8009a28:	68eb      	ldr	r3, [r5, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d013      	beq.n	8009a56 <_Balloc+0x5a>
 8009a2e:	69f3      	ldr	r3, [r6, #28]
 8009a30:	00a2      	lsls	r2, r4, #2
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	189b      	adds	r3, r3, r2
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d118      	bne.n	8009a6e <_Balloc+0x72>
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	000d      	movs	r5, r1
 8009a40:	40a5      	lsls	r5, r4
 8009a42:	1d6a      	adds	r2, r5, #5
 8009a44:	0030      	movs	r0, r6
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	f001 ff92 	bl	800b970 <_calloc_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d00c      	beq.n	8009a6a <_Balloc+0x6e>
 8009a50:	6044      	str	r4, [r0, #4]
 8009a52:	6085      	str	r5, [r0, #8]
 8009a54:	e00d      	b.n	8009a72 <_Balloc+0x76>
 8009a56:	2221      	movs	r2, #33	; 0x21
 8009a58:	2104      	movs	r1, #4
 8009a5a:	0030      	movs	r0, r6
 8009a5c:	f001 ff88 	bl	800b970 <_calloc_r>
 8009a60:	69f3      	ldr	r3, [r6, #28]
 8009a62:	60e8      	str	r0, [r5, #12]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e1      	bne.n	8009a2e <_Balloc+0x32>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}
 8009a6e:	6802      	ldr	r2, [r0, #0]
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	2300      	movs	r3, #0
 8009a74:	6103      	str	r3, [r0, #16]
 8009a76:	60c3      	str	r3, [r0, #12]
 8009a78:	e7f8      	b.n	8009a6c <_Balloc+0x70>
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	0800d056 	.word	0x0800d056
 8009a80:	0800d0d6 	.word	0x0800d0d6

08009a84 <_Bfree>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	69c6      	ldr	r6, [r0, #28]
 8009a88:	0005      	movs	r5, r0
 8009a8a:	000c      	movs	r4, r1
 8009a8c:	2e00      	cmp	r6, #0
 8009a8e:	d10e      	bne.n	8009aae <_Bfree+0x2a>
 8009a90:	2010      	movs	r0, #16
 8009a92:	f7ff fef5 	bl	8009880 <malloc>
 8009a96:	1e02      	subs	r2, r0, #0
 8009a98:	61e8      	str	r0, [r5, #28]
 8009a9a:	d104      	bne.n	8009aa6 <_Bfree+0x22>
 8009a9c:	218f      	movs	r1, #143	; 0x8f
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <_Bfree+0x40>)
 8009aa0:	4809      	ldr	r0, [pc, #36]	; (8009ac8 <_Bfree+0x44>)
 8009aa2:	f001 ff47 	bl	800b934 <__assert_func>
 8009aa6:	6046      	str	r6, [r0, #4]
 8009aa8:	6086      	str	r6, [r0, #8]
 8009aaa:	6006      	str	r6, [r0, #0]
 8009aac:	60c6      	str	r6, [r0, #12]
 8009aae:	2c00      	cmp	r4, #0
 8009ab0:	d007      	beq.n	8009ac2 <_Bfree+0x3e>
 8009ab2:	69eb      	ldr	r3, [r5, #28]
 8009ab4:	6862      	ldr	r2, [r4, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	0092      	lsls	r2, r2, #2
 8009aba:	189b      	adds	r3, r3, r2
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	601c      	str	r4, [r3, #0]
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	0800d056 	.word	0x0800d056
 8009ac8:	0800d0d6 	.word	0x0800d0d6

08009acc <__multadd>:
 8009acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ace:	000e      	movs	r6, r1
 8009ad0:	9001      	str	r0, [sp, #4]
 8009ad2:	000c      	movs	r4, r1
 8009ad4:	001d      	movs	r5, r3
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	690f      	ldr	r7, [r1, #16]
 8009ada:	3614      	adds	r6, #20
 8009adc:	6833      	ldr	r3, [r6, #0]
 8009ade:	3001      	adds	r0, #1
 8009ae0:	b299      	uxth	r1, r3
 8009ae2:	4351      	muls	r1, r2
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	4353      	muls	r3, r2
 8009ae8:	1949      	adds	r1, r1, r5
 8009aea:	0c0d      	lsrs	r5, r1, #16
 8009aec:	195b      	adds	r3, r3, r5
 8009aee:	0c1d      	lsrs	r5, r3, #16
 8009af0:	b289      	uxth	r1, r1
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	185b      	adds	r3, r3, r1
 8009af6:	c608      	stmia	r6!, {r3}
 8009af8:	4287      	cmp	r7, r0
 8009afa:	dcef      	bgt.n	8009adc <__multadd+0x10>
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	d022      	beq.n	8009b46 <__multadd+0x7a>
 8009b00:	68a3      	ldr	r3, [r4, #8]
 8009b02:	42bb      	cmp	r3, r7
 8009b04:	dc19      	bgt.n	8009b3a <__multadd+0x6e>
 8009b06:	6861      	ldr	r1, [r4, #4]
 8009b08:	9801      	ldr	r0, [sp, #4]
 8009b0a:	3101      	adds	r1, #1
 8009b0c:	f7ff ff76 	bl	80099fc <_Balloc>
 8009b10:	1e06      	subs	r6, r0, #0
 8009b12:	d105      	bne.n	8009b20 <__multadd+0x54>
 8009b14:	0032      	movs	r2, r6
 8009b16:	21ba      	movs	r1, #186	; 0xba
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <__multadd+0x80>)
 8009b1a:	480d      	ldr	r0, [pc, #52]	; (8009b50 <__multadd+0x84>)
 8009b1c:	f001 ff0a 	bl	800b934 <__assert_func>
 8009b20:	0021      	movs	r1, r4
 8009b22:	6922      	ldr	r2, [r4, #16]
 8009b24:	310c      	adds	r1, #12
 8009b26:	3202      	adds	r2, #2
 8009b28:	0092      	lsls	r2, r2, #2
 8009b2a:	300c      	adds	r0, #12
 8009b2c:	f7fe ffb2 	bl	8008a94 <memcpy>
 8009b30:	0021      	movs	r1, r4
 8009b32:	9801      	ldr	r0, [sp, #4]
 8009b34:	f7ff ffa6 	bl	8009a84 <_Bfree>
 8009b38:	0034      	movs	r4, r6
 8009b3a:	1d3b      	adds	r3, r7, #4
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	18e3      	adds	r3, r4, r3
 8009b40:	605d      	str	r5, [r3, #4]
 8009b42:	1c7b      	adds	r3, r7, #1
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	0020      	movs	r0, r4
 8009b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	0800d0c5 	.word	0x0800d0c5
 8009b50:	0800d0d6 	.word	0x0800d0d6

08009b54 <__s2b>:
 8009b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b56:	0006      	movs	r6, r0
 8009b58:	0018      	movs	r0, r3
 8009b5a:	000c      	movs	r4, r1
 8009b5c:	3008      	adds	r0, #8
 8009b5e:	2109      	movs	r1, #9
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	0015      	movs	r5, r2
 8009b64:	f7f6 fb76 	bl	8000254 <__divsi3>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	4283      	cmp	r3, r0
 8009b6e:	db0a      	blt.n	8009b86 <__s2b+0x32>
 8009b70:	0030      	movs	r0, r6
 8009b72:	f7ff ff43 	bl	80099fc <_Balloc>
 8009b76:	1e01      	subs	r1, r0, #0
 8009b78:	d108      	bne.n	8009b8c <__s2b+0x38>
 8009b7a:	000a      	movs	r2, r1
 8009b7c:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <__s2b+0x90>)
 8009b7e:	481a      	ldr	r0, [pc, #104]	; (8009be8 <__s2b+0x94>)
 8009b80:	31d3      	adds	r1, #211	; 0xd3
 8009b82:	f001 fed7 	bl	800b934 <__assert_func>
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	3101      	adds	r1, #1
 8009b8a:	e7ef      	b.n	8009b6c <__s2b+0x18>
 8009b8c:	9b08      	ldr	r3, [sp, #32]
 8009b8e:	6143      	str	r3, [r0, #20]
 8009b90:	2301      	movs	r3, #1
 8009b92:	6103      	str	r3, [r0, #16]
 8009b94:	2d09      	cmp	r5, #9
 8009b96:	dd18      	ble.n	8009bca <__s2b+0x76>
 8009b98:	0023      	movs	r3, r4
 8009b9a:	3309      	adds	r3, #9
 8009b9c:	001f      	movs	r7, r3
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	1964      	adds	r4, r4, r5
 8009ba2:	783b      	ldrb	r3, [r7, #0]
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	0030      	movs	r0, r6
 8009ba8:	3b30      	subs	r3, #48	; 0x30
 8009baa:	f7ff ff8f 	bl	8009acc <__multadd>
 8009bae:	3701      	adds	r7, #1
 8009bb0:	0001      	movs	r1, r0
 8009bb2:	42a7      	cmp	r7, r4
 8009bb4:	d1f5      	bne.n	8009ba2 <__s2b+0x4e>
 8009bb6:	002c      	movs	r4, r5
 8009bb8:	9b00      	ldr	r3, [sp, #0]
 8009bba:	3c08      	subs	r4, #8
 8009bbc:	191c      	adds	r4, r3, r4
 8009bbe:	002f      	movs	r7, r5
 8009bc0:	9b01      	ldr	r3, [sp, #4]
 8009bc2:	429f      	cmp	r7, r3
 8009bc4:	db04      	blt.n	8009bd0 <__s2b+0x7c>
 8009bc6:	0008      	movs	r0, r1
 8009bc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bca:	2509      	movs	r5, #9
 8009bcc:	340a      	adds	r4, #10
 8009bce:	e7f6      	b.n	8009bbe <__s2b+0x6a>
 8009bd0:	1b63      	subs	r3, r4, r5
 8009bd2:	5ddb      	ldrb	r3, [r3, r7]
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	0030      	movs	r0, r6
 8009bd8:	3b30      	subs	r3, #48	; 0x30
 8009bda:	f7ff ff77 	bl	8009acc <__multadd>
 8009bde:	3701      	adds	r7, #1
 8009be0:	0001      	movs	r1, r0
 8009be2:	e7ed      	b.n	8009bc0 <__s2b+0x6c>
 8009be4:	0800d0c5 	.word	0x0800d0c5
 8009be8:	0800d0d6 	.word	0x0800d0d6

08009bec <__hi0bits>:
 8009bec:	0003      	movs	r3, r0
 8009bee:	0c02      	lsrs	r2, r0, #16
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	4282      	cmp	r2, r0
 8009bf4:	d101      	bne.n	8009bfa <__hi0bits+0xe>
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	3010      	adds	r0, #16
 8009bfa:	0e1a      	lsrs	r2, r3, #24
 8009bfc:	d101      	bne.n	8009c02 <__hi0bits+0x16>
 8009bfe:	3008      	adds	r0, #8
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	0f1a      	lsrs	r2, r3, #28
 8009c04:	d101      	bne.n	8009c0a <__hi0bits+0x1e>
 8009c06:	3004      	adds	r0, #4
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	0f9a      	lsrs	r2, r3, #30
 8009c0c:	d101      	bne.n	8009c12 <__hi0bits+0x26>
 8009c0e:	3002      	adds	r0, #2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	db03      	blt.n	8009c1e <__hi0bits+0x32>
 8009c16:	3001      	adds	r0, #1
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	d400      	bmi.n	8009c1e <__hi0bits+0x32>
 8009c1c:	2020      	movs	r0, #32
 8009c1e:	4770      	bx	lr

08009c20 <__lo0bits>:
 8009c20:	6803      	ldr	r3, [r0, #0]
 8009c22:	0001      	movs	r1, r0
 8009c24:	2207      	movs	r2, #7
 8009c26:	0018      	movs	r0, r3
 8009c28:	4010      	ands	r0, r2
 8009c2a:	4213      	tst	r3, r2
 8009c2c:	d00d      	beq.n	8009c4a <__lo0bits+0x2a>
 8009c2e:	3a06      	subs	r2, #6
 8009c30:	2000      	movs	r0, #0
 8009c32:	4213      	tst	r3, r2
 8009c34:	d105      	bne.n	8009c42 <__lo0bits+0x22>
 8009c36:	3002      	adds	r0, #2
 8009c38:	4203      	tst	r3, r0
 8009c3a:	d003      	beq.n	8009c44 <__lo0bits+0x24>
 8009c3c:	40d3      	lsrs	r3, r2
 8009c3e:	0010      	movs	r0, r2
 8009c40:	600b      	str	r3, [r1, #0]
 8009c42:	4770      	bx	lr
 8009c44:	089b      	lsrs	r3, r3, #2
 8009c46:	600b      	str	r3, [r1, #0]
 8009c48:	e7fb      	b.n	8009c42 <__lo0bits+0x22>
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	d101      	bne.n	8009c54 <__lo0bits+0x34>
 8009c50:	2010      	movs	r0, #16
 8009c52:	0c1b      	lsrs	r3, r3, #16
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d101      	bne.n	8009c5e <__lo0bits+0x3e>
 8009c5a:	3008      	adds	r0, #8
 8009c5c:	0a1b      	lsrs	r3, r3, #8
 8009c5e:	071a      	lsls	r2, r3, #28
 8009c60:	d101      	bne.n	8009c66 <__lo0bits+0x46>
 8009c62:	3004      	adds	r0, #4
 8009c64:	091b      	lsrs	r3, r3, #4
 8009c66:	079a      	lsls	r2, r3, #30
 8009c68:	d101      	bne.n	8009c6e <__lo0bits+0x4e>
 8009c6a:	3002      	adds	r0, #2
 8009c6c:	089b      	lsrs	r3, r3, #2
 8009c6e:	07da      	lsls	r2, r3, #31
 8009c70:	d4e9      	bmi.n	8009c46 <__lo0bits+0x26>
 8009c72:	3001      	adds	r0, #1
 8009c74:	085b      	lsrs	r3, r3, #1
 8009c76:	d1e6      	bne.n	8009c46 <__lo0bits+0x26>
 8009c78:	2020      	movs	r0, #32
 8009c7a:	e7e2      	b.n	8009c42 <__lo0bits+0x22>

08009c7c <__i2b>:
 8009c7c:	b510      	push	{r4, lr}
 8009c7e:	000c      	movs	r4, r1
 8009c80:	2101      	movs	r1, #1
 8009c82:	f7ff febb 	bl	80099fc <_Balloc>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d107      	bne.n	8009c9a <__i2b+0x1e>
 8009c8a:	2146      	movs	r1, #70	; 0x46
 8009c8c:	4c05      	ldr	r4, [pc, #20]	; (8009ca4 <__i2b+0x28>)
 8009c8e:	0002      	movs	r2, r0
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <__i2b+0x2c>)
 8009c92:	0020      	movs	r0, r4
 8009c94:	31ff      	adds	r1, #255	; 0xff
 8009c96:	f001 fe4d 	bl	800b934 <__assert_func>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	6144      	str	r4, [r0, #20]
 8009c9e:	6103      	str	r3, [r0, #16]
 8009ca0:	bd10      	pop	{r4, pc}
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	0800d0d6 	.word	0x0800d0d6
 8009ca8:	0800d0c5 	.word	0x0800d0c5

08009cac <__multiply>:
 8009cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cae:	0015      	movs	r5, r2
 8009cb0:	690a      	ldr	r2, [r1, #16]
 8009cb2:	692b      	ldr	r3, [r5, #16]
 8009cb4:	000c      	movs	r4, r1
 8009cb6:	b08b      	sub	sp, #44	; 0x2c
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	da01      	bge.n	8009cc0 <__multiply+0x14>
 8009cbc:	002c      	movs	r4, r5
 8009cbe:	000d      	movs	r5, r1
 8009cc0:	6927      	ldr	r7, [r4, #16]
 8009cc2:	692e      	ldr	r6, [r5, #16]
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	19bb      	adds	r3, r7, r6
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	19ba      	adds	r2, r7, r6
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	da00      	bge.n	8009cd4 <__multiply+0x28>
 8009cd2:	3101      	adds	r1, #1
 8009cd4:	f7ff fe92 	bl	80099fc <_Balloc>
 8009cd8:	9002      	str	r0, [sp, #8]
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d106      	bne.n	8009cec <__multiply+0x40>
 8009cde:	21b1      	movs	r1, #177	; 0xb1
 8009ce0:	4b48      	ldr	r3, [pc, #288]	; (8009e04 <__multiply+0x158>)
 8009ce2:	4849      	ldr	r0, [pc, #292]	; (8009e08 <__multiply+0x15c>)
 8009ce4:	9a02      	ldr	r2, [sp, #8]
 8009ce6:	0049      	lsls	r1, r1, #1
 8009ce8:	f001 fe24 	bl	800b934 <__assert_func>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	3314      	adds	r3, #20
 8009cf2:	469c      	mov	ip, r3
 8009cf4:	19bb      	adds	r3, r7, r6
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4463      	add	r3, ip
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	4663      	mov	r3, ip
 8009cfe:	9904      	ldr	r1, [sp, #16]
 8009d00:	428b      	cmp	r3, r1
 8009d02:	d32a      	bcc.n	8009d5a <__multiply+0xae>
 8009d04:	0023      	movs	r3, r4
 8009d06:	00bf      	lsls	r7, r7, #2
 8009d08:	3314      	adds	r3, #20
 8009d0a:	3514      	adds	r5, #20
 8009d0c:	9308      	str	r3, [sp, #32]
 8009d0e:	00b6      	lsls	r6, r6, #2
 8009d10:	19db      	adds	r3, r3, r7
 8009d12:	9305      	str	r3, [sp, #20]
 8009d14:	19ab      	adds	r3, r5, r6
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	2304      	movs	r3, #4
 8009d1a:	9306      	str	r3, [sp, #24]
 8009d1c:	0023      	movs	r3, r4
 8009d1e:	9a05      	ldr	r2, [sp, #20]
 8009d20:	3315      	adds	r3, #21
 8009d22:	9501      	str	r5, [sp, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d305      	bcc.n	8009d34 <__multiply+0x88>
 8009d28:	1b13      	subs	r3, r2, r4
 8009d2a:	3b15      	subs	r3, #21
 8009d2c:	089b      	lsrs	r3, r3, #2
 8009d2e:	3301      	adds	r3, #1
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	9306      	str	r3, [sp, #24]
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d310      	bcc.n	8009d5e <__multiply+0xb2>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd05      	ble.n	8009d4e <__multiply+0xa2>
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	3b04      	subs	r3, #4
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d056      	beq.n	8009dfc <__multiply+0x150>
 8009d4e:	9b02      	ldr	r3, [sp, #8]
 8009d50:	9a03      	ldr	r2, [sp, #12]
 8009d52:	0018      	movs	r0, r3
 8009d54:	611a      	str	r2, [r3, #16]
 8009d56:	b00b      	add	sp, #44	; 0x2c
 8009d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5a:	c304      	stmia	r3!, {r2}
 8009d5c:	e7cf      	b.n	8009cfe <__multiply+0x52>
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	b280      	uxth	r0, r0
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d01e      	beq.n	8009da6 <__multiply+0xfa>
 8009d68:	4667      	mov	r7, ip
 8009d6a:	2500      	movs	r5, #0
 8009d6c:	9e08      	ldr	r6, [sp, #32]
 8009d6e:	ce02      	ldmia	r6!, {r1}
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	9307      	str	r3, [sp, #28]
 8009d74:	b28b      	uxth	r3, r1
 8009d76:	4343      	muls	r3, r0
 8009d78:	001a      	movs	r2, r3
 8009d7a:	466b      	mov	r3, sp
 8009d7c:	8b9b      	ldrh	r3, [r3, #28]
 8009d7e:	18d3      	adds	r3, r2, r3
 8009d80:	195b      	adds	r3, r3, r5
 8009d82:	0c0d      	lsrs	r5, r1, #16
 8009d84:	4345      	muls	r5, r0
 8009d86:	9a07      	ldr	r2, [sp, #28]
 8009d88:	0c11      	lsrs	r1, r2, #16
 8009d8a:	1869      	adds	r1, r5, r1
 8009d8c:	0c1a      	lsrs	r2, r3, #16
 8009d8e:	188a      	adds	r2, r1, r2
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	0c15      	lsrs	r5, r2, #16
 8009d94:	0412      	lsls	r2, r2, #16
 8009d96:	431a      	orrs	r2, r3
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	c704      	stmia	r7!, {r2}
 8009d9c:	42b3      	cmp	r3, r6
 8009d9e:	d8e6      	bhi.n	8009d6e <__multiply+0xc2>
 8009da0:	4663      	mov	r3, ip
 8009da2:	9a06      	ldr	r2, [sp, #24]
 8009da4:	509d      	str	r5, [r3, r2]
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	0c00      	lsrs	r0, r0, #16
 8009dac:	d020      	beq.n	8009df0 <__multiply+0x144>
 8009dae:	4663      	mov	r3, ip
 8009db0:	0025      	movs	r5, r4
 8009db2:	4661      	mov	r1, ip
 8009db4:	2700      	movs	r7, #0
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3514      	adds	r5, #20
 8009dba:	682a      	ldr	r2, [r5, #0]
 8009dbc:	680e      	ldr	r6, [r1, #0]
 8009dbe:	b292      	uxth	r2, r2
 8009dc0:	4342      	muls	r2, r0
 8009dc2:	0c36      	lsrs	r6, r6, #16
 8009dc4:	1992      	adds	r2, r2, r6
 8009dc6:	19d2      	adds	r2, r2, r7
 8009dc8:	0416      	lsls	r6, r2, #16
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	431e      	orrs	r6, r3
 8009dce:	600e      	str	r6, [r1, #0]
 8009dd0:	cd40      	ldmia	r5!, {r6}
 8009dd2:	684b      	ldr	r3, [r1, #4]
 8009dd4:	0c36      	lsrs	r6, r6, #16
 8009dd6:	4346      	muls	r6, r0
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	0c12      	lsrs	r2, r2, #16
 8009ddc:	18f3      	adds	r3, r6, r3
 8009dde:	189b      	adds	r3, r3, r2
 8009de0:	9a05      	ldr	r2, [sp, #20]
 8009de2:	0c1f      	lsrs	r7, r3, #16
 8009de4:	3104      	adds	r1, #4
 8009de6:	42aa      	cmp	r2, r5
 8009de8:	d8e7      	bhi.n	8009dba <__multiply+0x10e>
 8009dea:	4662      	mov	r2, ip
 8009dec:	9906      	ldr	r1, [sp, #24]
 8009dee:	5053      	str	r3, [r2, r1]
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	2304      	movs	r3, #4
 8009df8:	449c      	add	ip, r3
 8009dfa:	e79b      	b.n	8009d34 <__multiply+0x88>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	9303      	str	r3, [sp, #12]
 8009e02:	e79b      	b.n	8009d3c <__multiply+0x90>
 8009e04:	0800d0c5 	.word	0x0800d0c5
 8009e08:	0800d0d6 	.word	0x0800d0d6

08009e0c <__pow5mult>:
 8009e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e0e:	2303      	movs	r3, #3
 8009e10:	0015      	movs	r5, r2
 8009e12:	0007      	movs	r7, r0
 8009e14:	000e      	movs	r6, r1
 8009e16:	401a      	ands	r2, r3
 8009e18:	421d      	tst	r5, r3
 8009e1a:	d008      	beq.n	8009e2e <__pow5mult+0x22>
 8009e1c:	4925      	ldr	r1, [pc, #148]	; (8009eb4 <__pow5mult+0xa8>)
 8009e1e:	3a01      	subs	r2, #1
 8009e20:	0092      	lsls	r2, r2, #2
 8009e22:	5852      	ldr	r2, [r2, r1]
 8009e24:	2300      	movs	r3, #0
 8009e26:	0031      	movs	r1, r6
 8009e28:	f7ff fe50 	bl	8009acc <__multadd>
 8009e2c:	0006      	movs	r6, r0
 8009e2e:	10ad      	asrs	r5, r5, #2
 8009e30:	d03d      	beq.n	8009eae <__pow5mult+0xa2>
 8009e32:	69fc      	ldr	r4, [r7, #28]
 8009e34:	2c00      	cmp	r4, #0
 8009e36:	d10f      	bne.n	8009e58 <__pow5mult+0x4c>
 8009e38:	2010      	movs	r0, #16
 8009e3a:	f7ff fd21 	bl	8009880 <malloc>
 8009e3e:	1e02      	subs	r2, r0, #0
 8009e40:	61f8      	str	r0, [r7, #28]
 8009e42:	d105      	bne.n	8009e50 <__pow5mult+0x44>
 8009e44:	21b4      	movs	r1, #180	; 0xb4
 8009e46:	4b1c      	ldr	r3, [pc, #112]	; (8009eb8 <__pow5mult+0xac>)
 8009e48:	481c      	ldr	r0, [pc, #112]	; (8009ebc <__pow5mult+0xb0>)
 8009e4a:	31ff      	adds	r1, #255	; 0xff
 8009e4c:	f001 fd72 	bl	800b934 <__assert_func>
 8009e50:	6044      	str	r4, [r0, #4]
 8009e52:	6084      	str	r4, [r0, #8]
 8009e54:	6004      	str	r4, [r0, #0]
 8009e56:	60c4      	str	r4, [r0, #12]
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	689c      	ldr	r4, [r3, #8]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	2c00      	cmp	r4, #0
 8009e60:	d108      	bne.n	8009e74 <__pow5mult+0x68>
 8009e62:	0038      	movs	r0, r7
 8009e64:	4916      	ldr	r1, [pc, #88]	; (8009ec0 <__pow5mult+0xb4>)
 8009e66:	f7ff ff09 	bl	8009c7c <__i2b>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	0004      	movs	r4, r0
 8009e6e:	6098      	str	r0, [r3, #8]
 8009e70:	2300      	movs	r3, #0
 8009e72:	6003      	str	r3, [r0, #0]
 8009e74:	2301      	movs	r3, #1
 8009e76:	421d      	tst	r5, r3
 8009e78:	d00a      	beq.n	8009e90 <__pow5mult+0x84>
 8009e7a:	0031      	movs	r1, r6
 8009e7c:	0022      	movs	r2, r4
 8009e7e:	0038      	movs	r0, r7
 8009e80:	f7ff ff14 	bl	8009cac <__multiply>
 8009e84:	0031      	movs	r1, r6
 8009e86:	9001      	str	r0, [sp, #4]
 8009e88:	0038      	movs	r0, r7
 8009e8a:	f7ff fdfb 	bl	8009a84 <_Bfree>
 8009e8e:	9e01      	ldr	r6, [sp, #4]
 8009e90:	106d      	asrs	r5, r5, #1
 8009e92:	d00c      	beq.n	8009eae <__pow5mult+0xa2>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d107      	bne.n	8009eaa <__pow5mult+0x9e>
 8009e9a:	0022      	movs	r2, r4
 8009e9c:	0021      	movs	r1, r4
 8009e9e:	0038      	movs	r0, r7
 8009ea0:	f7ff ff04 	bl	8009cac <__multiply>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	6020      	str	r0, [r4, #0]
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	0004      	movs	r4, r0
 8009eac:	e7e2      	b.n	8009e74 <__pow5mult+0x68>
 8009eae:	0030      	movs	r0, r6
 8009eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	0800d220 	.word	0x0800d220
 8009eb8:	0800d056 	.word	0x0800d056
 8009ebc:	0800d0d6 	.word	0x0800d0d6
 8009ec0:	00000271 	.word	0x00000271

08009ec4 <__lshift>:
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	000c      	movs	r4, r1
 8009ec8:	0017      	movs	r7, r2
 8009eca:	6923      	ldr	r3, [r4, #16]
 8009ecc:	1155      	asrs	r5, r2, #5
 8009ece:	b087      	sub	sp, #28
 8009ed0:	18eb      	adds	r3, r5, r3
 8009ed2:	9302      	str	r3, [sp, #8]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	6849      	ldr	r1, [r1, #4]
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	9004      	str	r0, [sp, #16]
 8009ede:	9a01      	ldr	r2, [sp, #4]
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	db10      	blt.n	8009f06 <__lshift+0x42>
 8009ee4:	9804      	ldr	r0, [sp, #16]
 8009ee6:	f7ff fd89 	bl	80099fc <_Balloc>
 8009eea:	2300      	movs	r3, #0
 8009eec:	0002      	movs	r2, r0
 8009eee:	0006      	movs	r6, r0
 8009ef0:	0019      	movs	r1, r3
 8009ef2:	3214      	adds	r2, #20
 8009ef4:	4298      	cmp	r0, r3
 8009ef6:	d10c      	bne.n	8009f12 <__lshift+0x4e>
 8009ef8:	31df      	adds	r1, #223	; 0xdf
 8009efa:	0032      	movs	r2, r6
 8009efc:	4b26      	ldr	r3, [pc, #152]	; (8009f98 <__lshift+0xd4>)
 8009efe:	4827      	ldr	r0, [pc, #156]	; (8009f9c <__lshift+0xd8>)
 8009f00:	31ff      	adds	r1, #255	; 0xff
 8009f02:	f001 fd17 	bl	800b934 <__assert_func>
 8009f06:	3101      	adds	r1, #1
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	e7e8      	b.n	8009ede <__lshift+0x1a>
 8009f0c:	0098      	lsls	r0, r3, #2
 8009f0e:	5011      	str	r1, [r2, r0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	42ab      	cmp	r3, r5
 8009f14:	dbfa      	blt.n	8009f0c <__lshift+0x48>
 8009f16:	43eb      	mvns	r3, r5
 8009f18:	17db      	asrs	r3, r3, #31
 8009f1a:	401d      	ands	r5, r3
 8009f1c:	211f      	movs	r1, #31
 8009f1e:	0023      	movs	r3, r4
 8009f20:	0038      	movs	r0, r7
 8009f22:	00ad      	lsls	r5, r5, #2
 8009f24:	1955      	adds	r5, r2, r5
 8009f26:	6922      	ldr	r2, [r4, #16]
 8009f28:	3314      	adds	r3, #20
 8009f2a:	0092      	lsls	r2, r2, #2
 8009f2c:	4008      	ands	r0, r1
 8009f2e:	4684      	mov	ip, r0
 8009f30:	189a      	adds	r2, r3, r2
 8009f32:	420f      	tst	r7, r1
 8009f34:	d02a      	beq.n	8009f8c <__lshift+0xc8>
 8009f36:	3101      	adds	r1, #1
 8009f38:	1a09      	subs	r1, r1, r0
 8009f3a:	9105      	str	r1, [sp, #20]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	9503      	str	r5, [sp, #12]
 8009f40:	4667      	mov	r7, ip
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	40b8      	lsls	r0, r7
 8009f46:	4308      	orrs	r0, r1
 8009f48:	9903      	ldr	r1, [sp, #12]
 8009f4a:	c101      	stmia	r1!, {r0}
 8009f4c:	9103      	str	r1, [sp, #12]
 8009f4e:	9805      	ldr	r0, [sp, #20]
 8009f50:	cb02      	ldmia	r3!, {r1}
 8009f52:	40c1      	lsrs	r1, r0
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d8f3      	bhi.n	8009f40 <__lshift+0x7c>
 8009f58:	0020      	movs	r0, r4
 8009f5a:	3015      	adds	r0, #21
 8009f5c:	2304      	movs	r3, #4
 8009f5e:	4282      	cmp	r2, r0
 8009f60:	d304      	bcc.n	8009f6c <__lshift+0xa8>
 8009f62:	1b13      	subs	r3, r2, r4
 8009f64:	3b15      	subs	r3, #21
 8009f66:	089b      	lsrs	r3, r3, #2
 8009f68:	3301      	adds	r3, #1
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	50e9      	str	r1, [r5, r3]
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d002      	beq.n	8009f78 <__lshift+0xb4>
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	3302      	adds	r3, #2
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	9804      	ldr	r0, [sp, #16]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	0021      	movs	r1, r4
 8009f80:	6133      	str	r3, [r6, #16]
 8009f82:	f7ff fd7f 	bl	8009a84 <_Bfree>
 8009f86:	0030      	movs	r0, r6
 8009f88:	b007      	add	sp, #28
 8009f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f8c:	cb02      	ldmia	r3!, {r1}
 8009f8e:	c502      	stmia	r5!, {r1}
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d8fb      	bhi.n	8009f8c <__lshift+0xc8>
 8009f94:	e7f0      	b.n	8009f78 <__lshift+0xb4>
 8009f96:	46c0      	nop			; (mov r8, r8)
 8009f98:	0800d0c5 	.word	0x0800d0c5
 8009f9c:	0800d0d6 	.word	0x0800d0d6

08009fa0 <__mcmp>:
 8009fa0:	b530      	push	{r4, r5, lr}
 8009fa2:	690b      	ldr	r3, [r1, #16]
 8009fa4:	6904      	ldr	r4, [r0, #16]
 8009fa6:	0002      	movs	r2, r0
 8009fa8:	1ae0      	subs	r0, r4, r3
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d10e      	bne.n	8009fcc <__mcmp+0x2c>
 8009fae:	3214      	adds	r2, #20
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	3114      	adds	r1, #20
 8009fb4:	0014      	movs	r4, r2
 8009fb6:	18c9      	adds	r1, r1, r3
 8009fb8:	18d2      	adds	r2, r2, r3
 8009fba:	3a04      	subs	r2, #4
 8009fbc:	3904      	subs	r1, #4
 8009fbe:	6815      	ldr	r5, [r2, #0]
 8009fc0:	680b      	ldr	r3, [r1, #0]
 8009fc2:	429d      	cmp	r5, r3
 8009fc4:	d003      	beq.n	8009fce <__mcmp+0x2e>
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	429d      	cmp	r5, r3
 8009fca:	d303      	bcc.n	8009fd4 <__mcmp+0x34>
 8009fcc:	bd30      	pop	{r4, r5, pc}
 8009fce:	4294      	cmp	r4, r2
 8009fd0:	d3f3      	bcc.n	8009fba <__mcmp+0x1a>
 8009fd2:	e7fb      	b.n	8009fcc <__mcmp+0x2c>
 8009fd4:	4240      	negs	r0, r0
 8009fd6:	e7f9      	b.n	8009fcc <__mcmp+0x2c>

08009fd8 <__mdiff>:
 8009fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fda:	000e      	movs	r6, r1
 8009fdc:	0007      	movs	r7, r0
 8009fde:	0011      	movs	r1, r2
 8009fe0:	0030      	movs	r0, r6
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	0014      	movs	r4, r2
 8009fe6:	f7ff ffdb 	bl	8009fa0 <__mcmp>
 8009fea:	1e05      	subs	r5, r0, #0
 8009fec:	d110      	bne.n	800a010 <__mdiff+0x38>
 8009fee:	0001      	movs	r1, r0
 8009ff0:	0038      	movs	r0, r7
 8009ff2:	f7ff fd03 	bl	80099fc <_Balloc>
 8009ff6:	1e02      	subs	r2, r0, #0
 8009ff8:	d104      	bne.n	800a004 <__mdiff+0x2c>
 8009ffa:	4b3f      	ldr	r3, [pc, #252]	; (800a0f8 <__mdiff+0x120>)
 8009ffc:	483f      	ldr	r0, [pc, #252]	; (800a0fc <__mdiff+0x124>)
 8009ffe:	4940      	ldr	r1, [pc, #256]	; (800a100 <__mdiff+0x128>)
 800a000:	f001 fc98 	bl	800b934 <__assert_func>
 800a004:	2301      	movs	r3, #1
 800a006:	6145      	str	r5, [r0, #20]
 800a008:	6103      	str	r3, [r0, #16]
 800a00a:	0010      	movs	r0, r2
 800a00c:	b007      	add	sp, #28
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	2301      	movs	r3, #1
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	2800      	cmp	r0, #0
 800a016:	db04      	blt.n	800a022 <__mdiff+0x4a>
 800a018:	0023      	movs	r3, r4
 800a01a:	0034      	movs	r4, r6
 800a01c:	001e      	movs	r6, r3
 800a01e:	2300      	movs	r3, #0
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	0038      	movs	r0, r7
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	f7ff fce9 	bl	80099fc <_Balloc>
 800a02a:	1e02      	subs	r2, r0, #0
 800a02c:	d103      	bne.n	800a036 <__mdiff+0x5e>
 800a02e:	4b32      	ldr	r3, [pc, #200]	; (800a0f8 <__mdiff+0x120>)
 800a030:	4832      	ldr	r0, [pc, #200]	; (800a0fc <__mdiff+0x124>)
 800a032:	4934      	ldr	r1, [pc, #208]	; (800a104 <__mdiff+0x12c>)
 800a034:	e7e4      	b.n	800a000 <__mdiff+0x28>
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	2700      	movs	r7, #0
 800a03a:	60c3      	str	r3, [r0, #12]
 800a03c:	6920      	ldr	r0, [r4, #16]
 800a03e:	3414      	adds	r4, #20
 800a040:	0083      	lsls	r3, r0, #2
 800a042:	18e3      	adds	r3, r4, r3
 800a044:	0021      	movs	r1, r4
 800a046:	9401      	str	r4, [sp, #4]
 800a048:	0034      	movs	r4, r6
 800a04a:	9302      	str	r3, [sp, #8]
 800a04c:	6933      	ldr	r3, [r6, #16]
 800a04e:	3414      	adds	r4, #20
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	18e3      	adds	r3, r4, r3
 800a054:	9303      	str	r3, [sp, #12]
 800a056:	0013      	movs	r3, r2
 800a058:	3314      	adds	r3, #20
 800a05a:	469c      	mov	ip, r3
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	9104      	str	r1, [sp, #16]
 800a060:	9b04      	ldr	r3, [sp, #16]
 800a062:	cc02      	ldmia	r4!, {r1}
 800a064:	cb20      	ldmia	r3!, {r5}
 800a066:	9304      	str	r3, [sp, #16]
 800a068:	b2ab      	uxth	r3, r5
 800a06a:	19df      	adds	r7, r3, r7
 800a06c:	b28b      	uxth	r3, r1
 800a06e:	1afb      	subs	r3, r7, r3
 800a070:	0c09      	lsrs	r1, r1, #16
 800a072:	0c2d      	lsrs	r5, r5, #16
 800a074:	1a6d      	subs	r5, r5, r1
 800a076:	1419      	asrs	r1, r3, #16
 800a078:	1869      	adds	r1, r5, r1
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	140f      	asrs	r7, r1, #16
 800a07e:	0409      	lsls	r1, r1, #16
 800a080:	4319      	orrs	r1, r3
 800a082:	4663      	mov	r3, ip
 800a084:	c302      	stmia	r3!, {r1}
 800a086:	469c      	mov	ip, r3
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	42a3      	cmp	r3, r4
 800a08c:	d8e8      	bhi.n	800a060 <__mdiff+0x88>
 800a08e:	0031      	movs	r1, r6
 800a090:	9c03      	ldr	r4, [sp, #12]
 800a092:	3115      	adds	r1, #21
 800a094:	2304      	movs	r3, #4
 800a096:	428c      	cmp	r4, r1
 800a098:	d304      	bcc.n	800a0a4 <__mdiff+0xcc>
 800a09a:	1ba3      	subs	r3, r4, r6
 800a09c:	3b15      	subs	r3, #21
 800a09e:	089b      	lsrs	r3, r3, #2
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	9901      	ldr	r1, [sp, #4]
 800a0a6:	18cd      	adds	r5, r1, r3
 800a0a8:	9905      	ldr	r1, [sp, #20]
 800a0aa:	002e      	movs	r6, r5
 800a0ac:	18cb      	adds	r3, r1, r3
 800a0ae:	469c      	mov	ip, r3
 800a0b0:	9902      	ldr	r1, [sp, #8]
 800a0b2:	428e      	cmp	r6, r1
 800a0b4:	d310      	bcc.n	800a0d8 <__mdiff+0x100>
 800a0b6:	9e02      	ldr	r6, [sp, #8]
 800a0b8:	1ee9      	subs	r1, r5, #3
 800a0ba:	2400      	movs	r4, #0
 800a0bc:	428e      	cmp	r6, r1
 800a0be:	d304      	bcc.n	800a0ca <__mdiff+0xf2>
 800a0c0:	0031      	movs	r1, r6
 800a0c2:	3103      	adds	r1, #3
 800a0c4:	1b49      	subs	r1, r1, r5
 800a0c6:	0889      	lsrs	r1, r1, #2
 800a0c8:	008c      	lsls	r4, r1, #2
 800a0ca:	191b      	adds	r3, r3, r4
 800a0cc:	3b04      	subs	r3, #4
 800a0ce:	6819      	ldr	r1, [r3, #0]
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d00f      	beq.n	800a0f4 <__mdiff+0x11c>
 800a0d4:	6110      	str	r0, [r2, #16]
 800a0d6:	e798      	b.n	800a00a <__mdiff+0x32>
 800a0d8:	ce02      	ldmia	r6!, {r1}
 800a0da:	b28c      	uxth	r4, r1
 800a0dc:	19e4      	adds	r4, r4, r7
 800a0de:	0c0f      	lsrs	r7, r1, #16
 800a0e0:	1421      	asrs	r1, r4, #16
 800a0e2:	1879      	adds	r1, r7, r1
 800a0e4:	b2a4      	uxth	r4, r4
 800a0e6:	140f      	asrs	r7, r1, #16
 800a0e8:	0409      	lsls	r1, r1, #16
 800a0ea:	4321      	orrs	r1, r4
 800a0ec:	4664      	mov	r4, ip
 800a0ee:	c402      	stmia	r4!, {r1}
 800a0f0:	46a4      	mov	ip, r4
 800a0f2:	e7dd      	b.n	800a0b0 <__mdiff+0xd8>
 800a0f4:	3801      	subs	r0, #1
 800a0f6:	e7e9      	b.n	800a0cc <__mdiff+0xf4>
 800a0f8:	0800d0c5 	.word	0x0800d0c5
 800a0fc:	0800d0d6 	.word	0x0800d0d6
 800a100:	00000237 	.word	0x00000237
 800a104:	00000245 	.word	0x00000245

0800a108 <__ulp>:
 800a108:	2000      	movs	r0, #0
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <__ulp+0x30>)
 800a10c:	4019      	ands	r1, r3
 800a10e:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <__ulp+0x34>)
 800a110:	18c9      	adds	r1, r1, r3
 800a112:	4281      	cmp	r1, r0
 800a114:	dc06      	bgt.n	800a124 <__ulp+0x1c>
 800a116:	4249      	negs	r1, r1
 800a118:	150b      	asrs	r3, r1, #20
 800a11a:	2b13      	cmp	r3, #19
 800a11c:	dc03      	bgt.n	800a126 <__ulp+0x1e>
 800a11e:	2180      	movs	r1, #128	; 0x80
 800a120:	0309      	lsls	r1, r1, #12
 800a122:	4119      	asrs	r1, r3
 800a124:	4770      	bx	lr
 800a126:	3b14      	subs	r3, #20
 800a128:	2001      	movs	r0, #1
 800a12a:	2b1e      	cmp	r3, #30
 800a12c:	dc02      	bgt.n	800a134 <__ulp+0x2c>
 800a12e:	2080      	movs	r0, #128	; 0x80
 800a130:	0600      	lsls	r0, r0, #24
 800a132:	40d8      	lsrs	r0, r3
 800a134:	2100      	movs	r1, #0
 800a136:	e7f5      	b.n	800a124 <__ulp+0x1c>
 800a138:	7ff00000 	.word	0x7ff00000
 800a13c:	fcc00000 	.word	0xfcc00000

0800a140 <__b2d>:
 800a140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a142:	0006      	movs	r6, r0
 800a144:	6903      	ldr	r3, [r0, #16]
 800a146:	3614      	adds	r6, #20
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	18f3      	adds	r3, r6, r3
 800a14c:	1f1d      	subs	r5, r3, #4
 800a14e:	682c      	ldr	r4, [r5, #0]
 800a150:	000f      	movs	r7, r1
 800a152:	0020      	movs	r0, r4
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	f7ff fd49 	bl	8009bec <__hi0bits>
 800a15a:	2220      	movs	r2, #32
 800a15c:	1a12      	subs	r2, r2, r0
 800a15e:	603a      	str	r2, [r7, #0]
 800a160:	0003      	movs	r3, r0
 800a162:	4a1c      	ldr	r2, [pc, #112]	; (800a1d4 <__b2d+0x94>)
 800a164:	280a      	cmp	r0, #10
 800a166:	dc15      	bgt.n	800a194 <__b2d+0x54>
 800a168:	210b      	movs	r1, #11
 800a16a:	0027      	movs	r7, r4
 800a16c:	1a09      	subs	r1, r1, r0
 800a16e:	40cf      	lsrs	r7, r1
 800a170:	433a      	orrs	r2, r7
 800a172:	468c      	mov	ip, r1
 800a174:	0011      	movs	r1, r2
 800a176:	2200      	movs	r2, #0
 800a178:	42ae      	cmp	r6, r5
 800a17a:	d202      	bcs.n	800a182 <__b2d+0x42>
 800a17c:	9a01      	ldr	r2, [sp, #4]
 800a17e:	3a08      	subs	r2, #8
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	3315      	adds	r3, #21
 800a184:	409c      	lsls	r4, r3
 800a186:	4663      	mov	r3, ip
 800a188:	0027      	movs	r7, r4
 800a18a:	40da      	lsrs	r2, r3
 800a18c:	4317      	orrs	r7, r2
 800a18e:	0038      	movs	r0, r7
 800a190:	b003      	add	sp, #12
 800a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a194:	2700      	movs	r7, #0
 800a196:	42ae      	cmp	r6, r5
 800a198:	d202      	bcs.n	800a1a0 <__b2d+0x60>
 800a19a:	9d01      	ldr	r5, [sp, #4]
 800a19c:	3d08      	subs	r5, #8
 800a19e:	682f      	ldr	r7, [r5, #0]
 800a1a0:	210b      	movs	r1, #11
 800a1a2:	4249      	negs	r1, r1
 800a1a4:	468c      	mov	ip, r1
 800a1a6:	449c      	add	ip, r3
 800a1a8:	2b0b      	cmp	r3, #11
 800a1aa:	d010      	beq.n	800a1ce <__b2d+0x8e>
 800a1ac:	4661      	mov	r1, ip
 800a1ae:	2320      	movs	r3, #32
 800a1b0:	408c      	lsls	r4, r1
 800a1b2:	1a5b      	subs	r3, r3, r1
 800a1b4:	0039      	movs	r1, r7
 800a1b6:	40d9      	lsrs	r1, r3
 800a1b8:	430c      	orrs	r4, r1
 800a1ba:	4322      	orrs	r2, r4
 800a1bc:	0011      	movs	r1, r2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	42b5      	cmp	r5, r6
 800a1c2:	d901      	bls.n	800a1c8 <__b2d+0x88>
 800a1c4:	3d04      	subs	r5, #4
 800a1c6:	682a      	ldr	r2, [r5, #0]
 800a1c8:	4664      	mov	r4, ip
 800a1ca:	40a7      	lsls	r7, r4
 800a1cc:	e7dd      	b.n	800a18a <__b2d+0x4a>
 800a1ce:	4322      	orrs	r2, r4
 800a1d0:	0011      	movs	r1, r2
 800a1d2:	e7dc      	b.n	800a18e <__b2d+0x4e>
 800a1d4:	3ff00000 	.word	0x3ff00000

0800a1d8 <__d2b>:
 800a1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1da:	2101      	movs	r1, #1
 800a1dc:	0014      	movs	r4, r2
 800a1de:	001d      	movs	r5, r3
 800a1e0:	9f08      	ldr	r7, [sp, #32]
 800a1e2:	f7ff fc0b 	bl	80099fc <_Balloc>
 800a1e6:	1e06      	subs	r6, r0, #0
 800a1e8:	d105      	bne.n	800a1f6 <__d2b+0x1e>
 800a1ea:	0032      	movs	r2, r6
 800a1ec:	4b24      	ldr	r3, [pc, #144]	; (800a280 <__d2b+0xa8>)
 800a1ee:	4825      	ldr	r0, [pc, #148]	; (800a284 <__d2b+0xac>)
 800a1f0:	4925      	ldr	r1, [pc, #148]	; (800a288 <__d2b+0xb0>)
 800a1f2:	f001 fb9f 	bl	800b934 <__assert_func>
 800a1f6:	032b      	lsls	r3, r5, #12
 800a1f8:	006d      	lsls	r5, r5, #1
 800a1fa:	0b1b      	lsrs	r3, r3, #12
 800a1fc:	0d6d      	lsrs	r5, r5, #21
 800a1fe:	d125      	bne.n	800a24c <__d2b+0x74>
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	2c00      	cmp	r4, #0
 800a204:	d028      	beq.n	800a258 <__d2b+0x80>
 800a206:	4668      	mov	r0, sp
 800a208:	9400      	str	r4, [sp, #0]
 800a20a:	f7ff fd09 	bl	8009c20 <__lo0bits>
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	9900      	ldr	r1, [sp, #0]
 800a212:	2800      	cmp	r0, #0
 800a214:	d01e      	beq.n	800a254 <__d2b+0x7c>
 800a216:	2220      	movs	r2, #32
 800a218:	001c      	movs	r4, r3
 800a21a:	1a12      	subs	r2, r2, r0
 800a21c:	4094      	lsls	r4, r2
 800a21e:	0022      	movs	r2, r4
 800a220:	40c3      	lsrs	r3, r0
 800a222:	430a      	orrs	r2, r1
 800a224:	6172      	str	r2, [r6, #20]
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	9c01      	ldr	r4, [sp, #4]
 800a22a:	61b4      	str	r4, [r6, #24]
 800a22c:	1e63      	subs	r3, r4, #1
 800a22e:	419c      	sbcs	r4, r3
 800a230:	3401      	adds	r4, #1
 800a232:	6134      	str	r4, [r6, #16]
 800a234:	2d00      	cmp	r5, #0
 800a236:	d017      	beq.n	800a268 <__d2b+0x90>
 800a238:	2435      	movs	r4, #53	; 0x35
 800a23a:	4b14      	ldr	r3, [pc, #80]	; (800a28c <__d2b+0xb4>)
 800a23c:	18ed      	adds	r5, r5, r3
 800a23e:	182d      	adds	r5, r5, r0
 800a240:	603d      	str	r5, [r7, #0]
 800a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a244:	1a24      	subs	r4, r4, r0
 800a246:	601c      	str	r4, [r3, #0]
 800a248:	0030      	movs	r0, r6
 800a24a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a24c:	2280      	movs	r2, #128	; 0x80
 800a24e:	0352      	lsls	r2, r2, #13
 800a250:	4313      	orrs	r3, r2
 800a252:	e7d5      	b.n	800a200 <__d2b+0x28>
 800a254:	6171      	str	r1, [r6, #20]
 800a256:	e7e7      	b.n	800a228 <__d2b+0x50>
 800a258:	a801      	add	r0, sp, #4
 800a25a:	f7ff fce1 	bl	8009c20 <__lo0bits>
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	2401      	movs	r4, #1
 800a262:	6173      	str	r3, [r6, #20]
 800a264:	3020      	adds	r0, #32
 800a266:	e7e4      	b.n	800a232 <__d2b+0x5a>
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <__d2b+0xb8>)
 800a26a:	18c0      	adds	r0, r0, r3
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <__d2b+0xbc>)
 800a26e:	6038      	str	r0, [r7, #0]
 800a270:	18e3      	adds	r3, r4, r3
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	18f3      	adds	r3, r6, r3
 800a276:	6958      	ldr	r0, [r3, #20]
 800a278:	f7ff fcb8 	bl	8009bec <__hi0bits>
 800a27c:	0164      	lsls	r4, r4, #5
 800a27e:	e7e0      	b.n	800a242 <__d2b+0x6a>
 800a280:	0800d0c5 	.word	0x0800d0c5
 800a284:	0800d0d6 	.word	0x0800d0d6
 800a288:	0000030f 	.word	0x0000030f
 800a28c:	fffffbcd 	.word	0xfffffbcd
 800a290:	fffffbce 	.word	0xfffffbce
 800a294:	3fffffff 	.word	0x3fffffff

0800a298 <__ratio>:
 800a298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a29a:	b087      	sub	sp, #28
 800a29c:	000f      	movs	r7, r1
 800a29e:	a904      	add	r1, sp, #16
 800a2a0:	0006      	movs	r6, r0
 800a2a2:	f7ff ff4d 	bl	800a140 <__b2d>
 800a2a6:	9000      	str	r0, [sp, #0]
 800a2a8:	9101      	str	r1, [sp, #4]
 800a2aa:	9c00      	ldr	r4, [sp, #0]
 800a2ac:	9d01      	ldr	r5, [sp, #4]
 800a2ae:	0038      	movs	r0, r7
 800a2b0:	a905      	add	r1, sp, #20
 800a2b2:	f7ff ff45 	bl	800a140 <__b2d>
 800a2b6:	9002      	str	r0, [sp, #8]
 800a2b8:	9103      	str	r1, [sp, #12]
 800a2ba:	9a02      	ldr	r2, [sp, #8]
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	6930      	ldr	r0, [r6, #16]
 800a2c0:	6939      	ldr	r1, [r7, #16]
 800a2c2:	9e04      	ldr	r6, [sp, #16]
 800a2c4:	1a40      	subs	r0, r0, r1
 800a2c6:	9905      	ldr	r1, [sp, #20]
 800a2c8:	0140      	lsls	r0, r0, #5
 800a2ca:	1a71      	subs	r1, r6, r1
 800a2cc:	1841      	adds	r1, r0, r1
 800a2ce:	0508      	lsls	r0, r1, #20
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	dd07      	ble.n	800a2e4 <__ratio+0x4c>
 800a2d4:	9901      	ldr	r1, [sp, #4]
 800a2d6:	1845      	adds	r5, r0, r1
 800a2d8:	0020      	movs	r0, r4
 800a2da:	0029      	movs	r1, r5
 800a2dc:	f7f7 fa1e 	bl	800171c <__aeabi_ddiv>
 800a2e0:	b007      	add	sp, #28
 800a2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e4:	9903      	ldr	r1, [sp, #12]
 800a2e6:	1a0b      	subs	r3, r1, r0
 800a2e8:	e7f6      	b.n	800a2d8 <__ratio+0x40>

0800a2ea <__copybits>:
 800a2ea:	b570      	push	{r4, r5, r6, lr}
 800a2ec:	0014      	movs	r4, r2
 800a2ee:	0005      	movs	r5, r0
 800a2f0:	3901      	subs	r1, #1
 800a2f2:	6913      	ldr	r3, [r2, #16]
 800a2f4:	1149      	asrs	r1, r1, #5
 800a2f6:	3101      	adds	r1, #1
 800a2f8:	0089      	lsls	r1, r1, #2
 800a2fa:	3414      	adds	r4, #20
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	1841      	adds	r1, r0, r1
 800a300:	18e3      	adds	r3, r4, r3
 800a302:	42a3      	cmp	r3, r4
 800a304:	d80d      	bhi.n	800a322 <__copybits+0x38>
 800a306:	0014      	movs	r4, r2
 800a308:	3411      	adds	r4, #17
 800a30a:	2500      	movs	r5, #0
 800a30c:	429c      	cmp	r4, r3
 800a30e:	d803      	bhi.n	800a318 <__copybits+0x2e>
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	3b11      	subs	r3, #17
 800a314:	089b      	lsrs	r3, r3, #2
 800a316:	009d      	lsls	r5, r3, #2
 800a318:	2300      	movs	r3, #0
 800a31a:	1940      	adds	r0, r0, r5
 800a31c:	4281      	cmp	r1, r0
 800a31e:	d803      	bhi.n	800a328 <__copybits+0x3e>
 800a320:	bd70      	pop	{r4, r5, r6, pc}
 800a322:	cc40      	ldmia	r4!, {r6}
 800a324:	c540      	stmia	r5!, {r6}
 800a326:	e7ec      	b.n	800a302 <__copybits+0x18>
 800a328:	c008      	stmia	r0!, {r3}
 800a32a:	e7f7      	b.n	800a31c <__copybits+0x32>

0800a32c <__any_on>:
 800a32c:	0002      	movs	r2, r0
 800a32e:	6900      	ldr	r0, [r0, #16]
 800a330:	b510      	push	{r4, lr}
 800a332:	3214      	adds	r2, #20
 800a334:	114b      	asrs	r3, r1, #5
 800a336:	4298      	cmp	r0, r3
 800a338:	db13      	blt.n	800a362 <__any_on+0x36>
 800a33a:	dd0c      	ble.n	800a356 <__any_on+0x2a>
 800a33c:	241f      	movs	r4, #31
 800a33e:	0008      	movs	r0, r1
 800a340:	4020      	ands	r0, r4
 800a342:	4221      	tst	r1, r4
 800a344:	d007      	beq.n	800a356 <__any_on+0x2a>
 800a346:	0099      	lsls	r1, r3, #2
 800a348:	588c      	ldr	r4, [r1, r2]
 800a34a:	0021      	movs	r1, r4
 800a34c:	40c1      	lsrs	r1, r0
 800a34e:	4081      	lsls	r1, r0
 800a350:	2001      	movs	r0, #1
 800a352:	428c      	cmp	r4, r1
 800a354:	d104      	bne.n	800a360 <__any_on+0x34>
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	18d3      	adds	r3, r2, r3
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d803      	bhi.n	800a366 <__any_on+0x3a>
 800a35e:	2000      	movs	r0, #0
 800a360:	bd10      	pop	{r4, pc}
 800a362:	0003      	movs	r3, r0
 800a364:	e7f7      	b.n	800a356 <__any_on+0x2a>
 800a366:	3b04      	subs	r3, #4
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	2900      	cmp	r1, #0
 800a36c:	d0f5      	beq.n	800a35a <__any_on+0x2e>
 800a36e:	2001      	movs	r0, #1
 800a370:	e7f6      	b.n	800a360 <__any_on+0x34>
	...

0800a374 <sulp>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	0016      	movs	r6, r2
 800a378:	000d      	movs	r5, r1
 800a37a:	f7ff fec5 	bl	800a108 <__ulp>
 800a37e:	2e00      	cmp	r6, #0
 800a380:	d00d      	beq.n	800a39e <sulp+0x2a>
 800a382:	236b      	movs	r3, #107	; 0x6b
 800a384:	006a      	lsls	r2, r5, #1
 800a386:	0d52      	lsrs	r2, r2, #21
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dd07      	ble.n	800a39e <sulp+0x2a>
 800a38e:	2400      	movs	r4, #0
 800a390:	4a03      	ldr	r2, [pc, #12]	; (800a3a0 <sulp+0x2c>)
 800a392:	051b      	lsls	r3, r3, #20
 800a394:	189d      	adds	r5, r3, r2
 800a396:	002b      	movs	r3, r5
 800a398:	0022      	movs	r2, r4
 800a39a:	f7f7 fdb9 	bl	8001f10 <__aeabi_dmul>
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	3ff00000 	.word	0x3ff00000

0800a3a4 <_strtod_l>:
 800a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a6:	b0a1      	sub	sp, #132	; 0x84
 800a3a8:	9219      	str	r2, [sp, #100]	; 0x64
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2600      	movs	r6, #0
 800a3ae:	2700      	movs	r7, #0
 800a3b0:	9004      	str	r0, [sp, #16]
 800a3b2:	9107      	str	r1, [sp, #28]
 800a3b4:	921c      	str	r2, [sp, #112]	; 0x70
 800a3b6:	911b      	str	r1, [sp, #108]	; 0x6c
 800a3b8:	780a      	ldrb	r2, [r1, #0]
 800a3ba:	2a2b      	cmp	r2, #43	; 0x2b
 800a3bc:	d055      	beq.n	800a46a <_strtod_l+0xc6>
 800a3be:	d841      	bhi.n	800a444 <_strtod_l+0xa0>
 800a3c0:	2a0d      	cmp	r2, #13
 800a3c2:	d83b      	bhi.n	800a43c <_strtod_l+0x98>
 800a3c4:	2a08      	cmp	r2, #8
 800a3c6:	d83b      	bhi.n	800a440 <_strtod_l+0x9c>
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	d044      	beq.n	800a456 <_strtod_l+0xb2>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	920f      	str	r2, [sp, #60]	; 0x3c
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a3d4:	9109      	str	r1, [sp, #36]	; 0x24
 800a3d6:	782a      	ldrb	r2, [r5, #0]
 800a3d8:	2a30      	cmp	r2, #48	; 0x30
 800a3da:	d000      	beq.n	800a3de <_strtod_l+0x3a>
 800a3dc:	e085      	b.n	800a4ea <_strtod_l+0x146>
 800a3de:	786a      	ldrb	r2, [r5, #1]
 800a3e0:	3120      	adds	r1, #32
 800a3e2:	438a      	bics	r2, r1
 800a3e4:	2a58      	cmp	r2, #88	; 0x58
 800a3e6:	d000      	beq.n	800a3ea <_strtod_l+0x46>
 800a3e8:	e075      	b.n	800a4d6 <_strtod_l+0x132>
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3ee:	4a97      	ldr	r2, [pc, #604]	; (800a64c <_strtod_l+0x2a8>)
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	ab1c      	add	r3, sp, #112	; 0x70
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	9804      	ldr	r0, [sp, #16]
 800a3f8:	ab1d      	add	r3, sp, #116	; 0x74
 800a3fa:	a91b      	add	r1, sp, #108	; 0x6c
 800a3fc:	f001 fb50 	bl	800baa0 <__gethex>
 800a400:	230f      	movs	r3, #15
 800a402:	0002      	movs	r2, r0
 800a404:	401a      	ands	r2, r3
 800a406:	0004      	movs	r4, r0
 800a408:	9205      	str	r2, [sp, #20]
 800a40a:	4218      	tst	r0, r3
 800a40c:	d005      	beq.n	800a41a <_strtod_l+0x76>
 800a40e:	2a06      	cmp	r2, #6
 800a410:	d12d      	bne.n	800a46e <_strtod_l+0xca>
 800a412:	1c6b      	adds	r3, r5, #1
 800a414:	931b      	str	r3, [sp, #108]	; 0x6c
 800a416:	2300      	movs	r3, #0
 800a418:	930f      	str	r3, [sp, #60]	; 0x3c
 800a41a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <_strtod_l+0x82>
 800a420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a422:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01b      	beq.n	800a464 <_strtod_l+0xc0>
 800a42c:	2380      	movs	r3, #128	; 0x80
 800a42e:	0032      	movs	r2, r6
 800a430:	061b      	lsls	r3, r3, #24
 800a432:	18fb      	adds	r3, r7, r3
 800a434:	0010      	movs	r0, r2
 800a436:	0019      	movs	r1, r3
 800a438:	b021      	add	sp, #132	; 0x84
 800a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43c:	2a20      	cmp	r2, #32
 800a43e:	d1c5      	bne.n	800a3cc <_strtod_l+0x28>
 800a440:	3101      	adds	r1, #1
 800a442:	e7b8      	b.n	800a3b6 <_strtod_l+0x12>
 800a444:	2a2d      	cmp	r2, #45	; 0x2d
 800a446:	d1c1      	bne.n	800a3cc <_strtod_l+0x28>
 800a448:	3a2c      	subs	r2, #44	; 0x2c
 800a44a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a44c:	1c4a      	adds	r2, r1, #1
 800a44e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a450:	784a      	ldrb	r2, [r1, #1]
 800a452:	2a00      	cmp	r2, #0
 800a454:	d1bc      	bne.n	800a3d0 <_strtod_l+0x2c>
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	931b      	str	r3, [sp, #108]	; 0x6c
 800a45a:	2300      	movs	r3, #0
 800a45c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a45e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1dd      	bne.n	800a420 <_strtod_l+0x7c>
 800a464:	0032      	movs	r2, r6
 800a466:	003b      	movs	r3, r7
 800a468:	e7e4      	b.n	800a434 <_strtod_l+0x90>
 800a46a:	2200      	movs	r2, #0
 800a46c:	e7ed      	b.n	800a44a <_strtod_l+0xa6>
 800a46e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a470:	2a00      	cmp	r2, #0
 800a472:	d007      	beq.n	800a484 <_strtod_l+0xe0>
 800a474:	2135      	movs	r1, #53	; 0x35
 800a476:	a81e      	add	r0, sp, #120	; 0x78
 800a478:	f7ff ff37 	bl	800a2ea <__copybits>
 800a47c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a47e:	9804      	ldr	r0, [sp, #16]
 800a480:	f7ff fb00 	bl	8009a84 <_Bfree>
 800a484:	9805      	ldr	r0, [sp, #20]
 800a486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a488:	3801      	subs	r0, #1
 800a48a:	2804      	cmp	r0, #4
 800a48c:	d806      	bhi.n	800a49c <_strtod_l+0xf8>
 800a48e:	f7f5 fe43 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a492:	0312      	.short	0x0312
 800a494:	1e1c      	.short	0x1e1c
 800a496:	12          	.byte	0x12
 800a497:	00          	.byte	0x00
 800a498:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a49a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a49c:	05e4      	lsls	r4, r4, #23
 800a49e:	d502      	bpl.n	800a4a6 <_strtod_l+0x102>
 800a4a0:	2380      	movs	r3, #128	; 0x80
 800a4a2:	061b      	lsls	r3, r3, #24
 800a4a4:	431f      	orrs	r7, r3
 800a4a6:	4b6a      	ldr	r3, [pc, #424]	; (800a650 <_strtod_l+0x2ac>)
 800a4a8:	423b      	tst	r3, r7
 800a4aa:	d1b6      	bne.n	800a41a <_strtod_l+0x76>
 800a4ac:	f7fe faba 	bl	8008a24 <__errno>
 800a4b0:	2322      	movs	r3, #34	; 0x22
 800a4b2:	6003      	str	r3, [r0, #0]
 800a4b4:	e7b1      	b.n	800a41a <_strtod_l+0x76>
 800a4b6:	4967      	ldr	r1, [pc, #412]	; (800a654 <_strtod_l+0x2b0>)
 800a4b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a4ba:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a4bc:	400a      	ands	r2, r1
 800a4be:	4966      	ldr	r1, [pc, #408]	; (800a658 <_strtod_l+0x2b4>)
 800a4c0:	185b      	adds	r3, r3, r1
 800a4c2:	051b      	lsls	r3, r3, #20
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	0017      	movs	r7, r2
 800a4c8:	e7e8      	b.n	800a49c <_strtod_l+0xf8>
 800a4ca:	4f61      	ldr	r7, [pc, #388]	; (800a650 <_strtod_l+0x2ac>)
 800a4cc:	e7e6      	b.n	800a49c <_strtod_l+0xf8>
 800a4ce:	2601      	movs	r6, #1
 800a4d0:	4f62      	ldr	r7, [pc, #392]	; (800a65c <_strtod_l+0x2b8>)
 800a4d2:	4276      	negs	r6, r6
 800a4d4:	e7e2      	b.n	800a49c <_strtod_l+0xf8>
 800a4d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b30      	cmp	r3, #48	; 0x30
 800a4e0:	d0f9      	beq.n	800a4d6 <_strtod_l+0x132>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d099      	beq.n	800a41a <_strtod_l+0x76>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4f0:	950d      	str	r5, [sp, #52]	; 0x34
 800a4f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4f4:	9508      	str	r5, [sp, #32]
 800a4f6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a4f8:	7804      	ldrb	r4, [r0, #0]
 800a4fa:	0023      	movs	r3, r4
 800a4fc:	3b30      	subs	r3, #48	; 0x30
 800a4fe:	b2d9      	uxtb	r1, r3
 800a500:	2909      	cmp	r1, #9
 800a502:	d927      	bls.n	800a554 <_strtod_l+0x1b0>
 800a504:	2201      	movs	r2, #1
 800a506:	4956      	ldr	r1, [pc, #344]	; (800a660 <_strtod_l+0x2bc>)
 800a508:	f001 f9ea 	bl	800b8e0 <strncmp>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d031      	beq.n	800a574 <_strtod_l+0x1d0>
 800a510:	2000      	movs	r0, #0
 800a512:	0023      	movs	r3, r4
 800a514:	4684      	mov	ip, r0
 800a516:	9a08      	ldr	r2, [sp, #32]
 800a518:	900c      	str	r0, [sp, #48]	; 0x30
 800a51a:	9205      	str	r2, [sp, #20]
 800a51c:	2220      	movs	r2, #32
 800a51e:	0019      	movs	r1, r3
 800a520:	4391      	bics	r1, r2
 800a522:	000a      	movs	r2, r1
 800a524:	2100      	movs	r1, #0
 800a526:	9106      	str	r1, [sp, #24]
 800a528:	2a45      	cmp	r2, #69	; 0x45
 800a52a:	d000      	beq.n	800a52e <_strtod_l+0x18a>
 800a52c:	e0c2      	b.n	800a6b4 <_strtod_l+0x310>
 800a52e:	9b05      	ldr	r3, [sp, #20]
 800a530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a532:	4303      	orrs	r3, r0
 800a534:	4313      	orrs	r3, r2
 800a536:	428b      	cmp	r3, r1
 800a538:	d08d      	beq.n	800a456 <_strtod_l+0xb2>
 800a53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a53c:	9307      	str	r3, [sp, #28]
 800a53e:	3301      	adds	r3, #1
 800a540:	931b      	str	r3, [sp, #108]	; 0x6c
 800a542:	9b07      	ldr	r3, [sp, #28]
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b2b      	cmp	r3, #43	; 0x2b
 800a548:	d071      	beq.n	800a62e <_strtod_l+0x28a>
 800a54a:	000c      	movs	r4, r1
 800a54c:	2b2d      	cmp	r3, #45	; 0x2d
 800a54e:	d174      	bne.n	800a63a <_strtod_l+0x296>
 800a550:	2401      	movs	r4, #1
 800a552:	e06d      	b.n	800a630 <_strtod_l+0x28c>
 800a554:	9908      	ldr	r1, [sp, #32]
 800a556:	2908      	cmp	r1, #8
 800a558:	dc09      	bgt.n	800a56e <_strtod_l+0x1ca>
 800a55a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a55c:	4351      	muls	r1, r2
 800a55e:	185b      	adds	r3, r3, r1
 800a560:	930d      	str	r3, [sp, #52]	; 0x34
 800a562:	9b08      	ldr	r3, [sp, #32]
 800a564:	3001      	adds	r0, #1
 800a566:	3301      	adds	r3, #1
 800a568:	9308      	str	r3, [sp, #32]
 800a56a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a56c:	e7c3      	b.n	800a4f6 <_strtod_l+0x152>
 800a56e:	4355      	muls	r5, r2
 800a570:	195d      	adds	r5, r3, r5
 800a572:	e7f6      	b.n	800a562 <_strtod_l+0x1be>
 800a574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	921b      	str	r2, [sp, #108]	; 0x6c
 800a57a:	9a08      	ldr	r2, [sp, #32]
 800a57c:	785b      	ldrb	r3, [r3, #1]
 800a57e:	2a00      	cmp	r2, #0
 800a580:	d03a      	beq.n	800a5f8 <_strtod_l+0x254>
 800a582:	900c      	str	r0, [sp, #48]	; 0x30
 800a584:	9205      	str	r2, [sp, #20]
 800a586:	001a      	movs	r2, r3
 800a588:	3a30      	subs	r2, #48	; 0x30
 800a58a:	2a09      	cmp	r2, #9
 800a58c:	d912      	bls.n	800a5b4 <_strtod_l+0x210>
 800a58e:	2201      	movs	r2, #1
 800a590:	4694      	mov	ip, r2
 800a592:	e7c3      	b.n	800a51c <_strtod_l+0x178>
 800a594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a596:	3001      	adds	r0, #1
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a59c:	785b      	ldrb	r3, [r3, #1]
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	d0f8      	beq.n	800a594 <_strtod_l+0x1f0>
 800a5a2:	001a      	movs	r2, r3
 800a5a4:	3a31      	subs	r2, #49	; 0x31
 800a5a6:	2a08      	cmp	r2, #8
 800a5a8:	d83c      	bhi.n	800a624 <_strtod_l+0x280>
 800a5aa:	900c      	str	r0, [sp, #48]	; 0x30
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a5b0:	9005      	str	r0, [sp, #20]
 800a5b2:	9210      	str	r2, [sp, #64]	; 0x40
 800a5b4:	001a      	movs	r2, r3
 800a5b6:	1c41      	adds	r1, r0, #1
 800a5b8:	3a30      	subs	r2, #48	; 0x30
 800a5ba:	2b30      	cmp	r3, #48	; 0x30
 800a5bc:	d016      	beq.n	800a5ec <_strtod_l+0x248>
 800a5be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5c0:	185b      	adds	r3, r3, r1
 800a5c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c4:	9b05      	ldr	r3, [sp, #20]
 800a5c6:	210a      	movs	r1, #10
 800a5c8:	469c      	mov	ip, r3
 800a5ca:	4484      	add	ip, r0
 800a5cc:	4563      	cmp	r3, ip
 800a5ce:	d115      	bne.n	800a5fc <_strtod_l+0x258>
 800a5d0:	9905      	ldr	r1, [sp, #20]
 800a5d2:	9b05      	ldr	r3, [sp, #20]
 800a5d4:	3101      	adds	r1, #1
 800a5d6:	1809      	adds	r1, r1, r0
 800a5d8:	181b      	adds	r3, r3, r0
 800a5da:	9105      	str	r1, [sp, #20]
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	dc19      	bgt.n	800a614 <_strtod_l+0x270>
 800a5e0:	230a      	movs	r3, #10
 800a5e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5e4:	434b      	muls	r3, r1
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	18d3      	adds	r3, r2, r3
 800a5ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5ee:	0008      	movs	r0, r1
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	e7c6      	b.n	800a586 <_strtod_l+0x1e2>
 800a5f8:	9808      	ldr	r0, [sp, #32]
 800a5fa:	e7d0      	b.n	800a59e <_strtod_l+0x1fa>
 800a5fc:	1c5c      	adds	r4, r3, #1
 800a5fe:	2b08      	cmp	r3, #8
 800a600:	dc04      	bgt.n	800a60c <_strtod_l+0x268>
 800a602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a604:	434b      	muls	r3, r1
 800a606:	930d      	str	r3, [sp, #52]	; 0x34
 800a608:	0023      	movs	r3, r4
 800a60a:	e7df      	b.n	800a5cc <_strtod_l+0x228>
 800a60c:	2c10      	cmp	r4, #16
 800a60e:	dcfb      	bgt.n	800a608 <_strtod_l+0x264>
 800a610:	434d      	muls	r5, r1
 800a612:	e7f9      	b.n	800a608 <_strtod_l+0x264>
 800a614:	9b05      	ldr	r3, [sp, #20]
 800a616:	2100      	movs	r1, #0
 800a618:	2b10      	cmp	r3, #16
 800a61a:	dce7      	bgt.n	800a5ec <_strtod_l+0x248>
 800a61c:	230a      	movs	r3, #10
 800a61e:	435d      	muls	r5, r3
 800a620:	1955      	adds	r5, r2, r5
 800a622:	e7e3      	b.n	800a5ec <_strtod_l+0x248>
 800a624:	2200      	movs	r2, #0
 800a626:	920c      	str	r2, [sp, #48]	; 0x30
 800a628:	9205      	str	r2, [sp, #20]
 800a62a:	3201      	adds	r2, #1
 800a62c:	e7b0      	b.n	800a590 <_strtod_l+0x1ec>
 800a62e:	2400      	movs	r4, #0
 800a630:	9b07      	ldr	r3, [sp, #28]
 800a632:	3302      	adds	r3, #2
 800a634:	931b      	str	r3, [sp, #108]	; 0x6c
 800a636:	9b07      	ldr	r3, [sp, #28]
 800a638:	789b      	ldrb	r3, [r3, #2]
 800a63a:	001a      	movs	r2, r3
 800a63c:	3a30      	subs	r2, #48	; 0x30
 800a63e:	2a09      	cmp	r2, #9
 800a640:	d914      	bls.n	800a66c <_strtod_l+0x2c8>
 800a642:	9a07      	ldr	r2, [sp, #28]
 800a644:	921b      	str	r2, [sp, #108]	; 0x6c
 800a646:	2200      	movs	r2, #0
 800a648:	e033      	b.n	800a6b2 <_strtod_l+0x30e>
 800a64a:	46c0      	nop			; (mov r8, r8)
 800a64c:	0800d230 	.word	0x0800d230
 800a650:	7ff00000 	.word	0x7ff00000
 800a654:	ffefffff 	.word	0xffefffff
 800a658:	00000433 	.word	0x00000433
 800a65c:	7fffffff 	.word	0x7fffffff
 800a660:	0800d22c 	.word	0x0800d22c
 800a664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	921b      	str	r2, [sp, #108]	; 0x6c
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	2b30      	cmp	r3, #48	; 0x30
 800a66e:	d0f9      	beq.n	800a664 <_strtod_l+0x2c0>
 800a670:	2200      	movs	r2, #0
 800a672:	9206      	str	r2, [sp, #24]
 800a674:	001a      	movs	r2, r3
 800a676:	3a31      	subs	r2, #49	; 0x31
 800a678:	2a08      	cmp	r2, #8
 800a67a:	d81b      	bhi.n	800a6b4 <_strtod_l+0x310>
 800a67c:	3b30      	subs	r3, #48	; 0x30
 800a67e:	930e      	str	r3, [sp, #56]	; 0x38
 800a680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a682:	9306      	str	r3, [sp, #24]
 800a684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a686:	1c59      	adds	r1, r3, #1
 800a688:	911b      	str	r1, [sp, #108]	; 0x6c
 800a68a:	785b      	ldrb	r3, [r3, #1]
 800a68c:	001a      	movs	r2, r3
 800a68e:	3a30      	subs	r2, #48	; 0x30
 800a690:	2a09      	cmp	r2, #9
 800a692:	d93a      	bls.n	800a70a <_strtod_l+0x366>
 800a694:	9a06      	ldr	r2, [sp, #24]
 800a696:	1a8a      	subs	r2, r1, r2
 800a698:	49b2      	ldr	r1, [pc, #712]	; (800a964 <_strtod_l+0x5c0>)
 800a69a:	9106      	str	r1, [sp, #24]
 800a69c:	2a08      	cmp	r2, #8
 800a69e:	dc04      	bgt.n	800a6aa <_strtod_l+0x306>
 800a6a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6a2:	9206      	str	r2, [sp, #24]
 800a6a4:	428a      	cmp	r2, r1
 800a6a6:	dd00      	ble.n	800a6aa <_strtod_l+0x306>
 800a6a8:	9106      	str	r1, [sp, #24]
 800a6aa:	2c00      	cmp	r4, #0
 800a6ac:	d002      	beq.n	800a6b4 <_strtod_l+0x310>
 800a6ae:	9a06      	ldr	r2, [sp, #24]
 800a6b0:	4252      	negs	r2, r2
 800a6b2:	9206      	str	r2, [sp, #24]
 800a6b4:	9a05      	ldr	r2, [sp, #20]
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d14d      	bne.n	800a756 <_strtod_l+0x3b2>
 800a6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6bc:	4310      	orrs	r0, r2
 800a6be:	d000      	beq.n	800a6c2 <_strtod_l+0x31e>
 800a6c0:	e6ab      	b.n	800a41a <_strtod_l+0x76>
 800a6c2:	4662      	mov	r2, ip
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	d000      	beq.n	800a6ca <_strtod_l+0x326>
 800a6c8:	e6c5      	b.n	800a456 <_strtod_l+0xb2>
 800a6ca:	2b69      	cmp	r3, #105	; 0x69
 800a6cc:	d027      	beq.n	800a71e <_strtod_l+0x37a>
 800a6ce:	dc23      	bgt.n	800a718 <_strtod_l+0x374>
 800a6d0:	2b49      	cmp	r3, #73	; 0x49
 800a6d2:	d024      	beq.n	800a71e <_strtod_l+0x37a>
 800a6d4:	2b4e      	cmp	r3, #78	; 0x4e
 800a6d6:	d000      	beq.n	800a6da <_strtod_l+0x336>
 800a6d8:	e6bd      	b.n	800a456 <_strtod_l+0xb2>
 800a6da:	49a3      	ldr	r1, [pc, #652]	; (800a968 <_strtod_l+0x5c4>)
 800a6dc:	a81b      	add	r0, sp, #108	; 0x6c
 800a6de:	f001 fc15 	bl	800bf0c <__match>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d100      	bne.n	800a6e8 <_strtod_l+0x344>
 800a6e6:	e6b6      	b.n	800a456 <_strtod_l+0xb2>
 800a6e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	2b28      	cmp	r3, #40	; 0x28
 800a6ee:	d12c      	bne.n	800a74a <_strtod_l+0x3a6>
 800a6f0:	499e      	ldr	r1, [pc, #632]	; (800a96c <_strtod_l+0x5c8>)
 800a6f2:	aa1e      	add	r2, sp, #120	; 0x78
 800a6f4:	a81b      	add	r0, sp, #108	; 0x6c
 800a6f6:	f001 fc1d 	bl	800bf34 <__hexnan>
 800a6fa:	2805      	cmp	r0, #5
 800a6fc:	d125      	bne.n	800a74a <_strtod_l+0x3a6>
 800a6fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a700:	4a9b      	ldr	r2, [pc, #620]	; (800a970 <_strtod_l+0x5cc>)
 800a702:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a704:	431a      	orrs	r2, r3
 800a706:	0017      	movs	r7, r2
 800a708:	e687      	b.n	800a41a <_strtod_l+0x76>
 800a70a:	220a      	movs	r2, #10
 800a70c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a70e:	434a      	muls	r2, r1
 800a710:	18d2      	adds	r2, r2, r3
 800a712:	3a30      	subs	r2, #48	; 0x30
 800a714:	920e      	str	r2, [sp, #56]	; 0x38
 800a716:	e7b5      	b.n	800a684 <_strtod_l+0x2e0>
 800a718:	2b6e      	cmp	r3, #110	; 0x6e
 800a71a:	d0de      	beq.n	800a6da <_strtod_l+0x336>
 800a71c:	e69b      	b.n	800a456 <_strtod_l+0xb2>
 800a71e:	4995      	ldr	r1, [pc, #596]	; (800a974 <_strtod_l+0x5d0>)
 800a720:	a81b      	add	r0, sp, #108	; 0x6c
 800a722:	f001 fbf3 	bl	800bf0c <__match>
 800a726:	2800      	cmp	r0, #0
 800a728:	d100      	bne.n	800a72c <_strtod_l+0x388>
 800a72a:	e694      	b.n	800a456 <_strtod_l+0xb2>
 800a72c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a72e:	4992      	ldr	r1, [pc, #584]	; (800a978 <_strtod_l+0x5d4>)
 800a730:	3b01      	subs	r3, #1
 800a732:	a81b      	add	r0, sp, #108	; 0x6c
 800a734:	931b      	str	r3, [sp, #108]	; 0x6c
 800a736:	f001 fbe9 	bl	800bf0c <__match>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d102      	bne.n	800a744 <_strtod_l+0x3a0>
 800a73e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a740:	3301      	adds	r3, #1
 800a742:	931b      	str	r3, [sp, #108]	; 0x6c
 800a744:	2600      	movs	r6, #0
 800a746:	4f8a      	ldr	r7, [pc, #552]	; (800a970 <_strtod_l+0x5cc>)
 800a748:	e667      	b.n	800a41a <_strtod_l+0x76>
 800a74a:	488c      	ldr	r0, [pc, #560]	; (800a97c <_strtod_l+0x5d8>)
 800a74c:	f001 f8ec 	bl	800b928 <nan>
 800a750:	0006      	movs	r6, r0
 800a752:	000f      	movs	r7, r1
 800a754:	e661      	b.n	800a41a <_strtod_l+0x76>
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	9309      	str	r3, [sp, #36]	; 0x24
 800a75e:	9b08      	ldr	r3, [sp, #32]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <_strtod_l+0x3c4>
 800a764:	9b05      	ldr	r3, [sp, #20]
 800a766:	9308      	str	r3, [sp, #32]
 800a768:	9c05      	ldr	r4, [sp, #20]
 800a76a:	2c10      	cmp	r4, #16
 800a76c:	dd00      	ble.n	800a770 <_strtod_l+0x3cc>
 800a76e:	2410      	movs	r4, #16
 800a770:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a772:	f7f8 fa95 	bl	8002ca0 <__aeabi_ui2d>
 800a776:	9b05      	ldr	r3, [sp, #20]
 800a778:	0006      	movs	r6, r0
 800a77a:	000f      	movs	r7, r1
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	dd15      	ble.n	800a7ac <_strtod_l+0x408>
 800a780:	0022      	movs	r2, r4
 800a782:	4b7f      	ldr	r3, [pc, #508]	; (800a980 <_strtod_l+0x5dc>)
 800a784:	3a09      	subs	r2, #9
 800a786:	00d2      	lsls	r2, r2, #3
 800a788:	189b      	adds	r3, r3, r2
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f7f7 fbbf 	bl	8001f10 <__aeabi_dmul>
 800a792:	0006      	movs	r6, r0
 800a794:	0028      	movs	r0, r5
 800a796:	000f      	movs	r7, r1
 800a798:	f7f8 fa82 	bl	8002ca0 <__aeabi_ui2d>
 800a79c:	0002      	movs	r2, r0
 800a79e:	000b      	movs	r3, r1
 800a7a0:	0030      	movs	r0, r6
 800a7a2:	0039      	movs	r1, r7
 800a7a4:	f7f6 fc5a 	bl	800105c <__aeabi_dadd>
 800a7a8:	0006      	movs	r6, r0
 800a7aa:	000f      	movs	r7, r1
 800a7ac:	9b05      	ldr	r3, [sp, #20]
 800a7ae:	2b0f      	cmp	r3, #15
 800a7b0:	dc39      	bgt.n	800a826 <_strtod_l+0x482>
 800a7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d100      	bne.n	800a7ba <_strtod_l+0x416>
 800a7b8:	e62f      	b.n	800a41a <_strtod_l+0x76>
 800a7ba:	dd24      	ble.n	800a806 <_strtod_l+0x462>
 800a7bc:	2b16      	cmp	r3, #22
 800a7be:	dc09      	bgt.n	800a7d4 <_strtod_l+0x430>
 800a7c0:	496f      	ldr	r1, [pc, #444]	; (800a980 <_strtod_l+0x5dc>)
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	18c9      	adds	r1, r1, r3
 800a7c6:	0032      	movs	r2, r6
 800a7c8:	6808      	ldr	r0, [r1, #0]
 800a7ca:	6849      	ldr	r1, [r1, #4]
 800a7cc:	003b      	movs	r3, r7
 800a7ce:	f7f7 fb9f 	bl	8001f10 <__aeabi_dmul>
 800a7d2:	e7bd      	b.n	800a750 <_strtod_l+0x3ac>
 800a7d4:	2325      	movs	r3, #37	; 0x25
 800a7d6:	9a05      	ldr	r2, [sp, #20]
 800a7d8:	1a9b      	subs	r3, r3, r2
 800a7da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	db22      	blt.n	800a826 <_strtod_l+0x482>
 800a7e0:	240f      	movs	r4, #15
 800a7e2:	9b05      	ldr	r3, [sp, #20]
 800a7e4:	4d66      	ldr	r5, [pc, #408]	; (800a980 <_strtod_l+0x5dc>)
 800a7e6:	1ae4      	subs	r4, r4, r3
 800a7e8:	00e1      	lsls	r1, r4, #3
 800a7ea:	1869      	adds	r1, r5, r1
 800a7ec:	0032      	movs	r2, r6
 800a7ee:	6808      	ldr	r0, [r1, #0]
 800a7f0:	6849      	ldr	r1, [r1, #4]
 800a7f2:	003b      	movs	r3, r7
 800a7f4:	f7f7 fb8c 	bl	8001f10 <__aeabi_dmul>
 800a7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fa:	1b1c      	subs	r4, r3, r4
 800a7fc:	00e4      	lsls	r4, r4, #3
 800a7fe:	192d      	adds	r5, r5, r4
 800a800:	682a      	ldr	r2, [r5, #0]
 800a802:	686b      	ldr	r3, [r5, #4]
 800a804:	e7e3      	b.n	800a7ce <_strtod_l+0x42a>
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	3316      	adds	r3, #22
 800a80a:	db0c      	blt.n	800a826 <_strtod_l+0x482>
 800a80c:	9906      	ldr	r1, [sp, #24]
 800a80e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a810:	4b5b      	ldr	r3, [pc, #364]	; (800a980 <_strtod_l+0x5dc>)
 800a812:	1a52      	subs	r2, r2, r1
 800a814:	00d2      	lsls	r2, r2, #3
 800a816:	189b      	adds	r3, r3, r2
 800a818:	0030      	movs	r0, r6
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	0039      	movs	r1, r7
 800a820:	f7f6 ff7c 	bl	800171c <__aeabi_ddiv>
 800a824:	e794      	b.n	800a750 <_strtod_l+0x3ac>
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	1b1c      	subs	r4, r3, r4
 800a82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82c:	18e4      	adds	r4, r4, r3
 800a82e:	2c00      	cmp	r4, #0
 800a830:	dd72      	ble.n	800a918 <_strtod_l+0x574>
 800a832:	220f      	movs	r2, #15
 800a834:	0023      	movs	r3, r4
 800a836:	4013      	ands	r3, r2
 800a838:	4214      	tst	r4, r2
 800a83a:	d00a      	beq.n	800a852 <_strtod_l+0x4ae>
 800a83c:	4950      	ldr	r1, [pc, #320]	; (800a980 <_strtod_l+0x5dc>)
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	18c9      	adds	r1, r1, r3
 800a842:	0032      	movs	r2, r6
 800a844:	6808      	ldr	r0, [r1, #0]
 800a846:	6849      	ldr	r1, [r1, #4]
 800a848:	003b      	movs	r3, r7
 800a84a:	f7f7 fb61 	bl	8001f10 <__aeabi_dmul>
 800a84e:	0006      	movs	r6, r0
 800a850:	000f      	movs	r7, r1
 800a852:	230f      	movs	r3, #15
 800a854:	439c      	bics	r4, r3
 800a856:	d04a      	beq.n	800a8ee <_strtod_l+0x54a>
 800a858:	3326      	adds	r3, #38	; 0x26
 800a85a:	33ff      	adds	r3, #255	; 0xff
 800a85c:	429c      	cmp	r4, r3
 800a85e:	dd22      	ble.n	800a8a6 <_strtod_l+0x502>
 800a860:	2300      	movs	r3, #0
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	9306      	str	r3, [sp, #24]
 800a866:	930d      	str	r3, [sp, #52]	; 0x34
 800a868:	9308      	str	r3, [sp, #32]
 800a86a:	2322      	movs	r3, #34	; 0x22
 800a86c:	2600      	movs	r6, #0
 800a86e:	9a04      	ldr	r2, [sp, #16]
 800a870:	4f3f      	ldr	r7, [pc, #252]	; (800a970 <_strtod_l+0x5cc>)
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a876:	42b3      	cmp	r3, r6
 800a878:	d100      	bne.n	800a87c <_strtod_l+0x4d8>
 800a87a:	e5ce      	b.n	800a41a <_strtod_l+0x76>
 800a87c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a87e:	9804      	ldr	r0, [sp, #16]
 800a880:	f7ff f900 	bl	8009a84 <_Bfree>
 800a884:	9908      	ldr	r1, [sp, #32]
 800a886:	9804      	ldr	r0, [sp, #16]
 800a888:	f7ff f8fc 	bl	8009a84 <_Bfree>
 800a88c:	9906      	ldr	r1, [sp, #24]
 800a88e:	9804      	ldr	r0, [sp, #16]
 800a890:	f7ff f8f8 	bl	8009a84 <_Bfree>
 800a894:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a896:	9804      	ldr	r0, [sp, #16]
 800a898:	f7ff f8f4 	bl	8009a84 <_Bfree>
 800a89c:	9905      	ldr	r1, [sp, #20]
 800a89e:	9804      	ldr	r0, [sp, #16]
 800a8a0:	f7ff f8f0 	bl	8009a84 <_Bfree>
 800a8a4:	e5b9      	b.n	800a41a <_strtod_l+0x76>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	0030      	movs	r0, r6
 800a8aa:	0039      	movs	r1, r7
 800a8ac:	4d35      	ldr	r5, [pc, #212]	; (800a984 <_strtod_l+0x5e0>)
 800a8ae:	1124      	asrs	r4, r4, #4
 800a8b0:	9307      	str	r3, [sp, #28]
 800a8b2:	2c01      	cmp	r4, #1
 800a8b4:	dc1e      	bgt.n	800a8f4 <_strtod_l+0x550>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <_strtod_l+0x51a>
 800a8ba:	0006      	movs	r6, r0
 800a8bc:	000f      	movs	r7, r1
 800a8be:	4b32      	ldr	r3, [pc, #200]	; (800a988 <_strtod_l+0x5e4>)
 800a8c0:	9a07      	ldr	r2, [sp, #28]
 800a8c2:	18ff      	adds	r7, r7, r3
 800a8c4:	4b2f      	ldr	r3, [pc, #188]	; (800a984 <_strtod_l+0x5e0>)
 800a8c6:	00d2      	lsls	r2, r2, #3
 800a8c8:	189d      	adds	r5, r3, r2
 800a8ca:	6828      	ldr	r0, [r5, #0]
 800a8cc:	6869      	ldr	r1, [r5, #4]
 800a8ce:	0032      	movs	r2, r6
 800a8d0:	003b      	movs	r3, r7
 800a8d2:	f7f7 fb1d 	bl	8001f10 <__aeabi_dmul>
 800a8d6:	4b26      	ldr	r3, [pc, #152]	; (800a970 <_strtod_l+0x5cc>)
 800a8d8:	4a2c      	ldr	r2, [pc, #176]	; (800a98c <_strtod_l+0x5e8>)
 800a8da:	0006      	movs	r6, r0
 800a8dc:	400b      	ands	r3, r1
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d8be      	bhi.n	800a860 <_strtod_l+0x4bc>
 800a8e2:	4a2b      	ldr	r2, [pc, #172]	; (800a990 <_strtod_l+0x5ec>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d913      	bls.n	800a910 <_strtod_l+0x56c>
 800a8e8:	2601      	movs	r6, #1
 800a8ea:	4f2a      	ldr	r7, [pc, #168]	; (800a994 <_strtod_l+0x5f0>)
 800a8ec:	4276      	negs	r6, r6
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9307      	str	r3, [sp, #28]
 800a8f2:	e088      	b.n	800aa06 <_strtod_l+0x662>
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	4214      	tst	r4, r2
 800a8f8:	d004      	beq.n	800a904 <_strtod_l+0x560>
 800a8fa:	682a      	ldr	r2, [r5, #0]
 800a8fc:	686b      	ldr	r3, [r5, #4]
 800a8fe:	f7f7 fb07 	bl	8001f10 <__aeabi_dmul>
 800a902:	2301      	movs	r3, #1
 800a904:	9a07      	ldr	r2, [sp, #28]
 800a906:	1064      	asrs	r4, r4, #1
 800a908:	3201      	adds	r2, #1
 800a90a:	9207      	str	r2, [sp, #28]
 800a90c:	3508      	adds	r5, #8
 800a90e:	e7d0      	b.n	800a8b2 <_strtod_l+0x50e>
 800a910:	23d4      	movs	r3, #212	; 0xd4
 800a912:	049b      	lsls	r3, r3, #18
 800a914:	18cf      	adds	r7, r1, r3
 800a916:	e7ea      	b.n	800a8ee <_strtod_l+0x54a>
 800a918:	2c00      	cmp	r4, #0
 800a91a:	d0e8      	beq.n	800a8ee <_strtod_l+0x54a>
 800a91c:	4264      	negs	r4, r4
 800a91e:	230f      	movs	r3, #15
 800a920:	0022      	movs	r2, r4
 800a922:	401a      	ands	r2, r3
 800a924:	421c      	tst	r4, r3
 800a926:	d00a      	beq.n	800a93e <_strtod_l+0x59a>
 800a928:	4b15      	ldr	r3, [pc, #84]	; (800a980 <_strtod_l+0x5dc>)
 800a92a:	00d2      	lsls	r2, r2, #3
 800a92c:	189b      	adds	r3, r3, r2
 800a92e:	0030      	movs	r0, r6
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	0039      	movs	r1, r7
 800a936:	f7f6 fef1 	bl	800171c <__aeabi_ddiv>
 800a93a:	0006      	movs	r6, r0
 800a93c:	000f      	movs	r7, r1
 800a93e:	1124      	asrs	r4, r4, #4
 800a940:	d0d5      	beq.n	800a8ee <_strtod_l+0x54a>
 800a942:	2c1f      	cmp	r4, #31
 800a944:	dd28      	ble.n	800a998 <_strtod_l+0x5f4>
 800a946:	2300      	movs	r3, #0
 800a948:	9305      	str	r3, [sp, #20]
 800a94a:	9306      	str	r3, [sp, #24]
 800a94c:	930d      	str	r3, [sp, #52]	; 0x34
 800a94e:	9308      	str	r3, [sp, #32]
 800a950:	2322      	movs	r3, #34	; 0x22
 800a952:	9a04      	ldr	r2, [sp, #16]
 800a954:	2600      	movs	r6, #0
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a95a:	2700      	movs	r7, #0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d18d      	bne.n	800a87c <_strtod_l+0x4d8>
 800a960:	e55b      	b.n	800a41a <_strtod_l+0x76>
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	00004e1f 	.word	0x00004e1f
 800a968:	0800d01d 	.word	0x0800d01d
 800a96c:	0800d244 	.word	0x0800d244
 800a970:	7ff00000 	.word	0x7ff00000
 800a974:	0800d015 	.word	0x0800d015
 800a978:	0800d04c 	.word	0x0800d04c
 800a97c:	0800d3d5 	.word	0x0800d3d5
 800a980:	0800d158 	.word	0x0800d158
 800a984:	0800d130 	.word	0x0800d130
 800a988:	fcb00000 	.word	0xfcb00000
 800a98c:	7ca00000 	.word	0x7ca00000
 800a990:	7c900000 	.word	0x7c900000
 800a994:	7fefffff 	.word	0x7fefffff
 800a998:	2310      	movs	r3, #16
 800a99a:	0022      	movs	r2, r4
 800a99c:	401a      	ands	r2, r3
 800a99e:	9207      	str	r2, [sp, #28]
 800a9a0:	421c      	tst	r4, r3
 800a9a2:	d001      	beq.n	800a9a8 <_strtod_l+0x604>
 800a9a4:	335a      	adds	r3, #90	; 0x5a
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	0030      	movs	r0, r6
 800a9aa:	0039      	movs	r1, r7
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4dc4      	ldr	r5, [pc, #784]	; (800acc0 <_strtod_l+0x91c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	4214      	tst	r4, r2
 800a9b4:	d004      	beq.n	800a9c0 <_strtod_l+0x61c>
 800a9b6:	682a      	ldr	r2, [r5, #0]
 800a9b8:	686b      	ldr	r3, [r5, #4]
 800a9ba:	f7f7 faa9 	bl	8001f10 <__aeabi_dmul>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	1064      	asrs	r4, r4, #1
 800a9c2:	3508      	adds	r5, #8
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	d1f3      	bne.n	800a9b0 <_strtod_l+0x60c>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <_strtod_l+0x62c>
 800a9cc:	0006      	movs	r6, r0
 800a9ce:	000f      	movs	r7, r1
 800a9d0:	9b07      	ldr	r3, [sp, #28]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00f      	beq.n	800a9f6 <_strtod_l+0x652>
 800a9d6:	236b      	movs	r3, #107	; 0x6b
 800a9d8:	007a      	lsls	r2, r7, #1
 800a9da:	0d52      	lsrs	r2, r2, #21
 800a9dc:	0039      	movs	r1, r7
 800a9de:	1a9b      	subs	r3, r3, r2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dd08      	ble.n	800a9f6 <_strtod_l+0x652>
 800a9e4:	2b1f      	cmp	r3, #31
 800a9e6:	dc00      	bgt.n	800a9ea <_strtod_l+0x646>
 800a9e8:	e121      	b.n	800ac2e <_strtod_l+0x88a>
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	2b34      	cmp	r3, #52	; 0x34
 800a9ee:	dc00      	bgt.n	800a9f2 <_strtod_l+0x64e>
 800a9f0:	e116      	b.n	800ac20 <_strtod_l+0x87c>
 800a9f2:	27dc      	movs	r7, #220	; 0xdc
 800a9f4:	04bf      	lsls	r7, r7, #18
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	0030      	movs	r0, r6
 800a9fc:	0039      	movs	r1, r7
 800a9fe:	f7f5 fd25 	bl	800044c <__aeabi_dcmpeq>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d19f      	bne.n	800a946 <_strtod_l+0x5a2>
 800aa06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa08:	9a08      	ldr	r2, [sp, #32]
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aa0e:	9b05      	ldr	r3, [sp, #20]
 800aa10:	9804      	ldr	r0, [sp, #16]
 800aa12:	f7ff f89f 	bl	8009b54 <__s2b>
 800aa16:	900d      	str	r0, [sp, #52]	; 0x34
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d100      	bne.n	800aa1e <_strtod_l+0x67a>
 800aa1c:	e720      	b.n	800a860 <_strtod_l+0x4bc>
 800aa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa20:	9906      	ldr	r1, [sp, #24]
 800aa22:	17da      	asrs	r2, r3, #31
 800aa24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa26:	1a5b      	subs	r3, r3, r1
 800aa28:	401a      	ands	r2, r3
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	9215      	str	r2, [sp, #84]	; 0x54
 800aa2e:	43db      	mvns	r3, r3
 800aa30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa32:	17db      	asrs	r3, r3, #31
 800aa34:	401a      	ands	r2, r3
 800aa36:	2300      	movs	r3, #0
 800aa38:	9218      	str	r2, [sp, #96]	; 0x60
 800aa3a:	9305      	str	r3, [sp, #20]
 800aa3c:	9306      	str	r3, [sp, #24]
 800aa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa40:	9804      	ldr	r0, [sp, #16]
 800aa42:	6859      	ldr	r1, [r3, #4]
 800aa44:	f7fe ffda 	bl	80099fc <_Balloc>
 800aa48:	9008      	str	r0, [sp, #32]
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d100      	bne.n	800aa50 <_strtod_l+0x6ac>
 800aa4e:	e70c      	b.n	800a86a <_strtod_l+0x4c6>
 800aa50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa52:	300c      	adds	r0, #12
 800aa54:	0019      	movs	r1, r3
 800aa56:	691a      	ldr	r2, [r3, #16]
 800aa58:	310c      	adds	r1, #12
 800aa5a:	3202      	adds	r2, #2
 800aa5c:	0092      	lsls	r2, r2, #2
 800aa5e:	f7fe f819 	bl	8008a94 <memcpy>
 800aa62:	ab1e      	add	r3, sp, #120	; 0x78
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	ab1d      	add	r3, sp, #116	; 0x74
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	0032      	movs	r2, r6
 800aa6c:	003b      	movs	r3, r7
 800aa6e:	9804      	ldr	r0, [sp, #16]
 800aa70:	9610      	str	r6, [sp, #64]	; 0x40
 800aa72:	9711      	str	r7, [sp, #68]	; 0x44
 800aa74:	f7ff fbb0 	bl	800a1d8 <__d2b>
 800aa78:	901c      	str	r0, [sp, #112]	; 0x70
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d100      	bne.n	800aa80 <_strtod_l+0x6dc>
 800aa7e:	e6f4      	b.n	800a86a <_strtod_l+0x4c6>
 800aa80:	2101      	movs	r1, #1
 800aa82:	9804      	ldr	r0, [sp, #16]
 800aa84:	f7ff f8fa 	bl	8009c7c <__i2b>
 800aa88:	9006      	str	r0, [sp, #24]
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d100      	bne.n	800aa90 <_strtod_l+0x6ec>
 800aa8e:	e6ec      	b.n	800a86a <_strtod_l+0x4c6>
 800aa90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa94:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800aa96:	1ad4      	subs	r4, r2, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	db01      	blt.n	800aaa0 <_strtod_l+0x6fc>
 800aa9c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800aa9e:	195d      	adds	r5, r3, r5
 800aaa0:	9907      	ldr	r1, [sp, #28]
 800aaa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aaa4:	1a5b      	subs	r3, r3, r1
 800aaa6:	2136      	movs	r1, #54	; 0x36
 800aaa8:	189b      	adds	r3, r3, r2
 800aaaa:	1a8a      	subs	r2, r1, r2
 800aaac:	4985      	ldr	r1, [pc, #532]	; (800acc4 <_strtod_l+0x920>)
 800aaae:	2001      	movs	r0, #1
 800aab0:	468c      	mov	ip, r1
 800aab2:	2100      	movs	r1, #0
 800aab4:	3b01      	subs	r3, #1
 800aab6:	9114      	str	r1, [sp, #80]	; 0x50
 800aab8:	9012      	str	r0, [sp, #72]	; 0x48
 800aaba:	4563      	cmp	r3, ip
 800aabc:	da07      	bge.n	800aace <_strtod_l+0x72a>
 800aabe:	4661      	mov	r1, ip
 800aac0:	1ac9      	subs	r1, r1, r3
 800aac2:	1a52      	subs	r2, r2, r1
 800aac4:	291f      	cmp	r1, #31
 800aac6:	dd00      	ble.n	800aaca <_strtod_l+0x726>
 800aac8:	e0b6      	b.n	800ac38 <_strtod_l+0x894>
 800aaca:	4088      	lsls	r0, r1
 800aacc:	9012      	str	r0, [sp, #72]	; 0x48
 800aace:	18ab      	adds	r3, r5, r2
 800aad0:	930c      	str	r3, [sp, #48]	; 0x30
 800aad2:	18a4      	adds	r4, r4, r2
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aad8:	191c      	adds	r4, r3, r4
 800aada:	002b      	movs	r3, r5
 800aadc:	4295      	cmp	r5, r2
 800aade:	dd00      	ble.n	800aae2 <_strtod_l+0x73e>
 800aae0:	0013      	movs	r3, r2
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	dd00      	ble.n	800aae8 <_strtod_l+0x744>
 800aae6:	0023      	movs	r3, r4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	dd04      	ble.n	800aaf6 <_strtod_l+0x752>
 800aaec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaee:	1ae4      	subs	r4, r4, r3
 800aaf0:	1ad2      	subs	r2, r2, r3
 800aaf2:	920c      	str	r2, [sp, #48]	; 0x30
 800aaf4:	1aed      	subs	r5, r5, r3
 800aaf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dd17      	ble.n	800ab2c <_strtod_l+0x788>
 800aafc:	001a      	movs	r2, r3
 800aafe:	9906      	ldr	r1, [sp, #24]
 800ab00:	9804      	ldr	r0, [sp, #16]
 800ab02:	f7ff f983 	bl	8009e0c <__pow5mult>
 800ab06:	9006      	str	r0, [sp, #24]
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d100      	bne.n	800ab0e <_strtod_l+0x76a>
 800ab0c:	e6ad      	b.n	800a86a <_strtod_l+0x4c6>
 800ab0e:	0001      	movs	r1, r0
 800ab10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ab12:	9804      	ldr	r0, [sp, #16]
 800ab14:	f7ff f8ca 	bl	8009cac <__multiply>
 800ab18:	900e      	str	r0, [sp, #56]	; 0x38
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d100      	bne.n	800ab20 <_strtod_l+0x77c>
 800ab1e:	e6a4      	b.n	800a86a <_strtod_l+0x4c6>
 800ab20:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab22:	9804      	ldr	r0, [sp, #16]
 800ab24:	f7fe ffae 	bl	8009a84 <_Bfree>
 800ab28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab2a:	931c      	str	r3, [sp, #112]	; 0x70
 800ab2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	dd00      	ble.n	800ab34 <_strtod_l+0x790>
 800ab32:	e087      	b.n	800ac44 <_strtod_l+0x8a0>
 800ab34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dd08      	ble.n	800ab4c <_strtod_l+0x7a8>
 800ab3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab3c:	9908      	ldr	r1, [sp, #32]
 800ab3e:	9804      	ldr	r0, [sp, #16]
 800ab40:	f7ff f964 	bl	8009e0c <__pow5mult>
 800ab44:	9008      	str	r0, [sp, #32]
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d100      	bne.n	800ab4c <_strtod_l+0x7a8>
 800ab4a:	e68e      	b.n	800a86a <_strtod_l+0x4c6>
 800ab4c:	2c00      	cmp	r4, #0
 800ab4e:	dd08      	ble.n	800ab62 <_strtod_l+0x7be>
 800ab50:	0022      	movs	r2, r4
 800ab52:	9908      	ldr	r1, [sp, #32]
 800ab54:	9804      	ldr	r0, [sp, #16]
 800ab56:	f7ff f9b5 	bl	8009ec4 <__lshift>
 800ab5a:	9008      	str	r0, [sp, #32]
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d100      	bne.n	800ab62 <_strtod_l+0x7be>
 800ab60:	e683      	b.n	800a86a <_strtod_l+0x4c6>
 800ab62:	2d00      	cmp	r5, #0
 800ab64:	dd08      	ble.n	800ab78 <_strtod_l+0x7d4>
 800ab66:	002a      	movs	r2, r5
 800ab68:	9906      	ldr	r1, [sp, #24]
 800ab6a:	9804      	ldr	r0, [sp, #16]
 800ab6c:	f7ff f9aa 	bl	8009ec4 <__lshift>
 800ab70:	9006      	str	r0, [sp, #24]
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d100      	bne.n	800ab78 <_strtod_l+0x7d4>
 800ab76:	e678      	b.n	800a86a <_strtod_l+0x4c6>
 800ab78:	9a08      	ldr	r2, [sp, #32]
 800ab7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab7c:	9804      	ldr	r0, [sp, #16]
 800ab7e:	f7ff fa2b 	bl	8009fd8 <__mdiff>
 800ab82:	9005      	str	r0, [sp, #20]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d100      	bne.n	800ab8a <_strtod_l+0x7e6>
 800ab88:	e66f      	b.n	800a86a <_strtod_l+0x4c6>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	68c3      	ldr	r3, [r0, #12]
 800ab8e:	9906      	ldr	r1, [sp, #24]
 800ab90:	60c2      	str	r2, [r0, #12]
 800ab92:	930c      	str	r3, [sp, #48]	; 0x30
 800ab94:	f7ff fa04 	bl	8009fa0 <__mcmp>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	da5d      	bge.n	800ac58 <_strtod_l+0x8b4>
 800ab9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab9e:	4333      	orrs	r3, r6
 800aba0:	d000      	beq.n	800aba4 <_strtod_l+0x800>
 800aba2:	e088      	b.n	800acb6 <_strtod_l+0x912>
 800aba4:	033b      	lsls	r3, r7, #12
 800aba6:	d000      	beq.n	800abaa <_strtod_l+0x806>
 800aba8:	e085      	b.n	800acb6 <_strtod_l+0x912>
 800abaa:	22d6      	movs	r2, #214	; 0xd6
 800abac:	4b46      	ldr	r3, [pc, #280]	; (800acc8 <_strtod_l+0x924>)
 800abae:	04d2      	lsls	r2, r2, #19
 800abb0:	403b      	ands	r3, r7
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d97f      	bls.n	800acb6 <_strtod_l+0x912>
 800abb6:	9b05      	ldr	r3, [sp, #20]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <_strtod_l+0x822>
 800abbe:	9b05      	ldr	r3, [sp, #20]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	dd77      	ble.n	800acb6 <_strtod_l+0x912>
 800abc6:	9905      	ldr	r1, [sp, #20]
 800abc8:	2201      	movs	r2, #1
 800abca:	9804      	ldr	r0, [sp, #16]
 800abcc:	f7ff f97a 	bl	8009ec4 <__lshift>
 800abd0:	9906      	ldr	r1, [sp, #24]
 800abd2:	9005      	str	r0, [sp, #20]
 800abd4:	f7ff f9e4 	bl	8009fa0 <__mcmp>
 800abd8:	2800      	cmp	r0, #0
 800abda:	dd6c      	ble.n	800acb6 <_strtod_l+0x912>
 800abdc:	9907      	ldr	r1, [sp, #28]
 800abde:	003b      	movs	r3, r7
 800abe0:	4a39      	ldr	r2, [pc, #228]	; (800acc8 <_strtod_l+0x924>)
 800abe2:	2900      	cmp	r1, #0
 800abe4:	d100      	bne.n	800abe8 <_strtod_l+0x844>
 800abe6:	e094      	b.n	800ad12 <_strtod_l+0x96e>
 800abe8:	0011      	movs	r1, r2
 800abea:	20d6      	movs	r0, #214	; 0xd6
 800abec:	4039      	ands	r1, r7
 800abee:	04c0      	lsls	r0, r0, #19
 800abf0:	4281      	cmp	r1, r0
 800abf2:	dd00      	ble.n	800abf6 <_strtod_l+0x852>
 800abf4:	e08d      	b.n	800ad12 <_strtod_l+0x96e>
 800abf6:	23dc      	movs	r3, #220	; 0xdc
 800abf8:	049b      	lsls	r3, r3, #18
 800abfa:	4299      	cmp	r1, r3
 800abfc:	dc00      	bgt.n	800ac00 <_strtod_l+0x85c>
 800abfe:	e6a7      	b.n	800a950 <_strtod_l+0x5ac>
 800ac00:	0030      	movs	r0, r6
 800ac02:	0039      	movs	r1, r7
 800ac04:	4b31      	ldr	r3, [pc, #196]	; (800accc <_strtod_l+0x928>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	f7f7 f982 	bl	8001f10 <__aeabi_dmul>
 800ac0c:	4b2e      	ldr	r3, [pc, #184]	; (800acc8 <_strtod_l+0x924>)
 800ac0e:	0006      	movs	r6, r0
 800ac10:	000f      	movs	r7, r1
 800ac12:	420b      	tst	r3, r1
 800ac14:	d000      	beq.n	800ac18 <_strtod_l+0x874>
 800ac16:	e631      	b.n	800a87c <_strtod_l+0x4d8>
 800ac18:	2322      	movs	r3, #34	; 0x22
 800ac1a:	9a04      	ldr	r2, [sp, #16]
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	e62d      	b.n	800a87c <_strtod_l+0x4d8>
 800ac20:	234b      	movs	r3, #75	; 0x4b
 800ac22:	1a9a      	subs	r2, r3, r2
 800ac24:	3b4c      	subs	r3, #76	; 0x4c
 800ac26:	4093      	lsls	r3, r2
 800ac28:	4019      	ands	r1, r3
 800ac2a:	000f      	movs	r7, r1
 800ac2c:	e6e3      	b.n	800a9f6 <_strtod_l+0x652>
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4252      	negs	r2, r2
 800ac32:	409a      	lsls	r2, r3
 800ac34:	4016      	ands	r6, r2
 800ac36:	e6de      	b.n	800a9f6 <_strtod_l+0x652>
 800ac38:	4925      	ldr	r1, [pc, #148]	; (800acd0 <_strtod_l+0x92c>)
 800ac3a:	1acb      	subs	r3, r1, r3
 800ac3c:	0001      	movs	r1, r0
 800ac3e:	4099      	lsls	r1, r3
 800ac40:	9114      	str	r1, [sp, #80]	; 0x50
 800ac42:	e743      	b.n	800aacc <_strtod_l+0x728>
 800ac44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac46:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac48:	9804      	ldr	r0, [sp, #16]
 800ac4a:	f7ff f93b 	bl	8009ec4 <__lshift>
 800ac4e:	901c      	str	r0, [sp, #112]	; 0x70
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d000      	beq.n	800ac56 <_strtod_l+0x8b2>
 800ac54:	e76e      	b.n	800ab34 <_strtod_l+0x790>
 800ac56:	e608      	b.n	800a86a <_strtod_l+0x4c6>
 800ac58:	970e      	str	r7, [sp, #56]	; 0x38
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d177      	bne.n	800ad4e <_strtod_l+0x9aa>
 800ac5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac60:	033b      	lsls	r3, r7, #12
 800ac62:	0b1b      	lsrs	r3, r3, #12
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	d039      	beq.n	800acdc <_strtod_l+0x938>
 800ac68:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <_strtod_l+0x930>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d139      	bne.n	800ace2 <_strtod_l+0x93e>
 800ac6e:	2101      	movs	r1, #1
 800ac70:	9b07      	ldr	r3, [sp, #28]
 800ac72:	4249      	negs	r1, r1
 800ac74:	0032      	movs	r2, r6
 800ac76:	0008      	movs	r0, r1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00b      	beq.n	800ac94 <_strtod_l+0x8f0>
 800ac7c:	24d4      	movs	r4, #212	; 0xd4
 800ac7e:	4b12      	ldr	r3, [pc, #72]	; (800acc8 <_strtod_l+0x924>)
 800ac80:	0008      	movs	r0, r1
 800ac82:	403b      	ands	r3, r7
 800ac84:	04e4      	lsls	r4, r4, #19
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	d804      	bhi.n	800ac94 <_strtod_l+0x8f0>
 800ac8a:	306c      	adds	r0, #108	; 0x6c
 800ac8c:	0d1b      	lsrs	r3, r3, #20
 800ac8e:	1ac3      	subs	r3, r0, r3
 800ac90:	4099      	lsls	r1, r3
 800ac92:	0008      	movs	r0, r1
 800ac94:	4282      	cmp	r2, r0
 800ac96:	d124      	bne.n	800ace2 <_strtod_l+0x93e>
 800ac98:	4b0f      	ldr	r3, [pc, #60]	; (800acd8 <_strtod_l+0x934>)
 800ac9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac9c:	4299      	cmp	r1, r3
 800ac9e:	d102      	bne.n	800aca6 <_strtod_l+0x902>
 800aca0:	3201      	adds	r2, #1
 800aca2:	d100      	bne.n	800aca6 <_strtod_l+0x902>
 800aca4:	e5e1      	b.n	800a86a <_strtod_l+0x4c6>
 800aca6:	4b08      	ldr	r3, [pc, #32]	; (800acc8 <_strtod_l+0x924>)
 800aca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acaa:	2600      	movs	r6, #0
 800acac:	401a      	ands	r2, r3
 800acae:	0013      	movs	r3, r2
 800acb0:	2280      	movs	r2, #128	; 0x80
 800acb2:	0352      	lsls	r2, r2, #13
 800acb4:	189f      	adds	r7, r3, r2
 800acb6:	9b07      	ldr	r3, [sp, #28]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1a1      	bne.n	800ac00 <_strtod_l+0x85c>
 800acbc:	e5de      	b.n	800a87c <_strtod_l+0x4d8>
 800acbe:	46c0      	nop			; (mov r8, r8)
 800acc0:	0800d258 	.word	0x0800d258
 800acc4:	fffffc02 	.word	0xfffffc02
 800acc8:	7ff00000 	.word	0x7ff00000
 800accc:	39500000 	.word	0x39500000
 800acd0:	fffffbe2 	.word	0xfffffbe2
 800acd4:	000fffff 	.word	0x000fffff
 800acd8:	7fefffff 	.word	0x7fefffff
 800acdc:	4333      	orrs	r3, r6
 800acde:	d100      	bne.n	800ace2 <_strtod_l+0x93e>
 800ace0:	e77c      	b.n	800abdc <_strtod_l+0x838>
 800ace2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01d      	beq.n	800ad24 <_strtod_l+0x980>
 800ace8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acec:	4213      	tst	r3, r2
 800acee:	d0e2      	beq.n	800acb6 <_strtod_l+0x912>
 800acf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acf2:	0030      	movs	r0, r6
 800acf4:	0039      	movs	r1, r7
 800acf6:	9a07      	ldr	r2, [sp, #28]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d017      	beq.n	800ad2c <_strtod_l+0x988>
 800acfc:	f7ff fb3a 	bl	800a374 <sulp>
 800ad00:	0002      	movs	r2, r0
 800ad02:	000b      	movs	r3, r1
 800ad04:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad06:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad08:	f7f6 f9a8 	bl	800105c <__aeabi_dadd>
 800ad0c:	0006      	movs	r6, r0
 800ad0e:	000f      	movs	r7, r1
 800ad10:	e7d1      	b.n	800acb6 <_strtod_l+0x912>
 800ad12:	2601      	movs	r6, #1
 800ad14:	4013      	ands	r3, r2
 800ad16:	4a98      	ldr	r2, [pc, #608]	; (800af78 <_strtod_l+0xbd4>)
 800ad18:	4276      	negs	r6, r6
 800ad1a:	189b      	adds	r3, r3, r2
 800ad1c:	4a97      	ldr	r2, [pc, #604]	; (800af7c <_strtod_l+0xbd8>)
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	0017      	movs	r7, r2
 800ad22:	e7c8      	b.n	800acb6 <_strtod_l+0x912>
 800ad24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad26:	4233      	tst	r3, r6
 800ad28:	d0c5      	beq.n	800acb6 <_strtod_l+0x912>
 800ad2a:	e7e1      	b.n	800acf0 <_strtod_l+0x94c>
 800ad2c:	f7ff fb22 	bl	800a374 <sulp>
 800ad30:	0002      	movs	r2, r0
 800ad32:	000b      	movs	r3, r1
 800ad34:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad36:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad38:	f7f7 fbac 	bl	8002494 <__aeabi_dsub>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	0006      	movs	r6, r0
 800ad42:	000f      	movs	r7, r1
 800ad44:	f7f5 fb82 	bl	800044c <__aeabi_dcmpeq>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d0b4      	beq.n	800acb6 <_strtod_l+0x912>
 800ad4c:	e600      	b.n	800a950 <_strtod_l+0x5ac>
 800ad4e:	9906      	ldr	r1, [sp, #24]
 800ad50:	9805      	ldr	r0, [sp, #20]
 800ad52:	f7ff faa1 	bl	800a298 <__ratio>
 800ad56:	2380      	movs	r3, #128	; 0x80
 800ad58:	2200      	movs	r2, #0
 800ad5a:	05db      	lsls	r3, r3, #23
 800ad5c:	0004      	movs	r4, r0
 800ad5e:	000d      	movs	r5, r1
 800ad60:	f7f5 fb84 	bl	800046c <__aeabi_dcmple>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d06d      	beq.n	800ae44 <_strtod_l+0xaa0>
 800ad68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d000      	beq.n	800ad70 <_strtod_l+0x9cc>
 800ad6e:	e07e      	b.n	800ae6e <_strtod_l+0xaca>
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	d158      	bne.n	800ae26 <_strtod_l+0xa82>
 800ad74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad76:	031b      	lsls	r3, r3, #12
 800ad78:	d000      	beq.n	800ad7c <_strtod_l+0x9d8>
 800ad7a:	e07f      	b.n	800ae7c <_strtod_l+0xad8>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	0020      	movs	r0, r4
 800ad80:	0029      	movs	r1, r5
 800ad82:	4b7f      	ldr	r3, [pc, #508]	; (800af80 <_strtod_l+0xbdc>)
 800ad84:	f7f5 fb68 	bl	8000458 <__aeabi_dcmplt>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d158      	bne.n	800ae3e <_strtod_l+0xa9a>
 800ad8c:	0020      	movs	r0, r4
 800ad8e:	0029      	movs	r1, r5
 800ad90:	2200      	movs	r2, #0
 800ad92:	4b7c      	ldr	r3, [pc, #496]	; (800af84 <_strtod_l+0xbe0>)
 800ad94:	f7f7 f8bc 	bl	8001f10 <__aeabi_dmul>
 800ad98:	0004      	movs	r4, r0
 800ad9a:	000d      	movs	r5, r1
 800ad9c:	2380      	movs	r3, #128	; 0x80
 800ad9e:	061b      	lsls	r3, r3, #24
 800ada0:	940a      	str	r4, [sp, #40]	; 0x28
 800ada2:	18eb      	adds	r3, r5, r3
 800ada4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ada6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ada8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adaa:	9212      	str	r2, [sp, #72]	; 0x48
 800adac:	9313      	str	r3, [sp, #76]	; 0x4c
 800adae:	4a76      	ldr	r2, [pc, #472]	; (800af88 <_strtod_l+0xbe4>)
 800adb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adb2:	4013      	ands	r3, r2
 800adb4:	9314      	str	r3, [sp, #80]	; 0x50
 800adb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adb8:	4b74      	ldr	r3, [pc, #464]	; (800af8c <_strtod_l+0xbe8>)
 800adba:	429a      	cmp	r2, r3
 800adbc:	d000      	beq.n	800adc0 <_strtod_l+0xa1c>
 800adbe:	e091      	b.n	800aee4 <_strtod_l+0xb40>
 800adc0:	4a73      	ldr	r2, [pc, #460]	; (800af90 <_strtod_l+0xbec>)
 800adc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adc4:	4694      	mov	ip, r2
 800adc6:	4463      	add	r3, ip
 800adc8:	001f      	movs	r7, r3
 800adca:	0030      	movs	r0, r6
 800adcc:	0019      	movs	r1, r3
 800adce:	f7ff f99b 	bl	800a108 <__ulp>
 800add2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add6:	f7f7 f89b 	bl	8001f10 <__aeabi_dmul>
 800adda:	0032      	movs	r2, r6
 800addc:	003b      	movs	r3, r7
 800adde:	f7f6 f93d 	bl	800105c <__aeabi_dadd>
 800ade2:	4a69      	ldr	r2, [pc, #420]	; (800af88 <_strtod_l+0xbe4>)
 800ade4:	4b6b      	ldr	r3, [pc, #428]	; (800af94 <_strtod_l+0xbf0>)
 800ade6:	0006      	movs	r6, r0
 800ade8:	400a      	ands	r2, r1
 800adea:	429a      	cmp	r2, r3
 800adec:	d949      	bls.n	800ae82 <_strtod_l+0xade>
 800adee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800adf0:	4b69      	ldr	r3, [pc, #420]	; (800af98 <_strtod_l+0xbf4>)
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d103      	bne.n	800adfe <_strtod_l+0xa5a>
 800adf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adf8:	3301      	adds	r3, #1
 800adfa:	d100      	bne.n	800adfe <_strtod_l+0xa5a>
 800adfc:	e535      	b.n	800a86a <_strtod_l+0x4c6>
 800adfe:	2601      	movs	r6, #1
 800ae00:	4f65      	ldr	r7, [pc, #404]	; (800af98 <_strtod_l+0xbf4>)
 800ae02:	4276      	negs	r6, r6
 800ae04:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae06:	9804      	ldr	r0, [sp, #16]
 800ae08:	f7fe fe3c 	bl	8009a84 <_Bfree>
 800ae0c:	9908      	ldr	r1, [sp, #32]
 800ae0e:	9804      	ldr	r0, [sp, #16]
 800ae10:	f7fe fe38 	bl	8009a84 <_Bfree>
 800ae14:	9906      	ldr	r1, [sp, #24]
 800ae16:	9804      	ldr	r0, [sp, #16]
 800ae18:	f7fe fe34 	bl	8009a84 <_Bfree>
 800ae1c:	9905      	ldr	r1, [sp, #20]
 800ae1e:	9804      	ldr	r0, [sp, #16]
 800ae20:	f7fe fe30 	bl	8009a84 <_Bfree>
 800ae24:	e60b      	b.n	800aa3e <_strtod_l+0x69a>
 800ae26:	2e01      	cmp	r6, #1
 800ae28:	d103      	bne.n	800ae32 <_strtod_l+0xa8e>
 800ae2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d100      	bne.n	800ae32 <_strtod_l+0xa8e>
 800ae30:	e58e      	b.n	800a950 <_strtod_l+0x5ac>
 800ae32:	2300      	movs	r3, #0
 800ae34:	4c59      	ldr	r4, [pc, #356]	; (800af9c <_strtod_l+0xbf8>)
 800ae36:	930a      	str	r3, [sp, #40]	; 0x28
 800ae38:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae3c:	e01c      	b.n	800ae78 <_strtod_l+0xad4>
 800ae3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae40:	4d50      	ldr	r5, [pc, #320]	; (800af84 <_strtod_l+0xbe0>)
 800ae42:	e7ab      	b.n	800ad9c <_strtod_l+0x9f8>
 800ae44:	2200      	movs	r2, #0
 800ae46:	0020      	movs	r0, r4
 800ae48:	0029      	movs	r1, r5
 800ae4a:	4b4e      	ldr	r3, [pc, #312]	; (800af84 <_strtod_l+0xbe0>)
 800ae4c:	f7f7 f860 	bl	8001f10 <__aeabi_dmul>
 800ae50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae52:	0004      	movs	r4, r0
 800ae54:	000b      	movs	r3, r1
 800ae56:	000d      	movs	r5, r1
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	d104      	bne.n	800ae66 <_strtod_l+0xac2>
 800ae5c:	2280      	movs	r2, #128	; 0x80
 800ae5e:	0612      	lsls	r2, r2, #24
 800ae60:	900a      	str	r0, [sp, #40]	; 0x28
 800ae62:	188b      	adds	r3, r1, r2
 800ae64:	e79e      	b.n	800ada4 <_strtod_l+0xa00>
 800ae66:	0002      	movs	r2, r0
 800ae68:	920a      	str	r2, [sp, #40]	; 0x28
 800ae6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae6c:	e79b      	b.n	800ada6 <_strtod_l+0xa02>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4c43      	ldr	r4, [pc, #268]	; (800af80 <_strtod_l+0xbdc>)
 800ae72:	930a      	str	r3, [sp, #40]	; 0x28
 800ae74:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae76:	2400      	movs	r4, #0
 800ae78:	4d41      	ldr	r5, [pc, #260]	; (800af80 <_strtod_l+0xbdc>)
 800ae7a:	e794      	b.n	800ada6 <_strtod_l+0xa02>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4c47      	ldr	r4, [pc, #284]	; (800af9c <_strtod_l+0xbf8>)
 800ae80:	e7f7      	b.n	800ae72 <_strtod_l+0xace>
 800ae82:	23d4      	movs	r3, #212	; 0xd4
 800ae84:	049b      	lsls	r3, r3, #18
 800ae86:	18cf      	adds	r7, r1, r3
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	970e      	str	r7, [sp, #56]	; 0x38
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1b9      	bne.n	800ae04 <_strtod_l+0xa60>
 800ae90:	4b3d      	ldr	r3, [pc, #244]	; (800af88 <_strtod_l+0xbe4>)
 800ae92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae94:	403b      	ands	r3, r7
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d1b4      	bne.n	800ae04 <_strtod_l+0xa60>
 800ae9a:	0020      	movs	r0, r4
 800ae9c:	0029      	movs	r1, r5
 800ae9e:	f7f5 fb6f 	bl	8000580 <__aeabi_d2lz>
 800aea2:	f7f5 fba9 	bl	80005f8 <__aeabi_l2d>
 800aea6:	0002      	movs	r2, r0
 800aea8:	000b      	movs	r3, r1
 800aeaa:	0020      	movs	r0, r4
 800aeac:	0029      	movs	r1, r5
 800aeae:	f7f7 faf1 	bl	8002494 <__aeabi_dsub>
 800aeb2:	033b      	lsls	r3, r7, #12
 800aeb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeb6:	0b1b      	lsrs	r3, r3, #12
 800aeb8:	4333      	orrs	r3, r6
 800aeba:	4313      	orrs	r3, r2
 800aebc:	0004      	movs	r4, r0
 800aebe:	000d      	movs	r5, r1
 800aec0:	4a37      	ldr	r2, [pc, #220]	; (800afa0 <_strtod_l+0xbfc>)
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d054      	beq.n	800af70 <_strtod_l+0xbcc>
 800aec6:	4b37      	ldr	r3, [pc, #220]	; (800afa4 <_strtod_l+0xc00>)
 800aec8:	f7f5 fac6 	bl	8000458 <__aeabi_dcmplt>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d000      	beq.n	800aed2 <_strtod_l+0xb2e>
 800aed0:	e4d4      	b.n	800a87c <_strtod_l+0x4d8>
 800aed2:	0020      	movs	r0, r4
 800aed4:	0029      	movs	r1, r5
 800aed6:	4a34      	ldr	r2, [pc, #208]	; (800afa8 <_strtod_l+0xc04>)
 800aed8:	4b2a      	ldr	r3, [pc, #168]	; (800af84 <_strtod_l+0xbe0>)
 800aeda:	f7f5 fad1 	bl	8000480 <__aeabi_dcmpgt>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d090      	beq.n	800ae04 <_strtod_l+0xa60>
 800aee2:	e4cb      	b.n	800a87c <_strtod_l+0x4d8>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d02b      	beq.n	800af42 <_strtod_l+0xb9e>
 800aeea:	23d4      	movs	r3, #212	; 0xd4
 800aeec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aeee:	04db      	lsls	r3, r3, #19
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d826      	bhi.n	800af42 <_strtod_l+0xb9e>
 800aef4:	0020      	movs	r0, r4
 800aef6:	0029      	movs	r1, r5
 800aef8:	4a2c      	ldr	r2, [pc, #176]	; (800afac <_strtod_l+0xc08>)
 800aefa:	4b2d      	ldr	r3, [pc, #180]	; (800afb0 <_strtod_l+0xc0c>)
 800aefc:	f7f5 fab6 	bl	800046c <__aeabi_dcmple>
 800af00:	2800      	cmp	r0, #0
 800af02:	d017      	beq.n	800af34 <_strtod_l+0xb90>
 800af04:	0020      	movs	r0, r4
 800af06:	0029      	movs	r1, r5
 800af08:	f7f5 fb1c 	bl	8000544 <__aeabi_d2uiz>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d100      	bne.n	800af12 <_strtod_l+0xb6e>
 800af10:	3001      	adds	r0, #1
 800af12:	f7f7 fec5 	bl	8002ca0 <__aeabi_ui2d>
 800af16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af18:	0004      	movs	r4, r0
 800af1a:	000b      	movs	r3, r1
 800af1c:	000d      	movs	r5, r1
 800af1e:	2a00      	cmp	r2, #0
 800af20:	d122      	bne.n	800af68 <_strtod_l+0xbc4>
 800af22:	2280      	movs	r2, #128	; 0x80
 800af24:	0612      	lsls	r2, r2, #24
 800af26:	188b      	adds	r3, r1, r2
 800af28:	9016      	str	r0, [sp, #88]	; 0x58
 800af2a:	9317      	str	r3, [sp, #92]	; 0x5c
 800af2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af30:	9212      	str	r2, [sp, #72]	; 0x48
 800af32:	9313      	str	r3, [sp, #76]	; 0x4c
 800af34:	22d6      	movs	r2, #214	; 0xd6
 800af36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af38:	04d2      	lsls	r2, r2, #19
 800af3a:	189b      	adds	r3, r3, r2
 800af3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	9313      	str	r3, [sp, #76]	; 0x4c
 800af42:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af46:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800af48:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800af4a:	f7ff f8dd 	bl	800a108 <__ulp>
 800af4e:	0002      	movs	r2, r0
 800af50:	000b      	movs	r3, r1
 800af52:	0030      	movs	r0, r6
 800af54:	0039      	movs	r1, r7
 800af56:	f7f6 ffdb 	bl	8001f10 <__aeabi_dmul>
 800af5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af5e:	f7f6 f87d 	bl	800105c <__aeabi_dadd>
 800af62:	0006      	movs	r6, r0
 800af64:	000f      	movs	r7, r1
 800af66:	e78f      	b.n	800ae88 <_strtod_l+0xae4>
 800af68:	0002      	movs	r2, r0
 800af6a:	9216      	str	r2, [sp, #88]	; 0x58
 800af6c:	9317      	str	r3, [sp, #92]	; 0x5c
 800af6e:	e7dd      	b.n	800af2c <_strtod_l+0xb88>
 800af70:	4b10      	ldr	r3, [pc, #64]	; (800afb4 <_strtod_l+0xc10>)
 800af72:	f7f5 fa71 	bl	8000458 <__aeabi_dcmplt>
 800af76:	e7b2      	b.n	800aede <_strtod_l+0xb3a>
 800af78:	fff00000 	.word	0xfff00000
 800af7c:	000fffff 	.word	0x000fffff
 800af80:	3ff00000 	.word	0x3ff00000
 800af84:	3fe00000 	.word	0x3fe00000
 800af88:	7ff00000 	.word	0x7ff00000
 800af8c:	7fe00000 	.word	0x7fe00000
 800af90:	fcb00000 	.word	0xfcb00000
 800af94:	7c9fffff 	.word	0x7c9fffff
 800af98:	7fefffff 	.word	0x7fefffff
 800af9c:	bff00000 	.word	0xbff00000
 800afa0:	94a03595 	.word	0x94a03595
 800afa4:	3fdfffff 	.word	0x3fdfffff
 800afa8:	35afe535 	.word	0x35afe535
 800afac:	ffc00000 	.word	0xffc00000
 800afb0:	41dfffff 	.word	0x41dfffff
 800afb4:	3fcfffff 	.word	0x3fcfffff

0800afb8 <_strtod_r>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <_strtod_r+0xc>)
 800afbc:	f7ff f9f2 	bl	800a3a4 <_strtod_l>
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	46c0      	nop			; (mov r8, r8)
 800afc4:	2000006c 	.word	0x2000006c

0800afc8 <_strtol_l.constprop.0>:
 800afc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afca:	b087      	sub	sp, #28
 800afcc:	001e      	movs	r6, r3
 800afce:	9005      	str	r0, [sp, #20]
 800afd0:	9101      	str	r1, [sp, #4]
 800afd2:	9202      	str	r2, [sp, #8]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d048      	beq.n	800b06a <_strtol_l.constprop.0+0xa2>
 800afd8:	000b      	movs	r3, r1
 800afda:	2e24      	cmp	r6, #36	; 0x24
 800afdc:	d845      	bhi.n	800b06a <_strtol_l.constprop.0+0xa2>
 800afde:	4a3b      	ldr	r2, [pc, #236]	; (800b0cc <_strtol_l.constprop.0+0x104>)
 800afe0:	2108      	movs	r1, #8
 800afe2:	4694      	mov	ip, r2
 800afe4:	001a      	movs	r2, r3
 800afe6:	4660      	mov	r0, ip
 800afe8:	7814      	ldrb	r4, [r2, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	5d00      	ldrb	r0, [r0, r4]
 800afee:	001d      	movs	r5, r3
 800aff0:	0007      	movs	r7, r0
 800aff2:	400f      	ands	r7, r1
 800aff4:	4208      	tst	r0, r1
 800aff6:	d1f5      	bne.n	800afe4 <_strtol_l.constprop.0+0x1c>
 800aff8:	2c2d      	cmp	r4, #45	; 0x2d
 800affa:	d13d      	bne.n	800b078 <_strtol_l.constprop.0+0xb0>
 800affc:	2701      	movs	r7, #1
 800affe:	781c      	ldrb	r4, [r3, #0]
 800b000:	1c95      	adds	r5, r2, #2
 800b002:	2e00      	cmp	r6, #0
 800b004:	d05e      	beq.n	800b0c4 <_strtol_l.constprop.0+0xfc>
 800b006:	2e10      	cmp	r6, #16
 800b008:	d109      	bne.n	800b01e <_strtol_l.constprop.0+0x56>
 800b00a:	2c30      	cmp	r4, #48	; 0x30
 800b00c:	d107      	bne.n	800b01e <_strtol_l.constprop.0+0x56>
 800b00e:	2220      	movs	r2, #32
 800b010:	782b      	ldrb	r3, [r5, #0]
 800b012:	4393      	bics	r3, r2
 800b014:	2b58      	cmp	r3, #88	; 0x58
 800b016:	d150      	bne.n	800b0ba <_strtol_l.constprop.0+0xf2>
 800b018:	2610      	movs	r6, #16
 800b01a:	786c      	ldrb	r4, [r5, #1]
 800b01c:	3502      	adds	r5, #2
 800b01e:	4b2c      	ldr	r3, [pc, #176]	; (800b0d0 <_strtol_l.constprop.0+0x108>)
 800b020:	0031      	movs	r1, r6
 800b022:	18fb      	adds	r3, r7, r3
 800b024:	0018      	movs	r0, r3
 800b026:	9303      	str	r3, [sp, #12]
 800b028:	f7f5 f910 	bl	800024c <__aeabi_uidivmod>
 800b02c:	2200      	movs	r2, #0
 800b02e:	9104      	str	r1, [sp, #16]
 800b030:	2101      	movs	r1, #1
 800b032:	4684      	mov	ip, r0
 800b034:	0010      	movs	r0, r2
 800b036:	4249      	negs	r1, r1
 800b038:	0023      	movs	r3, r4
 800b03a:	3b30      	subs	r3, #48	; 0x30
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d903      	bls.n	800b048 <_strtol_l.constprop.0+0x80>
 800b040:	3b11      	subs	r3, #17
 800b042:	2b19      	cmp	r3, #25
 800b044:	d81d      	bhi.n	800b082 <_strtol_l.constprop.0+0xba>
 800b046:	330a      	adds	r3, #10
 800b048:	429e      	cmp	r6, r3
 800b04a:	dd1e      	ble.n	800b08a <_strtol_l.constprop.0+0xc2>
 800b04c:	1c54      	adds	r4, r2, #1
 800b04e:	d009      	beq.n	800b064 <_strtol_l.constprop.0+0x9c>
 800b050:	000a      	movs	r2, r1
 800b052:	4584      	cmp	ip, r0
 800b054:	d306      	bcc.n	800b064 <_strtol_l.constprop.0+0x9c>
 800b056:	d102      	bne.n	800b05e <_strtol_l.constprop.0+0x96>
 800b058:	9c04      	ldr	r4, [sp, #16]
 800b05a:	429c      	cmp	r4, r3
 800b05c:	db02      	blt.n	800b064 <_strtol_l.constprop.0+0x9c>
 800b05e:	2201      	movs	r2, #1
 800b060:	4370      	muls	r0, r6
 800b062:	1818      	adds	r0, r3, r0
 800b064:	782c      	ldrb	r4, [r5, #0]
 800b066:	3501      	adds	r5, #1
 800b068:	e7e6      	b.n	800b038 <_strtol_l.constprop.0+0x70>
 800b06a:	f7fd fcdb 	bl	8008a24 <__errno>
 800b06e:	2316      	movs	r3, #22
 800b070:	6003      	str	r3, [r0, #0]
 800b072:	2000      	movs	r0, #0
 800b074:	b007      	add	sp, #28
 800b076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b078:	2c2b      	cmp	r4, #43	; 0x2b
 800b07a:	d1c2      	bne.n	800b002 <_strtol_l.constprop.0+0x3a>
 800b07c:	781c      	ldrb	r4, [r3, #0]
 800b07e:	1c95      	adds	r5, r2, #2
 800b080:	e7bf      	b.n	800b002 <_strtol_l.constprop.0+0x3a>
 800b082:	0023      	movs	r3, r4
 800b084:	3b61      	subs	r3, #97	; 0x61
 800b086:	2b19      	cmp	r3, #25
 800b088:	d9dd      	bls.n	800b046 <_strtol_l.constprop.0+0x7e>
 800b08a:	1c53      	adds	r3, r2, #1
 800b08c:	d109      	bne.n	800b0a2 <_strtol_l.constprop.0+0xda>
 800b08e:	2322      	movs	r3, #34	; 0x22
 800b090:	9a05      	ldr	r2, [sp, #20]
 800b092:	9803      	ldr	r0, [sp, #12]
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	9b02      	ldr	r3, [sp, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0eb      	beq.n	800b074 <_strtol_l.constprop.0+0xac>
 800b09c:	1e6b      	subs	r3, r5, #1
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	e007      	b.n	800b0b2 <_strtol_l.constprop.0+0xea>
 800b0a2:	2f00      	cmp	r7, #0
 800b0a4:	d000      	beq.n	800b0a8 <_strtol_l.constprop.0+0xe0>
 800b0a6:	4240      	negs	r0, r0
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0e2      	beq.n	800b074 <_strtol_l.constprop.0+0xac>
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	d1f4      	bne.n	800b09c <_strtol_l.constprop.0+0xd4>
 800b0b2:	9b02      	ldr	r3, [sp, #8]
 800b0b4:	9a01      	ldr	r2, [sp, #4]
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	e7dc      	b.n	800b074 <_strtol_l.constprop.0+0xac>
 800b0ba:	2430      	movs	r4, #48	; 0x30
 800b0bc:	2e00      	cmp	r6, #0
 800b0be:	d1ae      	bne.n	800b01e <_strtol_l.constprop.0+0x56>
 800b0c0:	3608      	adds	r6, #8
 800b0c2:	e7ac      	b.n	800b01e <_strtol_l.constprop.0+0x56>
 800b0c4:	2c30      	cmp	r4, #48	; 0x30
 800b0c6:	d0a2      	beq.n	800b00e <_strtol_l.constprop.0+0x46>
 800b0c8:	260a      	movs	r6, #10
 800b0ca:	e7a8      	b.n	800b01e <_strtol_l.constprop.0+0x56>
 800b0cc:	0800d281 	.word	0x0800d281
 800b0d0:	7fffffff 	.word	0x7fffffff

0800b0d4 <_strtol_r>:
 800b0d4:	b510      	push	{r4, lr}
 800b0d6:	f7ff ff77 	bl	800afc8 <_strtol_l.constprop.0>
 800b0da:	bd10      	pop	{r4, pc}

0800b0dc <__ssputs_r>:
 800b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	9203      	str	r2, [sp, #12]
 800b0e4:	688e      	ldr	r6, [r1, #8]
 800b0e6:	9a01      	ldr	r2, [sp, #4]
 800b0e8:	0007      	movs	r7, r0
 800b0ea:	000c      	movs	r4, r1
 800b0ec:	680b      	ldr	r3, [r1, #0]
 800b0ee:	4296      	cmp	r6, r2
 800b0f0:	d831      	bhi.n	800b156 <__ssputs_r+0x7a>
 800b0f2:	898a      	ldrh	r2, [r1, #12]
 800b0f4:	2190      	movs	r1, #144	; 0x90
 800b0f6:	00c9      	lsls	r1, r1, #3
 800b0f8:	420a      	tst	r2, r1
 800b0fa:	d029      	beq.n	800b150 <__ssputs_r+0x74>
 800b0fc:	2003      	movs	r0, #3
 800b0fe:	6921      	ldr	r1, [r4, #16]
 800b100:	1a5b      	subs	r3, r3, r1
 800b102:	9302      	str	r3, [sp, #8]
 800b104:	6963      	ldr	r3, [r4, #20]
 800b106:	4343      	muls	r3, r0
 800b108:	0fdd      	lsrs	r5, r3, #31
 800b10a:	18ed      	adds	r5, r5, r3
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	9802      	ldr	r0, [sp, #8]
 800b110:	3301      	adds	r3, #1
 800b112:	181b      	adds	r3, r3, r0
 800b114:	106d      	asrs	r5, r5, #1
 800b116:	42ab      	cmp	r3, r5
 800b118:	d900      	bls.n	800b11c <__ssputs_r+0x40>
 800b11a:	001d      	movs	r5, r3
 800b11c:	0552      	lsls	r2, r2, #21
 800b11e:	d529      	bpl.n	800b174 <__ssputs_r+0x98>
 800b120:	0029      	movs	r1, r5
 800b122:	0038      	movs	r0, r7
 800b124:	f7fe fbd8 	bl	80098d8 <_malloc_r>
 800b128:	1e06      	subs	r6, r0, #0
 800b12a:	d02d      	beq.n	800b188 <__ssputs_r+0xac>
 800b12c:	9a02      	ldr	r2, [sp, #8]
 800b12e:	6921      	ldr	r1, [r4, #16]
 800b130:	f7fd fcb0 	bl	8008a94 <memcpy>
 800b134:	89a2      	ldrh	r2, [r4, #12]
 800b136:	4b19      	ldr	r3, [pc, #100]	; (800b19c <__ssputs_r+0xc0>)
 800b138:	401a      	ands	r2, r3
 800b13a:	2380      	movs	r3, #128	; 0x80
 800b13c:	4313      	orrs	r3, r2
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	9b02      	ldr	r3, [sp, #8]
 800b142:	6126      	str	r6, [r4, #16]
 800b144:	18f6      	adds	r6, r6, r3
 800b146:	6026      	str	r6, [r4, #0]
 800b148:	6165      	str	r5, [r4, #20]
 800b14a:	9e01      	ldr	r6, [sp, #4]
 800b14c:	1aed      	subs	r5, r5, r3
 800b14e:	60a5      	str	r5, [r4, #8]
 800b150:	9b01      	ldr	r3, [sp, #4]
 800b152:	429e      	cmp	r6, r3
 800b154:	d900      	bls.n	800b158 <__ssputs_r+0x7c>
 800b156:	9e01      	ldr	r6, [sp, #4]
 800b158:	0032      	movs	r2, r6
 800b15a:	9903      	ldr	r1, [sp, #12]
 800b15c:	6820      	ldr	r0, [r4, #0]
 800b15e:	f7fd fbf3 	bl	8008948 <memmove>
 800b162:	2000      	movs	r0, #0
 800b164:	68a3      	ldr	r3, [r4, #8]
 800b166:	1b9b      	subs	r3, r3, r6
 800b168:	60a3      	str	r3, [r4, #8]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	199b      	adds	r3, r3, r6
 800b16e:	6023      	str	r3, [r4, #0]
 800b170:	b005      	add	sp, #20
 800b172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b174:	002a      	movs	r2, r5
 800b176:	0038      	movs	r0, r7
 800b178:	f000 ff96 	bl	800c0a8 <_realloc_r>
 800b17c:	1e06      	subs	r6, r0, #0
 800b17e:	d1df      	bne.n	800b140 <__ssputs_r+0x64>
 800b180:	0038      	movs	r0, r7
 800b182:	6921      	ldr	r1, [r4, #16]
 800b184:	f7fe fb32 	bl	80097ec <_free_r>
 800b188:	230c      	movs	r3, #12
 800b18a:	2001      	movs	r0, #1
 800b18c:	603b      	str	r3, [r7, #0]
 800b18e:	89a2      	ldrh	r2, [r4, #12]
 800b190:	3334      	adds	r3, #52	; 0x34
 800b192:	4313      	orrs	r3, r2
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	4240      	negs	r0, r0
 800b198:	e7ea      	b.n	800b170 <__ssputs_r+0x94>
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	fffffb7f 	.word	0xfffffb7f

0800b1a0 <_svfiprintf_r>:
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	b0a1      	sub	sp, #132	; 0x84
 800b1a4:	9003      	str	r0, [sp, #12]
 800b1a6:	001d      	movs	r5, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	000f      	movs	r7, r1
 800b1ac:	0016      	movs	r6, r2
 800b1ae:	061b      	lsls	r3, r3, #24
 800b1b0:	d511      	bpl.n	800b1d6 <_svfiprintf_r+0x36>
 800b1b2:	690b      	ldr	r3, [r1, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10e      	bne.n	800b1d6 <_svfiprintf_r+0x36>
 800b1b8:	2140      	movs	r1, #64	; 0x40
 800b1ba:	f7fe fb8d 	bl	80098d8 <_malloc_r>
 800b1be:	6038      	str	r0, [r7, #0]
 800b1c0:	6138      	str	r0, [r7, #16]
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d105      	bne.n	800b1d2 <_svfiprintf_r+0x32>
 800b1c6:	230c      	movs	r3, #12
 800b1c8:	9a03      	ldr	r2, [sp, #12]
 800b1ca:	3801      	subs	r0, #1
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	b021      	add	sp, #132	; 0x84
 800b1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d2:	2340      	movs	r3, #64	; 0x40
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	ac08      	add	r4, sp, #32
 800b1da:	6163      	str	r3, [r4, #20]
 800b1dc:	3320      	adds	r3, #32
 800b1de:	7663      	strb	r3, [r4, #25]
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	76a3      	strb	r3, [r4, #26]
 800b1e4:	9507      	str	r5, [sp, #28]
 800b1e6:	0035      	movs	r5, r6
 800b1e8:	782b      	ldrb	r3, [r5, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <_svfiprintf_r+0x52>
 800b1ee:	2b25      	cmp	r3, #37	; 0x25
 800b1f0:	d148      	bne.n	800b284 <_svfiprintf_r+0xe4>
 800b1f2:	1bab      	subs	r3, r5, r6
 800b1f4:	9305      	str	r3, [sp, #20]
 800b1f6:	42b5      	cmp	r5, r6
 800b1f8:	d00b      	beq.n	800b212 <_svfiprintf_r+0x72>
 800b1fa:	0032      	movs	r2, r6
 800b1fc:	0039      	movs	r1, r7
 800b1fe:	9803      	ldr	r0, [sp, #12]
 800b200:	f7ff ff6c 	bl	800b0dc <__ssputs_r>
 800b204:	3001      	adds	r0, #1
 800b206:	d100      	bne.n	800b20a <_svfiprintf_r+0x6a>
 800b208:	e0af      	b.n	800b36a <_svfiprintf_r+0x1ca>
 800b20a:	6963      	ldr	r3, [r4, #20]
 800b20c:	9a05      	ldr	r2, [sp, #20]
 800b20e:	189b      	adds	r3, r3, r2
 800b210:	6163      	str	r3, [r4, #20]
 800b212:	782b      	ldrb	r3, [r5, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d100      	bne.n	800b21a <_svfiprintf_r+0x7a>
 800b218:	e0a7      	b.n	800b36a <_svfiprintf_r+0x1ca>
 800b21a:	2201      	movs	r2, #1
 800b21c:	2300      	movs	r3, #0
 800b21e:	4252      	negs	r2, r2
 800b220:	6062      	str	r2, [r4, #4]
 800b222:	a904      	add	r1, sp, #16
 800b224:	3254      	adds	r2, #84	; 0x54
 800b226:	1852      	adds	r2, r2, r1
 800b228:	1c6e      	adds	r6, r5, #1
 800b22a:	6023      	str	r3, [r4, #0]
 800b22c:	60e3      	str	r3, [r4, #12]
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	7013      	strb	r3, [r2, #0]
 800b232:	65a3      	str	r3, [r4, #88]	; 0x58
 800b234:	4b55      	ldr	r3, [pc, #340]	; (800b38c <_svfiprintf_r+0x1ec>)
 800b236:	2205      	movs	r2, #5
 800b238:	0018      	movs	r0, r3
 800b23a:	7831      	ldrb	r1, [r6, #0]
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	f7fd fc1e 	bl	8008a7e <memchr>
 800b242:	1c75      	adds	r5, r6, #1
 800b244:	2800      	cmp	r0, #0
 800b246:	d11f      	bne.n	800b288 <_svfiprintf_r+0xe8>
 800b248:	6822      	ldr	r2, [r4, #0]
 800b24a:	06d3      	lsls	r3, r2, #27
 800b24c:	d504      	bpl.n	800b258 <_svfiprintf_r+0xb8>
 800b24e:	2353      	movs	r3, #83	; 0x53
 800b250:	a904      	add	r1, sp, #16
 800b252:	185b      	adds	r3, r3, r1
 800b254:	2120      	movs	r1, #32
 800b256:	7019      	strb	r1, [r3, #0]
 800b258:	0713      	lsls	r3, r2, #28
 800b25a:	d504      	bpl.n	800b266 <_svfiprintf_r+0xc6>
 800b25c:	2353      	movs	r3, #83	; 0x53
 800b25e:	a904      	add	r1, sp, #16
 800b260:	185b      	adds	r3, r3, r1
 800b262:	212b      	movs	r1, #43	; 0x2b
 800b264:	7019      	strb	r1, [r3, #0]
 800b266:	7833      	ldrb	r3, [r6, #0]
 800b268:	2b2a      	cmp	r3, #42	; 0x2a
 800b26a:	d016      	beq.n	800b29a <_svfiprintf_r+0xfa>
 800b26c:	0035      	movs	r5, r6
 800b26e:	2100      	movs	r1, #0
 800b270:	200a      	movs	r0, #10
 800b272:	68e3      	ldr	r3, [r4, #12]
 800b274:	782a      	ldrb	r2, [r5, #0]
 800b276:	1c6e      	adds	r6, r5, #1
 800b278:	3a30      	subs	r2, #48	; 0x30
 800b27a:	2a09      	cmp	r2, #9
 800b27c:	d94e      	bls.n	800b31c <_svfiprintf_r+0x17c>
 800b27e:	2900      	cmp	r1, #0
 800b280:	d111      	bne.n	800b2a6 <_svfiprintf_r+0x106>
 800b282:	e017      	b.n	800b2b4 <_svfiprintf_r+0x114>
 800b284:	3501      	adds	r5, #1
 800b286:	e7af      	b.n	800b1e8 <_svfiprintf_r+0x48>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	6822      	ldr	r2, [r4, #0]
 800b28c:	1ac0      	subs	r0, r0, r3
 800b28e:	2301      	movs	r3, #1
 800b290:	4083      	lsls	r3, r0
 800b292:	4313      	orrs	r3, r2
 800b294:	002e      	movs	r6, r5
 800b296:	6023      	str	r3, [r4, #0]
 800b298:	e7cc      	b.n	800b234 <_svfiprintf_r+0x94>
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	1d19      	adds	r1, r3, #4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	9107      	str	r1, [sp, #28]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	db01      	blt.n	800b2aa <_svfiprintf_r+0x10a>
 800b2a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2a8:	e004      	b.n	800b2b4 <_svfiprintf_r+0x114>
 800b2aa:	425b      	negs	r3, r3
 800b2ac:	60e3      	str	r3, [r4, #12]
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	782b      	ldrb	r3, [r5, #0]
 800b2b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b8:	d10a      	bne.n	800b2d0 <_svfiprintf_r+0x130>
 800b2ba:	786b      	ldrb	r3, [r5, #1]
 800b2bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b2be:	d135      	bne.n	800b32c <_svfiprintf_r+0x18c>
 800b2c0:	9b07      	ldr	r3, [sp, #28]
 800b2c2:	3502      	adds	r5, #2
 800b2c4:	1d1a      	adds	r2, r3, #4
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	9207      	str	r2, [sp, #28]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	db2b      	blt.n	800b326 <_svfiprintf_r+0x186>
 800b2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d0:	4e2f      	ldr	r6, [pc, #188]	; (800b390 <_svfiprintf_r+0x1f0>)
 800b2d2:	2203      	movs	r2, #3
 800b2d4:	0030      	movs	r0, r6
 800b2d6:	7829      	ldrb	r1, [r5, #0]
 800b2d8:	f7fd fbd1 	bl	8008a7e <memchr>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d006      	beq.n	800b2ee <_svfiprintf_r+0x14e>
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	1b80      	subs	r0, r0, r6
 800b2e4:	4083      	lsls	r3, r0
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	3501      	adds	r5, #1
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	7829      	ldrb	r1, [r5, #0]
 800b2f0:	2206      	movs	r2, #6
 800b2f2:	4828      	ldr	r0, [pc, #160]	; (800b394 <_svfiprintf_r+0x1f4>)
 800b2f4:	1c6e      	adds	r6, r5, #1
 800b2f6:	7621      	strb	r1, [r4, #24]
 800b2f8:	f7fd fbc1 	bl	8008a7e <memchr>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d03c      	beq.n	800b37a <_svfiprintf_r+0x1da>
 800b300:	4b25      	ldr	r3, [pc, #148]	; (800b398 <_svfiprintf_r+0x1f8>)
 800b302:	2b00      	cmp	r3, #0
 800b304:	d125      	bne.n	800b352 <_svfiprintf_r+0x1b2>
 800b306:	2207      	movs	r2, #7
 800b308:	9b07      	ldr	r3, [sp, #28]
 800b30a:	3307      	adds	r3, #7
 800b30c:	4393      	bics	r3, r2
 800b30e:	3308      	adds	r3, #8
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	6963      	ldr	r3, [r4, #20]
 800b314:	9a04      	ldr	r2, [sp, #16]
 800b316:	189b      	adds	r3, r3, r2
 800b318:	6163      	str	r3, [r4, #20]
 800b31a:	e764      	b.n	800b1e6 <_svfiprintf_r+0x46>
 800b31c:	4343      	muls	r3, r0
 800b31e:	0035      	movs	r5, r6
 800b320:	2101      	movs	r1, #1
 800b322:	189b      	adds	r3, r3, r2
 800b324:	e7a6      	b.n	800b274 <_svfiprintf_r+0xd4>
 800b326:	2301      	movs	r3, #1
 800b328:	425b      	negs	r3, r3
 800b32a:	e7d0      	b.n	800b2ce <_svfiprintf_r+0x12e>
 800b32c:	2300      	movs	r3, #0
 800b32e:	200a      	movs	r0, #10
 800b330:	001a      	movs	r2, r3
 800b332:	3501      	adds	r5, #1
 800b334:	6063      	str	r3, [r4, #4]
 800b336:	7829      	ldrb	r1, [r5, #0]
 800b338:	1c6e      	adds	r6, r5, #1
 800b33a:	3930      	subs	r1, #48	; 0x30
 800b33c:	2909      	cmp	r1, #9
 800b33e:	d903      	bls.n	800b348 <_svfiprintf_r+0x1a8>
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0c5      	beq.n	800b2d0 <_svfiprintf_r+0x130>
 800b344:	9209      	str	r2, [sp, #36]	; 0x24
 800b346:	e7c3      	b.n	800b2d0 <_svfiprintf_r+0x130>
 800b348:	4342      	muls	r2, r0
 800b34a:	0035      	movs	r5, r6
 800b34c:	2301      	movs	r3, #1
 800b34e:	1852      	adds	r2, r2, r1
 800b350:	e7f1      	b.n	800b336 <_svfiprintf_r+0x196>
 800b352:	aa07      	add	r2, sp, #28
 800b354:	9200      	str	r2, [sp, #0]
 800b356:	0021      	movs	r1, r4
 800b358:	003a      	movs	r2, r7
 800b35a:	4b10      	ldr	r3, [pc, #64]	; (800b39c <_svfiprintf_r+0x1fc>)
 800b35c:	9803      	ldr	r0, [sp, #12]
 800b35e:	f7fc fba1 	bl	8007aa4 <_printf_float>
 800b362:	9004      	str	r0, [sp, #16]
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	3301      	adds	r3, #1
 800b368:	d1d3      	bne.n	800b312 <_svfiprintf_r+0x172>
 800b36a:	89bb      	ldrh	r3, [r7, #12]
 800b36c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b36e:	065b      	lsls	r3, r3, #25
 800b370:	d400      	bmi.n	800b374 <_svfiprintf_r+0x1d4>
 800b372:	e72c      	b.n	800b1ce <_svfiprintf_r+0x2e>
 800b374:	2001      	movs	r0, #1
 800b376:	4240      	negs	r0, r0
 800b378:	e729      	b.n	800b1ce <_svfiprintf_r+0x2e>
 800b37a:	aa07      	add	r2, sp, #28
 800b37c:	9200      	str	r2, [sp, #0]
 800b37e:	0021      	movs	r1, r4
 800b380:	003a      	movs	r2, r7
 800b382:	4b06      	ldr	r3, [pc, #24]	; (800b39c <_svfiprintf_r+0x1fc>)
 800b384:	9803      	ldr	r0, [sp, #12]
 800b386:	f7fc fe53 	bl	8008030 <_printf_i>
 800b38a:	e7ea      	b.n	800b362 <_svfiprintf_r+0x1c2>
 800b38c:	0800d381 	.word	0x0800d381
 800b390:	0800d387 	.word	0x0800d387
 800b394:	0800d38b 	.word	0x0800d38b
 800b398:	08007aa5 	.word	0x08007aa5
 800b39c:	0800b0dd 	.word	0x0800b0dd

0800b3a0 <__sfputc_r>:
 800b3a0:	6893      	ldr	r3, [r2, #8]
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	6093      	str	r3, [r2, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da04      	bge.n	800b3b6 <__sfputc_r+0x16>
 800b3ac:	6994      	ldr	r4, [r2, #24]
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	db07      	blt.n	800b3c2 <__sfputc_r+0x22>
 800b3b2:	290a      	cmp	r1, #10
 800b3b4:	d005      	beq.n	800b3c2 <__sfputc_r+0x22>
 800b3b6:	6813      	ldr	r3, [r2, #0]
 800b3b8:	1c58      	adds	r0, r3, #1
 800b3ba:	6010      	str	r0, [r2, #0]
 800b3bc:	7019      	strb	r1, [r3, #0]
 800b3be:	0008      	movs	r0, r1
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	f000 f9e6 	bl	800b792 <__swbuf_r>
 800b3c6:	0001      	movs	r1, r0
 800b3c8:	e7f9      	b.n	800b3be <__sfputc_r+0x1e>

0800b3ca <__sfputs_r>:
 800b3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3cc:	0006      	movs	r6, r0
 800b3ce:	000f      	movs	r7, r1
 800b3d0:	0014      	movs	r4, r2
 800b3d2:	18d5      	adds	r5, r2, r3
 800b3d4:	42ac      	cmp	r4, r5
 800b3d6:	d101      	bne.n	800b3dc <__sfputs_r+0x12>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e007      	b.n	800b3ec <__sfputs_r+0x22>
 800b3dc:	7821      	ldrb	r1, [r4, #0]
 800b3de:	003a      	movs	r2, r7
 800b3e0:	0030      	movs	r0, r6
 800b3e2:	f7ff ffdd 	bl	800b3a0 <__sfputc_r>
 800b3e6:	3401      	adds	r4, #1
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d1f3      	bne.n	800b3d4 <__sfputs_r+0xa>
 800b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3f0 <_vfiprintf_r>:
 800b3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3f2:	b0a1      	sub	sp, #132	; 0x84
 800b3f4:	000f      	movs	r7, r1
 800b3f6:	0015      	movs	r5, r2
 800b3f8:	001e      	movs	r6, r3
 800b3fa:	9003      	str	r0, [sp, #12]
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d004      	beq.n	800b40a <_vfiprintf_r+0x1a>
 800b400:	6a03      	ldr	r3, [r0, #32]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <_vfiprintf_r+0x1a>
 800b406:	f7fd f9bb 	bl	8008780 <__sinit>
 800b40a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b40c:	07db      	lsls	r3, r3, #31
 800b40e:	d405      	bmi.n	800b41c <_vfiprintf_r+0x2c>
 800b410:	89bb      	ldrh	r3, [r7, #12]
 800b412:	059b      	lsls	r3, r3, #22
 800b414:	d402      	bmi.n	800b41c <_vfiprintf_r+0x2c>
 800b416:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b418:	f7fd fb2f 	bl	8008a7a <__retarget_lock_acquire_recursive>
 800b41c:	89bb      	ldrh	r3, [r7, #12]
 800b41e:	071b      	lsls	r3, r3, #28
 800b420:	d502      	bpl.n	800b428 <_vfiprintf_r+0x38>
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d113      	bne.n	800b450 <_vfiprintf_r+0x60>
 800b428:	0039      	movs	r1, r7
 800b42a:	9803      	ldr	r0, [sp, #12]
 800b42c:	f000 f9f4 	bl	800b818 <__swsetup_r>
 800b430:	2800      	cmp	r0, #0
 800b432:	d00d      	beq.n	800b450 <_vfiprintf_r+0x60>
 800b434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b436:	07db      	lsls	r3, r3, #31
 800b438:	d503      	bpl.n	800b442 <_vfiprintf_r+0x52>
 800b43a:	2001      	movs	r0, #1
 800b43c:	4240      	negs	r0, r0
 800b43e:	b021      	add	sp, #132	; 0x84
 800b440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b442:	89bb      	ldrh	r3, [r7, #12]
 800b444:	059b      	lsls	r3, r3, #22
 800b446:	d4f8      	bmi.n	800b43a <_vfiprintf_r+0x4a>
 800b448:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b44a:	f7fd fb17 	bl	8008a7c <__retarget_lock_release_recursive>
 800b44e:	e7f4      	b.n	800b43a <_vfiprintf_r+0x4a>
 800b450:	2300      	movs	r3, #0
 800b452:	ac08      	add	r4, sp, #32
 800b454:	6163      	str	r3, [r4, #20]
 800b456:	3320      	adds	r3, #32
 800b458:	7663      	strb	r3, [r4, #25]
 800b45a:	3310      	adds	r3, #16
 800b45c:	76a3      	strb	r3, [r4, #26]
 800b45e:	9607      	str	r6, [sp, #28]
 800b460:	002e      	movs	r6, r5
 800b462:	7833      	ldrb	r3, [r6, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <_vfiprintf_r+0x7c>
 800b468:	2b25      	cmp	r3, #37	; 0x25
 800b46a:	d148      	bne.n	800b4fe <_vfiprintf_r+0x10e>
 800b46c:	1b73      	subs	r3, r6, r5
 800b46e:	9305      	str	r3, [sp, #20]
 800b470:	42ae      	cmp	r6, r5
 800b472:	d00b      	beq.n	800b48c <_vfiprintf_r+0x9c>
 800b474:	002a      	movs	r2, r5
 800b476:	0039      	movs	r1, r7
 800b478:	9803      	ldr	r0, [sp, #12]
 800b47a:	f7ff ffa6 	bl	800b3ca <__sfputs_r>
 800b47e:	3001      	adds	r0, #1
 800b480:	d100      	bne.n	800b484 <_vfiprintf_r+0x94>
 800b482:	e0af      	b.n	800b5e4 <_vfiprintf_r+0x1f4>
 800b484:	6963      	ldr	r3, [r4, #20]
 800b486:	9a05      	ldr	r2, [sp, #20]
 800b488:	189b      	adds	r3, r3, r2
 800b48a:	6163      	str	r3, [r4, #20]
 800b48c:	7833      	ldrb	r3, [r6, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d100      	bne.n	800b494 <_vfiprintf_r+0xa4>
 800b492:	e0a7      	b.n	800b5e4 <_vfiprintf_r+0x1f4>
 800b494:	2201      	movs	r2, #1
 800b496:	2300      	movs	r3, #0
 800b498:	4252      	negs	r2, r2
 800b49a:	6062      	str	r2, [r4, #4]
 800b49c:	a904      	add	r1, sp, #16
 800b49e:	3254      	adds	r2, #84	; 0x54
 800b4a0:	1852      	adds	r2, r2, r1
 800b4a2:	1c75      	adds	r5, r6, #1
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	60e3      	str	r3, [r4, #12]
 800b4a8:	60a3      	str	r3, [r4, #8]
 800b4aa:	7013      	strb	r3, [r2, #0]
 800b4ac:	65a3      	str	r3, [r4, #88]	; 0x58
 800b4ae:	4b59      	ldr	r3, [pc, #356]	; (800b614 <_vfiprintf_r+0x224>)
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	7829      	ldrb	r1, [r5, #0]
 800b4b6:	9305      	str	r3, [sp, #20]
 800b4b8:	f7fd fae1 	bl	8008a7e <memchr>
 800b4bc:	1c6e      	adds	r6, r5, #1
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d11f      	bne.n	800b502 <_vfiprintf_r+0x112>
 800b4c2:	6822      	ldr	r2, [r4, #0]
 800b4c4:	06d3      	lsls	r3, r2, #27
 800b4c6:	d504      	bpl.n	800b4d2 <_vfiprintf_r+0xe2>
 800b4c8:	2353      	movs	r3, #83	; 0x53
 800b4ca:	a904      	add	r1, sp, #16
 800b4cc:	185b      	adds	r3, r3, r1
 800b4ce:	2120      	movs	r1, #32
 800b4d0:	7019      	strb	r1, [r3, #0]
 800b4d2:	0713      	lsls	r3, r2, #28
 800b4d4:	d504      	bpl.n	800b4e0 <_vfiprintf_r+0xf0>
 800b4d6:	2353      	movs	r3, #83	; 0x53
 800b4d8:	a904      	add	r1, sp, #16
 800b4da:	185b      	adds	r3, r3, r1
 800b4dc:	212b      	movs	r1, #43	; 0x2b
 800b4de:	7019      	strb	r1, [r3, #0]
 800b4e0:	782b      	ldrb	r3, [r5, #0]
 800b4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e4:	d016      	beq.n	800b514 <_vfiprintf_r+0x124>
 800b4e6:	002e      	movs	r6, r5
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	200a      	movs	r0, #10
 800b4ec:	68e3      	ldr	r3, [r4, #12]
 800b4ee:	7832      	ldrb	r2, [r6, #0]
 800b4f0:	1c75      	adds	r5, r6, #1
 800b4f2:	3a30      	subs	r2, #48	; 0x30
 800b4f4:	2a09      	cmp	r2, #9
 800b4f6:	d94e      	bls.n	800b596 <_vfiprintf_r+0x1a6>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	d111      	bne.n	800b520 <_vfiprintf_r+0x130>
 800b4fc:	e017      	b.n	800b52e <_vfiprintf_r+0x13e>
 800b4fe:	3601      	adds	r6, #1
 800b500:	e7af      	b.n	800b462 <_vfiprintf_r+0x72>
 800b502:	9b05      	ldr	r3, [sp, #20]
 800b504:	6822      	ldr	r2, [r4, #0]
 800b506:	1ac0      	subs	r0, r0, r3
 800b508:	2301      	movs	r3, #1
 800b50a:	4083      	lsls	r3, r0
 800b50c:	4313      	orrs	r3, r2
 800b50e:	0035      	movs	r5, r6
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	e7cc      	b.n	800b4ae <_vfiprintf_r+0xbe>
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	1d19      	adds	r1, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	9107      	str	r1, [sp, #28]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	db01      	blt.n	800b524 <_vfiprintf_r+0x134>
 800b520:	930b      	str	r3, [sp, #44]	; 0x2c
 800b522:	e004      	b.n	800b52e <_vfiprintf_r+0x13e>
 800b524:	425b      	negs	r3, r3
 800b526:	60e3      	str	r3, [r4, #12]
 800b528:	2302      	movs	r3, #2
 800b52a:	4313      	orrs	r3, r2
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	7833      	ldrb	r3, [r6, #0]
 800b530:	2b2e      	cmp	r3, #46	; 0x2e
 800b532:	d10a      	bne.n	800b54a <_vfiprintf_r+0x15a>
 800b534:	7873      	ldrb	r3, [r6, #1]
 800b536:	2b2a      	cmp	r3, #42	; 0x2a
 800b538:	d135      	bne.n	800b5a6 <_vfiprintf_r+0x1b6>
 800b53a:	9b07      	ldr	r3, [sp, #28]
 800b53c:	3602      	adds	r6, #2
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9207      	str	r2, [sp, #28]
 800b544:	2b00      	cmp	r3, #0
 800b546:	db2b      	blt.n	800b5a0 <_vfiprintf_r+0x1b0>
 800b548:	9309      	str	r3, [sp, #36]	; 0x24
 800b54a:	4d33      	ldr	r5, [pc, #204]	; (800b618 <_vfiprintf_r+0x228>)
 800b54c:	2203      	movs	r2, #3
 800b54e:	0028      	movs	r0, r5
 800b550:	7831      	ldrb	r1, [r6, #0]
 800b552:	f7fd fa94 	bl	8008a7e <memchr>
 800b556:	2800      	cmp	r0, #0
 800b558:	d006      	beq.n	800b568 <_vfiprintf_r+0x178>
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	1b40      	subs	r0, r0, r5
 800b55e:	4083      	lsls	r3, r0
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	3601      	adds	r6, #1
 800b564:	4313      	orrs	r3, r2
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	7831      	ldrb	r1, [r6, #0]
 800b56a:	2206      	movs	r2, #6
 800b56c:	482b      	ldr	r0, [pc, #172]	; (800b61c <_vfiprintf_r+0x22c>)
 800b56e:	1c75      	adds	r5, r6, #1
 800b570:	7621      	strb	r1, [r4, #24]
 800b572:	f7fd fa84 	bl	8008a7e <memchr>
 800b576:	2800      	cmp	r0, #0
 800b578:	d043      	beq.n	800b602 <_vfiprintf_r+0x212>
 800b57a:	4b29      	ldr	r3, [pc, #164]	; (800b620 <_vfiprintf_r+0x230>)
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d125      	bne.n	800b5cc <_vfiprintf_r+0x1dc>
 800b580:	2207      	movs	r2, #7
 800b582:	9b07      	ldr	r3, [sp, #28]
 800b584:	3307      	adds	r3, #7
 800b586:	4393      	bics	r3, r2
 800b588:	3308      	adds	r3, #8
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	6963      	ldr	r3, [r4, #20]
 800b58e:	9a04      	ldr	r2, [sp, #16]
 800b590:	189b      	adds	r3, r3, r2
 800b592:	6163      	str	r3, [r4, #20]
 800b594:	e764      	b.n	800b460 <_vfiprintf_r+0x70>
 800b596:	4343      	muls	r3, r0
 800b598:	002e      	movs	r6, r5
 800b59a:	2101      	movs	r1, #1
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	e7a6      	b.n	800b4ee <_vfiprintf_r+0xfe>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	425b      	negs	r3, r3
 800b5a4:	e7d0      	b.n	800b548 <_vfiprintf_r+0x158>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	200a      	movs	r0, #10
 800b5aa:	001a      	movs	r2, r3
 800b5ac:	3601      	adds	r6, #1
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	7831      	ldrb	r1, [r6, #0]
 800b5b2:	1c75      	adds	r5, r6, #1
 800b5b4:	3930      	subs	r1, #48	; 0x30
 800b5b6:	2909      	cmp	r1, #9
 800b5b8:	d903      	bls.n	800b5c2 <_vfiprintf_r+0x1d2>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c5      	beq.n	800b54a <_vfiprintf_r+0x15a>
 800b5be:	9209      	str	r2, [sp, #36]	; 0x24
 800b5c0:	e7c3      	b.n	800b54a <_vfiprintf_r+0x15a>
 800b5c2:	4342      	muls	r2, r0
 800b5c4:	002e      	movs	r6, r5
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	1852      	adds	r2, r2, r1
 800b5ca:	e7f1      	b.n	800b5b0 <_vfiprintf_r+0x1c0>
 800b5cc:	aa07      	add	r2, sp, #28
 800b5ce:	9200      	str	r2, [sp, #0]
 800b5d0:	0021      	movs	r1, r4
 800b5d2:	003a      	movs	r2, r7
 800b5d4:	4b13      	ldr	r3, [pc, #76]	; (800b624 <_vfiprintf_r+0x234>)
 800b5d6:	9803      	ldr	r0, [sp, #12]
 800b5d8:	f7fc fa64 	bl	8007aa4 <_printf_float>
 800b5dc:	9004      	str	r0, [sp, #16]
 800b5de:	9b04      	ldr	r3, [sp, #16]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	d1d3      	bne.n	800b58c <_vfiprintf_r+0x19c>
 800b5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5e6:	07db      	lsls	r3, r3, #31
 800b5e8:	d405      	bmi.n	800b5f6 <_vfiprintf_r+0x206>
 800b5ea:	89bb      	ldrh	r3, [r7, #12]
 800b5ec:	059b      	lsls	r3, r3, #22
 800b5ee:	d402      	bmi.n	800b5f6 <_vfiprintf_r+0x206>
 800b5f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b5f2:	f7fd fa43 	bl	8008a7c <__retarget_lock_release_recursive>
 800b5f6:	89bb      	ldrh	r3, [r7, #12]
 800b5f8:	065b      	lsls	r3, r3, #25
 800b5fa:	d500      	bpl.n	800b5fe <_vfiprintf_r+0x20e>
 800b5fc:	e71d      	b.n	800b43a <_vfiprintf_r+0x4a>
 800b5fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b600:	e71d      	b.n	800b43e <_vfiprintf_r+0x4e>
 800b602:	aa07      	add	r2, sp, #28
 800b604:	9200      	str	r2, [sp, #0]
 800b606:	0021      	movs	r1, r4
 800b608:	003a      	movs	r2, r7
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <_vfiprintf_r+0x234>)
 800b60c:	9803      	ldr	r0, [sp, #12]
 800b60e:	f7fc fd0f 	bl	8008030 <_printf_i>
 800b612:	e7e3      	b.n	800b5dc <_vfiprintf_r+0x1ec>
 800b614:	0800d381 	.word	0x0800d381
 800b618:	0800d387 	.word	0x0800d387
 800b61c:	0800d38b 	.word	0x0800d38b
 800b620:	08007aa5 	.word	0x08007aa5
 800b624:	0800b3cb 	.word	0x0800b3cb

0800b628 <__sflush_r>:
 800b628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b62a:	898b      	ldrh	r3, [r1, #12]
 800b62c:	0005      	movs	r5, r0
 800b62e:	000c      	movs	r4, r1
 800b630:	071a      	lsls	r2, r3, #28
 800b632:	d45c      	bmi.n	800b6ee <__sflush_r+0xc6>
 800b634:	684a      	ldr	r2, [r1, #4]
 800b636:	2a00      	cmp	r2, #0
 800b638:	dc04      	bgt.n	800b644 <__sflush_r+0x1c>
 800b63a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	dc01      	bgt.n	800b644 <__sflush_r+0x1c>
 800b640:	2000      	movs	r0, #0
 800b642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b644:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b646:	2f00      	cmp	r7, #0
 800b648:	d0fa      	beq.n	800b640 <__sflush_r+0x18>
 800b64a:	2200      	movs	r2, #0
 800b64c:	2080      	movs	r0, #128	; 0x80
 800b64e:	682e      	ldr	r6, [r5, #0]
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	001a      	movs	r2, r3
 800b654:	0140      	lsls	r0, r0, #5
 800b656:	6a21      	ldr	r1, [r4, #32]
 800b658:	4002      	ands	r2, r0
 800b65a:	4203      	tst	r3, r0
 800b65c:	d034      	beq.n	800b6c8 <__sflush_r+0xa0>
 800b65e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	075b      	lsls	r3, r3, #29
 800b664:	d506      	bpl.n	800b674 <__sflush_r+0x4c>
 800b666:	6863      	ldr	r3, [r4, #4]
 800b668:	1ac0      	subs	r0, r0, r3
 800b66a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <__sflush_r+0x4c>
 800b670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b672:	1ac0      	subs	r0, r0, r3
 800b674:	0002      	movs	r2, r0
 800b676:	2300      	movs	r3, #0
 800b678:	0028      	movs	r0, r5
 800b67a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b67c:	6a21      	ldr	r1, [r4, #32]
 800b67e:	47b8      	blx	r7
 800b680:	89a2      	ldrh	r2, [r4, #12]
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d106      	bne.n	800b694 <__sflush_r+0x6c>
 800b686:	6829      	ldr	r1, [r5, #0]
 800b688:	291d      	cmp	r1, #29
 800b68a:	d82c      	bhi.n	800b6e6 <__sflush_r+0xbe>
 800b68c:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <__sflush_r+0x110>)
 800b68e:	410b      	asrs	r3, r1
 800b690:	07db      	lsls	r3, r3, #31
 800b692:	d428      	bmi.n	800b6e6 <__sflush_r+0xbe>
 800b694:	2300      	movs	r3, #0
 800b696:	6063      	str	r3, [r4, #4]
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	04d2      	lsls	r2, r2, #19
 800b69e:	d505      	bpl.n	800b6ac <__sflush_r+0x84>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <__sflush_r+0x82>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d100      	bne.n	800b6ac <__sflush_r+0x84>
 800b6aa:	6560      	str	r0, [r4, #84]	; 0x54
 800b6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ae:	602e      	str	r6, [r5, #0]
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d0c5      	beq.n	800b640 <__sflush_r+0x18>
 800b6b4:	0023      	movs	r3, r4
 800b6b6:	3344      	adds	r3, #68	; 0x44
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	d002      	beq.n	800b6c2 <__sflush_r+0x9a>
 800b6bc:	0028      	movs	r0, r5
 800b6be:	f7fe f895 	bl	80097ec <_free_r>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b6c6:	e7bc      	b.n	800b642 <__sflush_r+0x1a>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	0028      	movs	r0, r5
 800b6cc:	47b8      	blx	r7
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d1c6      	bne.n	800b660 <__sflush_r+0x38>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0c3      	beq.n	800b660 <__sflush_r+0x38>
 800b6d8:	2b1d      	cmp	r3, #29
 800b6da:	d001      	beq.n	800b6e0 <__sflush_r+0xb8>
 800b6dc:	2b16      	cmp	r3, #22
 800b6de:	d101      	bne.n	800b6e4 <__sflush_r+0xbc>
 800b6e0:	602e      	str	r6, [r5, #0]
 800b6e2:	e7ad      	b.n	800b640 <__sflush_r+0x18>
 800b6e4:	89a2      	ldrh	r2, [r4, #12]
 800b6e6:	2340      	movs	r3, #64	; 0x40
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	e7a9      	b.n	800b642 <__sflush_r+0x1a>
 800b6ee:	690e      	ldr	r6, [r1, #16]
 800b6f0:	2e00      	cmp	r6, #0
 800b6f2:	d0a5      	beq.n	800b640 <__sflush_r+0x18>
 800b6f4:	680f      	ldr	r7, [r1, #0]
 800b6f6:	600e      	str	r6, [r1, #0]
 800b6f8:	1bba      	subs	r2, r7, r6
 800b6fa:	9201      	str	r2, [sp, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	079b      	lsls	r3, r3, #30
 800b700:	d100      	bne.n	800b704 <__sflush_r+0xdc>
 800b702:	694a      	ldr	r2, [r1, #20]
 800b704:	60a2      	str	r2, [r4, #8]
 800b706:	9b01      	ldr	r3, [sp, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	dd99      	ble.n	800b640 <__sflush_r+0x18>
 800b70c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b70e:	0032      	movs	r2, r6
 800b710:	001f      	movs	r7, r3
 800b712:	0028      	movs	r0, r5
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	6a21      	ldr	r1, [r4, #32]
 800b718:	47b8      	blx	r7
 800b71a:	2800      	cmp	r0, #0
 800b71c:	dc06      	bgt.n	800b72c <__sflush_r+0x104>
 800b71e:	2340      	movs	r3, #64	; 0x40
 800b720:	2001      	movs	r0, #1
 800b722:	89a2      	ldrh	r2, [r4, #12]
 800b724:	4240      	negs	r0, r0
 800b726:	4313      	orrs	r3, r2
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	e78a      	b.n	800b642 <__sflush_r+0x1a>
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	1836      	adds	r6, r6, r0
 800b730:	1a1b      	subs	r3, r3, r0
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	e7e7      	b.n	800b706 <__sflush_r+0xde>
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	dfbffffe 	.word	0xdfbffffe

0800b73c <_fflush_r>:
 800b73c:	690b      	ldr	r3, [r1, #16]
 800b73e:	b570      	push	{r4, r5, r6, lr}
 800b740:	0005      	movs	r5, r0
 800b742:	000c      	movs	r4, r1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <_fflush_r+0x12>
 800b748:	2500      	movs	r5, #0
 800b74a:	0028      	movs	r0, r5
 800b74c:	bd70      	pop	{r4, r5, r6, pc}
 800b74e:	2800      	cmp	r0, #0
 800b750:	d004      	beq.n	800b75c <_fflush_r+0x20>
 800b752:	6a03      	ldr	r3, [r0, #32]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <_fflush_r+0x20>
 800b758:	f7fd f812 	bl	8008780 <__sinit>
 800b75c:	220c      	movs	r2, #12
 800b75e:	5ea3      	ldrsh	r3, [r4, r2]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d0f1      	beq.n	800b748 <_fflush_r+0xc>
 800b764:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b766:	07d2      	lsls	r2, r2, #31
 800b768:	d404      	bmi.n	800b774 <_fflush_r+0x38>
 800b76a:	059b      	lsls	r3, r3, #22
 800b76c:	d402      	bmi.n	800b774 <_fflush_r+0x38>
 800b76e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b770:	f7fd f983 	bl	8008a7a <__retarget_lock_acquire_recursive>
 800b774:	0028      	movs	r0, r5
 800b776:	0021      	movs	r1, r4
 800b778:	f7ff ff56 	bl	800b628 <__sflush_r>
 800b77c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b77e:	0005      	movs	r5, r0
 800b780:	07db      	lsls	r3, r3, #31
 800b782:	d4e2      	bmi.n	800b74a <_fflush_r+0xe>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	059b      	lsls	r3, r3, #22
 800b788:	d4df      	bmi.n	800b74a <_fflush_r+0xe>
 800b78a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b78c:	f7fd f976 	bl	8008a7c <__retarget_lock_release_recursive>
 800b790:	e7db      	b.n	800b74a <_fflush_r+0xe>

0800b792 <__swbuf_r>:
 800b792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b794:	0006      	movs	r6, r0
 800b796:	000d      	movs	r5, r1
 800b798:	0014      	movs	r4, r2
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d004      	beq.n	800b7a8 <__swbuf_r+0x16>
 800b79e:	6a03      	ldr	r3, [r0, #32]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <__swbuf_r+0x16>
 800b7a4:	f7fc ffec 	bl	8008780 <__sinit>
 800b7a8:	69a3      	ldr	r3, [r4, #24]
 800b7aa:	60a3      	str	r3, [r4, #8]
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	071b      	lsls	r3, r3, #28
 800b7b0:	d528      	bpl.n	800b804 <__swbuf_r+0x72>
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d025      	beq.n	800b804 <__swbuf_r+0x72>
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	6820      	ldr	r0, [r4, #0]
 800b7bc:	b2ef      	uxtb	r7, r5
 800b7be:	1ac0      	subs	r0, r0, r3
 800b7c0:	6963      	ldr	r3, [r4, #20]
 800b7c2:	b2ed      	uxtb	r5, r5
 800b7c4:	4283      	cmp	r3, r0
 800b7c6:	dc05      	bgt.n	800b7d4 <__swbuf_r+0x42>
 800b7c8:	0021      	movs	r1, r4
 800b7ca:	0030      	movs	r0, r6
 800b7cc:	f7ff ffb6 	bl	800b73c <_fflush_r>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d11d      	bne.n	800b810 <__swbuf_r+0x7e>
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	60a3      	str	r3, [r4, #8]
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	6022      	str	r2, [r4, #0]
 800b7e2:	701f      	strb	r7, [r3, #0]
 800b7e4:	6963      	ldr	r3, [r4, #20]
 800b7e6:	4283      	cmp	r3, r0
 800b7e8:	d004      	beq.n	800b7f4 <__swbuf_r+0x62>
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	07db      	lsls	r3, r3, #31
 800b7ee:	d507      	bpl.n	800b800 <__swbuf_r+0x6e>
 800b7f0:	2d0a      	cmp	r5, #10
 800b7f2:	d105      	bne.n	800b800 <__swbuf_r+0x6e>
 800b7f4:	0021      	movs	r1, r4
 800b7f6:	0030      	movs	r0, r6
 800b7f8:	f7ff ffa0 	bl	800b73c <_fflush_r>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d107      	bne.n	800b810 <__swbuf_r+0x7e>
 800b800:	0028      	movs	r0, r5
 800b802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b804:	0021      	movs	r1, r4
 800b806:	0030      	movs	r0, r6
 800b808:	f000 f806 	bl	800b818 <__swsetup_r>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d0d3      	beq.n	800b7b8 <__swbuf_r+0x26>
 800b810:	2501      	movs	r5, #1
 800b812:	426d      	negs	r5, r5
 800b814:	e7f4      	b.n	800b800 <__swbuf_r+0x6e>
	...

0800b818 <__swsetup_r>:
 800b818:	4b30      	ldr	r3, [pc, #192]	; (800b8dc <__swsetup_r+0xc4>)
 800b81a:	b570      	push	{r4, r5, r6, lr}
 800b81c:	0005      	movs	r5, r0
 800b81e:	6818      	ldr	r0, [r3, #0]
 800b820:	000c      	movs	r4, r1
 800b822:	2800      	cmp	r0, #0
 800b824:	d004      	beq.n	800b830 <__swsetup_r+0x18>
 800b826:	6a03      	ldr	r3, [r0, #32]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <__swsetup_r+0x18>
 800b82c:	f7fc ffa8 	bl	8008780 <__sinit>
 800b830:	230c      	movs	r3, #12
 800b832:	5ee2      	ldrsh	r2, [r4, r3]
 800b834:	b293      	uxth	r3, r2
 800b836:	0711      	lsls	r1, r2, #28
 800b838:	d423      	bmi.n	800b882 <__swsetup_r+0x6a>
 800b83a:	06d9      	lsls	r1, r3, #27
 800b83c:	d407      	bmi.n	800b84e <__swsetup_r+0x36>
 800b83e:	2309      	movs	r3, #9
 800b840:	2001      	movs	r0, #1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	3337      	adds	r3, #55	; 0x37
 800b846:	4313      	orrs	r3, r2
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	4240      	negs	r0, r0
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	075b      	lsls	r3, r3, #29
 800b850:	d513      	bpl.n	800b87a <__swsetup_r+0x62>
 800b852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b854:	2900      	cmp	r1, #0
 800b856:	d008      	beq.n	800b86a <__swsetup_r+0x52>
 800b858:	0023      	movs	r3, r4
 800b85a:	3344      	adds	r3, #68	; 0x44
 800b85c:	4299      	cmp	r1, r3
 800b85e:	d002      	beq.n	800b866 <__swsetup_r+0x4e>
 800b860:	0028      	movs	r0, r5
 800b862:	f7fd ffc3 	bl	80097ec <_free_r>
 800b866:	2300      	movs	r3, #0
 800b868:	6363      	str	r3, [r4, #52]	; 0x34
 800b86a:	2224      	movs	r2, #36	; 0x24
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	4393      	bics	r3, r2
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	2300      	movs	r3, #0
 800b874:	6063      	str	r3, [r4, #4]
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	2308      	movs	r3, #8
 800b87c:	89a2      	ldrh	r2, [r4, #12]
 800b87e:	4313      	orrs	r3, r2
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10b      	bne.n	800b8a0 <__swsetup_r+0x88>
 800b888:	21a0      	movs	r1, #160	; 0xa0
 800b88a:	2280      	movs	r2, #128	; 0x80
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	0089      	lsls	r1, r1, #2
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	400b      	ands	r3, r1
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <__swsetup_r+0x88>
 800b898:	0021      	movs	r1, r4
 800b89a:	0028      	movs	r0, r5
 800b89c:	f000 fc78 	bl	800c190 <__smakebuf_r>
 800b8a0:	220c      	movs	r2, #12
 800b8a2:	5ea3      	ldrsh	r3, [r4, r2]
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	001a      	movs	r2, r3
 800b8a8:	b299      	uxth	r1, r3
 800b8aa:	4002      	ands	r2, r0
 800b8ac:	4203      	tst	r3, r0
 800b8ae:	d00f      	beq.n	800b8d0 <__swsetup_r+0xb8>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	60a2      	str	r2, [r4, #8]
 800b8b4:	6962      	ldr	r2, [r4, #20]
 800b8b6:	4252      	negs	r2, r2
 800b8b8:	61a2      	str	r2, [r4, #24]
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	6922      	ldr	r2, [r4, #16]
 800b8be:	4282      	cmp	r2, r0
 800b8c0:	d1c4      	bne.n	800b84c <__swsetup_r+0x34>
 800b8c2:	0609      	lsls	r1, r1, #24
 800b8c4:	d5c2      	bpl.n	800b84c <__swsetup_r+0x34>
 800b8c6:	2240      	movs	r2, #64	; 0x40
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	3801      	subs	r0, #1
 800b8ce:	e7bd      	b.n	800b84c <__swsetup_r+0x34>
 800b8d0:	0788      	lsls	r0, r1, #30
 800b8d2:	d400      	bmi.n	800b8d6 <__swsetup_r+0xbe>
 800b8d4:	6962      	ldr	r2, [r4, #20]
 800b8d6:	60a2      	str	r2, [r4, #8]
 800b8d8:	e7ef      	b.n	800b8ba <__swsetup_r+0xa2>
 800b8da:	46c0      	nop			; (mov r8, r8)
 800b8dc:	20000068 	.word	0x20000068

0800b8e0 <strncmp>:
 800b8e0:	b530      	push	{r4, r5, lr}
 800b8e2:	0005      	movs	r5, r0
 800b8e4:	1e10      	subs	r0, r2, #0
 800b8e6:	d00b      	beq.n	800b900 <strncmp+0x20>
 800b8e8:	2400      	movs	r4, #0
 800b8ea:	3a01      	subs	r2, #1
 800b8ec:	5d2b      	ldrb	r3, [r5, r4]
 800b8ee:	5d08      	ldrb	r0, [r1, r4]
 800b8f0:	4283      	cmp	r3, r0
 800b8f2:	d104      	bne.n	800b8fe <strncmp+0x1e>
 800b8f4:	42a2      	cmp	r2, r4
 800b8f6:	d002      	beq.n	800b8fe <strncmp+0x1e>
 800b8f8:	3401      	adds	r4, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1f6      	bne.n	800b8ec <strncmp+0xc>
 800b8fe:	1a18      	subs	r0, r3, r0
 800b900:	bd30      	pop	{r4, r5, pc}
	...

0800b904 <_sbrk_r>:
 800b904:	2300      	movs	r3, #0
 800b906:	b570      	push	{r4, r5, r6, lr}
 800b908:	4d06      	ldr	r5, [pc, #24]	; (800b924 <_sbrk_r+0x20>)
 800b90a:	0004      	movs	r4, r0
 800b90c:	0008      	movs	r0, r1
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	f7f8 fb26 	bl	8003f60 <_sbrk>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d103      	bne.n	800b920 <_sbrk_r+0x1c>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d000      	beq.n	800b920 <_sbrk_r+0x1c>
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	20000768 	.word	0x20000768

0800b928 <nan>:
 800b928:	2000      	movs	r0, #0
 800b92a:	4901      	ldr	r1, [pc, #4]	; (800b930 <nan+0x8>)
 800b92c:	4770      	bx	lr
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	7ff80000 	.word	0x7ff80000

0800b934 <__assert_func>:
 800b934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b936:	0014      	movs	r4, r2
 800b938:	001a      	movs	r2, r3
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <__assert_func+0x2c>)
 800b93c:	0005      	movs	r5, r0
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	000e      	movs	r6, r1
 800b942:	68d8      	ldr	r0, [r3, #12]
 800b944:	4b07      	ldr	r3, [pc, #28]	; (800b964 <__assert_func+0x30>)
 800b946:	2c00      	cmp	r4, #0
 800b948:	d101      	bne.n	800b94e <__assert_func+0x1a>
 800b94a:	4b07      	ldr	r3, [pc, #28]	; (800b968 <__assert_func+0x34>)
 800b94c:	001c      	movs	r4, r3
 800b94e:	4907      	ldr	r1, [pc, #28]	; (800b96c <__assert_func+0x38>)
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	9402      	str	r4, [sp, #8]
 800b954:	002b      	movs	r3, r5
 800b956:	9600      	str	r6, [sp, #0]
 800b958:	f000 fbe2 	bl	800c120 <fiprintf>
 800b95c:	f000 fc7a 	bl	800c254 <abort>
 800b960:	20000068 	.word	0x20000068
 800b964:	0800d39a 	.word	0x0800d39a
 800b968:	0800d3d5 	.word	0x0800d3d5
 800b96c:	0800d3a7 	.word	0x0800d3a7

0800b970 <_calloc_r>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	0c0b      	lsrs	r3, r1, #16
 800b974:	0c15      	lsrs	r5, r2, #16
 800b976:	2b00      	cmp	r3, #0
 800b978:	d11e      	bne.n	800b9b8 <_calloc_r+0x48>
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	d10c      	bne.n	800b998 <_calloc_r+0x28>
 800b97e:	b289      	uxth	r1, r1
 800b980:	b294      	uxth	r4, r2
 800b982:	434c      	muls	r4, r1
 800b984:	0021      	movs	r1, r4
 800b986:	f7fd ffa7 	bl	80098d8 <_malloc_r>
 800b98a:	1e05      	subs	r5, r0, #0
 800b98c:	d01b      	beq.n	800b9c6 <_calloc_r+0x56>
 800b98e:	0022      	movs	r2, r4
 800b990:	2100      	movs	r1, #0
 800b992:	f7fc ffec 	bl	800896e <memset>
 800b996:	e016      	b.n	800b9c6 <_calloc_r+0x56>
 800b998:	1c2b      	adds	r3, r5, #0
 800b99a:	1c0c      	adds	r4, r1, #0
 800b99c:	b289      	uxth	r1, r1
 800b99e:	b292      	uxth	r2, r2
 800b9a0:	434a      	muls	r2, r1
 800b9a2:	b2a1      	uxth	r1, r4
 800b9a4:	b29c      	uxth	r4, r3
 800b9a6:	434c      	muls	r4, r1
 800b9a8:	0c13      	lsrs	r3, r2, #16
 800b9aa:	18e4      	adds	r4, r4, r3
 800b9ac:	0c23      	lsrs	r3, r4, #16
 800b9ae:	d107      	bne.n	800b9c0 <_calloc_r+0x50>
 800b9b0:	0424      	lsls	r4, r4, #16
 800b9b2:	b292      	uxth	r2, r2
 800b9b4:	4314      	orrs	r4, r2
 800b9b6:	e7e5      	b.n	800b984 <_calloc_r+0x14>
 800b9b8:	2d00      	cmp	r5, #0
 800b9ba:	d101      	bne.n	800b9c0 <_calloc_r+0x50>
 800b9bc:	1c14      	adds	r4, r2, #0
 800b9be:	e7ed      	b.n	800b99c <_calloc_r+0x2c>
 800b9c0:	230c      	movs	r3, #12
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	6003      	str	r3, [r0, #0]
 800b9c6:	0028      	movs	r0, r5
 800b9c8:	bd70      	pop	{r4, r5, r6, pc}

0800b9ca <rshift>:
 800b9ca:	0002      	movs	r2, r0
 800b9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ce:	6904      	ldr	r4, [r0, #16]
 800b9d0:	114b      	asrs	r3, r1, #5
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	3214      	adds	r2, #20
 800b9d6:	9302      	str	r3, [sp, #8]
 800b9d8:	114d      	asrs	r5, r1, #5
 800b9da:	0013      	movs	r3, r2
 800b9dc:	42ac      	cmp	r4, r5
 800b9de:	dd32      	ble.n	800ba46 <rshift+0x7c>
 800b9e0:	261f      	movs	r6, #31
 800b9e2:	000f      	movs	r7, r1
 800b9e4:	114b      	asrs	r3, r1, #5
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	00a5      	lsls	r5, r4, #2
 800b9ea:	18d3      	adds	r3, r2, r3
 800b9ec:	4037      	ands	r7, r6
 800b9ee:	1955      	adds	r5, r2, r5
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	9701      	str	r7, [sp, #4]
 800b9f4:	4231      	tst	r1, r6
 800b9f6:	d10d      	bne.n	800ba14 <rshift+0x4a>
 800b9f8:	0016      	movs	r6, r2
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	428d      	cmp	r5, r1
 800b9fe:	d836      	bhi.n	800ba6e <rshift+0xa4>
 800ba00:	9900      	ldr	r1, [sp, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	3903      	subs	r1, #3
 800ba06:	428d      	cmp	r5, r1
 800ba08:	d302      	bcc.n	800ba10 <rshift+0x46>
 800ba0a:	9b02      	ldr	r3, [sp, #8]
 800ba0c:	1ae4      	subs	r4, r4, r3
 800ba0e:	00a3      	lsls	r3, r4, #2
 800ba10:	18d3      	adds	r3, r2, r3
 800ba12:	e018      	b.n	800ba46 <rshift+0x7c>
 800ba14:	2120      	movs	r1, #32
 800ba16:	9e01      	ldr	r6, [sp, #4]
 800ba18:	9f01      	ldr	r7, [sp, #4]
 800ba1a:	1b89      	subs	r1, r1, r6
 800ba1c:	9e00      	ldr	r6, [sp, #0]
 800ba1e:	9103      	str	r1, [sp, #12]
 800ba20:	ce02      	ldmia	r6!, {r1}
 800ba22:	4694      	mov	ip, r2
 800ba24:	40f9      	lsrs	r1, r7
 800ba26:	42b5      	cmp	r5, r6
 800ba28:	d816      	bhi.n	800ba58 <rshift+0x8e>
 800ba2a:	9e00      	ldr	r6, [sp, #0]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	3601      	adds	r6, #1
 800ba30:	42b5      	cmp	r5, r6
 800ba32:	d303      	bcc.n	800ba3c <rshift+0x72>
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	1ae3      	subs	r3, r4, r3
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	3b04      	subs	r3, #4
 800ba3c:	18d3      	adds	r3, r2, r3
 800ba3e:	6019      	str	r1, [r3, #0]
 800ba40:	2900      	cmp	r1, #0
 800ba42:	d000      	beq.n	800ba46 <rshift+0x7c>
 800ba44:	3304      	adds	r3, #4
 800ba46:	1a99      	subs	r1, r3, r2
 800ba48:	1089      	asrs	r1, r1, #2
 800ba4a:	6101      	str	r1, [r0, #16]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d101      	bne.n	800ba54 <rshift+0x8a>
 800ba50:	2300      	movs	r3, #0
 800ba52:	6143      	str	r3, [r0, #20]
 800ba54:	b005      	add	sp, #20
 800ba56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba58:	6837      	ldr	r7, [r6, #0]
 800ba5a:	9b03      	ldr	r3, [sp, #12]
 800ba5c:	409f      	lsls	r7, r3
 800ba5e:	430f      	orrs	r7, r1
 800ba60:	4661      	mov	r1, ip
 800ba62:	c180      	stmia	r1!, {r7}
 800ba64:	468c      	mov	ip, r1
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	ce02      	ldmia	r6!, {r1}
 800ba6a:	40d9      	lsrs	r1, r3
 800ba6c:	e7db      	b.n	800ba26 <rshift+0x5c>
 800ba6e:	c980      	ldmia	r1!, {r7}
 800ba70:	c680      	stmia	r6!, {r7}
 800ba72:	e7c3      	b.n	800b9fc <rshift+0x32>

0800ba74 <__hexdig_fun>:
 800ba74:	0002      	movs	r2, r0
 800ba76:	3a30      	subs	r2, #48	; 0x30
 800ba78:	0003      	movs	r3, r0
 800ba7a:	2a09      	cmp	r2, #9
 800ba7c:	d802      	bhi.n	800ba84 <__hexdig_fun+0x10>
 800ba7e:	3b20      	subs	r3, #32
 800ba80:	b2d8      	uxtb	r0, r3
 800ba82:	4770      	bx	lr
 800ba84:	0002      	movs	r2, r0
 800ba86:	3a61      	subs	r2, #97	; 0x61
 800ba88:	2a05      	cmp	r2, #5
 800ba8a:	d801      	bhi.n	800ba90 <__hexdig_fun+0x1c>
 800ba8c:	3b47      	subs	r3, #71	; 0x47
 800ba8e:	e7f7      	b.n	800ba80 <__hexdig_fun+0xc>
 800ba90:	001a      	movs	r2, r3
 800ba92:	3a41      	subs	r2, #65	; 0x41
 800ba94:	2000      	movs	r0, #0
 800ba96:	2a05      	cmp	r2, #5
 800ba98:	d8f3      	bhi.n	800ba82 <__hexdig_fun+0xe>
 800ba9a:	3b27      	subs	r3, #39	; 0x27
 800ba9c:	e7f0      	b.n	800ba80 <__hexdig_fun+0xc>
	...

0800baa0 <__gethex>:
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	b089      	sub	sp, #36	; 0x24
 800baa4:	9307      	str	r3, [sp, #28]
 800baa6:	2302      	movs	r3, #2
 800baa8:	9201      	str	r2, [sp, #4]
 800baaa:	680a      	ldr	r2, [r1, #0]
 800baac:	425b      	negs	r3, r3
 800baae:	9003      	str	r0, [sp, #12]
 800bab0:	9106      	str	r1, [sp, #24]
 800bab2:	1c96      	adds	r6, r2, #2
 800bab4:	1a9b      	subs	r3, r3, r2
 800bab6:	199a      	adds	r2, r3, r6
 800bab8:	9600      	str	r6, [sp, #0]
 800baba:	9205      	str	r2, [sp, #20]
 800babc:	9a00      	ldr	r2, [sp, #0]
 800babe:	3601      	adds	r6, #1
 800bac0:	7810      	ldrb	r0, [r2, #0]
 800bac2:	2830      	cmp	r0, #48	; 0x30
 800bac4:	d0f7      	beq.n	800bab6 <__gethex+0x16>
 800bac6:	f7ff ffd5 	bl	800ba74 <__hexdig_fun>
 800baca:	2300      	movs	r3, #0
 800bacc:	001d      	movs	r5, r3
 800bace:	9302      	str	r3, [sp, #8]
 800bad0:	4298      	cmp	r0, r3
 800bad2:	d11d      	bne.n	800bb10 <__gethex+0x70>
 800bad4:	2201      	movs	r2, #1
 800bad6:	49a6      	ldr	r1, [pc, #664]	; (800bd70 <__gethex+0x2d0>)
 800bad8:	9800      	ldr	r0, [sp, #0]
 800bada:	f7ff ff01 	bl	800b8e0 <strncmp>
 800bade:	0007      	movs	r7, r0
 800bae0:	42a8      	cmp	r0, r5
 800bae2:	d169      	bne.n	800bbb8 <__gethex+0x118>
 800bae4:	9b00      	ldr	r3, [sp, #0]
 800bae6:	0034      	movs	r4, r6
 800bae8:	7858      	ldrb	r0, [r3, #1]
 800baea:	f7ff ffc3 	bl	800ba74 <__hexdig_fun>
 800baee:	2301      	movs	r3, #1
 800baf0:	9302      	str	r3, [sp, #8]
 800baf2:	42a8      	cmp	r0, r5
 800baf4:	d02f      	beq.n	800bb56 <__gethex+0xb6>
 800baf6:	9600      	str	r6, [sp, #0]
 800baf8:	9b00      	ldr	r3, [sp, #0]
 800bafa:	7818      	ldrb	r0, [r3, #0]
 800bafc:	2830      	cmp	r0, #48	; 0x30
 800bafe:	d009      	beq.n	800bb14 <__gethex+0x74>
 800bb00:	f7ff ffb8 	bl	800ba74 <__hexdig_fun>
 800bb04:	4242      	negs	r2, r0
 800bb06:	4142      	adcs	r2, r0
 800bb08:	2301      	movs	r3, #1
 800bb0a:	0035      	movs	r5, r6
 800bb0c:	9202      	str	r2, [sp, #8]
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	9c00      	ldr	r4, [sp, #0]
 800bb12:	e004      	b.n	800bb1e <__gethex+0x7e>
 800bb14:	9b00      	ldr	r3, [sp, #0]
 800bb16:	3301      	adds	r3, #1
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	e7ed      	b.n	800baf8 <__gethex+0x58>
 800bb1c:	3401      	adds	r4, #1
 800bb1e:	7820      	ldrb	r0, [r4, #0]
 800bb20:	f7ff ffa8 	bl	800ba74 <__hexdig_fun>
 800bb24:	1e07      	subs	r7, r0, #0
 800bb26:	d1f9      	bne.n	800bb1c <__gethex+0x7c>
 800bb28:	2201      	movs	r2, #1
 800bb2a:	0020      	movs	r0, r4
 800bb2c:	4990      	ldr	r1, [pc, #576]	; (800bd70 <__gethex+0x2d0>)
 800bb2e:	f7ff fed7 	bl	800b8e0 <strncmp>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d10d      	bne.n	800bb52 <__gethex+0xb2>
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	d106      	bne.n	800bb48 <__gethex+0xa8>
 800bb3a:	3401      	adds	r4, #1
 800bb3c:	0025      	movs	r5, r4
 800bb3e:	7820      	ldrb	r0, [r4, #0]
 800bb40:	f7ff ff98 	bl	800ba74 <__hexdig_fun>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d102      	bne.n	800bb4e <__gethex+0xae>
 800bb48:	1b2d      	subs	r5, r5, r4
 800bb4a:	00af      	lsls	r7, r5, #2
 800bb4c:	e003      	b.n	800bb56 <__gethex+0xb6>
 800bb4e:	3401      	adds	r4, #1
 800bb50:	e7f5      	b.n	800bb3e <__gethex+0x9e>
 800bb52:	2d00      	cmp	r5, #0
 800bb54:	d1f8      	bne.n	800bb48 <__gethex+0xa8>
 800bb56:	2220      	movs	r2, #32
 800bb58:	7823      	ldrb	r3, [r4, #0]
 800bb5a:	0026      	movs	r6, r4
 800bb5c:	4393      	bics	r3, r2
 800bb5e:	2b50      	cmp	r3, #80	; 0x50
 800bb60:	d11d      	bne.n	800bb9e <__gethex+0xfe>
 800bb62:	7863      	ldrb	r3, [r4, #1]
 800bb64:	2b2b      	cmp	r3, #43	; 0x2b
 800bb66:	d02c      	beq.n	800bbc2 <__gethex+0x122>
 800bb68:	2b2d      	cmp	r3, #45	; 0x2d
 800bb6a:	d02e      	beq.n	800bbca <__gethex+0x12a>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	1c66      	adds	r6, r4, #1
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	7830      	ldrb	r0, [r6, #0]
 800bb74:	f7ff ff7e 	bl	800ba74 <__hexdig_fun>
 800bb78:	1e43      	subs	r3, r0, #1
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b18      	cmp	r3, #24
 800bb7e:	d82b      	bhi.n	800bbd8 <__gethex+0x138>
 800bb80:	3810      	subs	r0, #16
 800bb82:	0005      	movs	r5, r0
 800bb84:	7870      	ldrb	r0, [r6, #1]
 800bb86:	f7ff ff75 	bl	800ba74 <__hexdig_fun>
 800bb8a:	1e43      	subs	r3, r0, #1
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	3601      	adds	r6, #1
 800bb90:	2b18      	cmp	r3, #24
 800bb92:	d91c      	bls.n	800bbce <__gethex+0x12e>
 800bb94:	9b04      	ldr	r3, [sp, #16]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d000      	beq.n	800bb9c <__gethex+0xfc>
 800bb9a:	426d      	negs	r5, r5
 800bb9c:	197f      	adds	r7, r7, r5
 800bb9e:	9b06      	ldr	r3, [sp, #24]
 800bba0:	601e      	str	r6, [r3, #0]
 800bba2:	9b02      	ldr	r3, [sp, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d019      	beq.n	800bbdc <__gethex+0x13c>
 800bba8:	2600      	movs	r6, #0
 800bbaa:	9b05      	ldr	r3, [sp, #20]
 800bbac:	42b3      	cmp	r3, r6
 800bbae:	d100      	bne.n	800bbb2 <__gethex+0x112>
 800bbb0:	3606      	adds	r6, #6
 800bbb2:	0030      	movs	r0, r6
 800bbb4:	b009      	add	sp, #36	; 0x24
 800bbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb8:	2301      	movs	r3, #1
 800bbba:	2700      	movs	r7, #0
 800bbbc:	9c00      	ldr	r4, [sp, #0]
 800bbbe:	9302      	str	r3, [sp, #8]
 800bbc0:	e7c9      	b.n	800bb56 <__gethex+0xb6>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	1ca6      	adds	r6, r4, #2
 800bbc8:	e7d3      	b.n	800bb72 <__gethex+0xd2>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e7fa      	b.n	800bbc4 <__gethex+0x124>
 800bbce:	230a      	movs	r3, #10
 800bbd0:	435d      	muls	r5, r3
 800bbd2:	182d      	adds	r5, r5, r0
 800bbd4:	3d10      	subs	r5, #16
 800bbd6:	e7d5      	b.n	800bb84 <__gethex+0xe4>
 800bbd8:	0026      	movs	r6, r4
 800bbda:	e7e0      	b.n	800bb9e <__gethex+0xfe>
 800bbdc:	9b00      	ldr	r3, [sp, #0]
 800bbde:	9902      	ldr	r1, [sp, #8]
 800bbe0:	1ae3      	subs	r3, r4, r3
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	2b07      	cmp	r3, #7
 800bbe6:	dc0a      	bgt.n	800bbfe <__gethex+0x15e>
 800bbe8:	9803      	ldr	r0, [sp, #12]
 800bbea:	f7fd ff07 	bl	80099fc <_Balloc>
 800bbee:	1e05      	subs	r5, r0, #0
 800bbf0:	d108      	bne.n	800bc04 <__gethex+0x164>
 800bbf2:	002a      	movs	r2, r5
 800bbf4:	21e4      	movs	r1, #228	; 0xe4
 800bbf6:	4b5f      	ldr	r3, [pc, #380]	; (800bd74 <__gethex+0x2d4>)
 800bbf8:	485f      	ldr	r0, [pc, #380]	; (800bd78 <__gethex+0x2d8>)
 800bbfa:	f7ff fe9b 	bl	800b934 <__assert_func>
 800bbfe:	3101      	adds	r1, #1
 800bc00:	105b      	asrs	r3, r3, #1
 800bc02:	e7ef      	b.n	800bbe4 <__gethex+0x144>
 800bc04:	0003      	movs	r3, r0
 800bc06:	3314      	adds	r3, #20
 800bc08:	9302      	str	r3, [sp, #8]
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	001e      	movs	r6, r3
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	9b00      	ldr	r3, [sp, #0]
 800bc14:	42a3      	cmp	r3, r4
 800bc16:	d33f      	bcc.n	800bc98 <__gethex+0x1f8>
 800bc18:	9c05      	ldr	r4, [sp, #20]
 800bc1a:	9b02      	ldr	r3, [sp, #8]
 800bc1c:	c440      	stmia	r4!, {r6}
 800bc1e:	1ae4      	subs	r4, r4, r3
 800bc20:	10a4      	asrs	r4, r4, #2
 800bc22:	0030      	movs	r0, r6
 800bc24:	612c      	str	r4, [r5, #16]
 800bc26:	f7fd ffe1 	bl	8009bec <__hi0bits>
 800bc2a:	9b01      	ldr	r3, [sp, #4]
 800bc2c:	0164      	lsls	r4, r4, #5
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	1a26      	subs	r6, r4, r0
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	429e      	cmp	r6, r3
 800bc36:	dd51      	ble.n	800bcdc <__gethex+0x23c>
 800bc38:	1af6      	subs	r6, r6, r3
 800bc3a:	0031      	movs	r1, r6
 800bc3c:	0028      	movs	r0, r5
 800bc3e:	f7fe fb75 	bl	800a32c <__any_on>
 800bc42:	1e04      	subs	r4, r0, #0
 800bc44:	d016      	beq.n	800bc74 <__gethex+0x1d4>
 800bc46:	2401      	movs	r4, #1
 800bc48:	231f      	movs	r3, #31
 800bc4a:	0020      	movs	r0, r4
 800bc4c:	1e72      	subs	r2, r6, #1
 800bc4e:	4013      	ands	r3, r2
 800bc50:	4098      	lsls	r0, r3
 800bc52:	0003      	movs	r3, r0
 800bc54:	1151      	asrs	r1, r2, #5
 800bc56:	9802      	ldr	r0, [sp, #8]
 800bc58:	0089      	lsls	r1, r1, #2
 800bc5a:	5809      	ldr	r1, [r1, r0]
 800bc5c:	4219      	tst	r1, r3
 800bc5e:	d009      	beq.n	800bc74 <__gethex+0x1d4>
 800bc60:	42a2      	cmp	r2, r4
 800bc62:	dd06      	ble.n	800bc72 <__gethex+0x1d2>
 800bc64:	0028      	movs	r0, r5
 800bc66:	1eb1      	subs	r1, r6, #2
 800bc68:	f7fe fb60 	bl	800a32c <__any_on>
 800bc6c:	3402      	adds	r4, #2
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d100      	bne.n	800bc74 <__gethex+0x1d4>
 800bc72:	2402      	movs	r4, #2
 800bc74:	0031      	movs	r1, r6
 800bc76:	0028      	movs	r0, r5
 800bc78:	f7ff fea7 	bl	800b9ca <rshift>
 800bc7c:	19bf      	adds	r7, r7, r6
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	42bb      	cmp	r3, r7
 800bc84:	da3a      	bge.n	800bcfc <__gethex+0x25c>
 800bc86:	0029      	movs	r1, r5
 800bc88:	9803      	ldr	r0, [sp, #12]
 800bc8a:	f7fd fefb 	bl	8009a84 <_Bfree>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc92:	26a3      	movs	r6, #163	; 0xa3
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	e78c      	b.n	800bbb2 <__gethex+0x112>
 800bc98:	3c01      	subs	r4, #1
 800bc9a:	7823      	ldrb	r3, [r4, #0]
 800bc9c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc9e:	d012      	beq.n	800bcc6 <__gethex+0x226>
 800bca0:	9b04      	ldr	r3, [sp, #16]
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	d104      	bne.n	800bcb0 <__gethex+0x210>
 800bca6:	9b05      	ldr	r3, [sp, #20]
 800bca8:	c340      	stmia	r3!, {r6}
 800bcaa:	2600      	movs	r6, #0
 800bcac:	9305      	str	r3, [sp, #20]
 800bcae:	9604      	str	r6, [sp, #16]
 800bcb0:	7820      	ldrb	r0, [r4, #0]
 800bcb2:	f7ff fedf 	bl	800ba74 <__hexdig_fun>
 800bcb6:	230f      	movs	r3, #15
 800bcb8:	4018      	ands	r0, r3
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	4098      	lsls	r0, r3
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4306      	orrs	r6, r0
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	e7a5      	b.n	800bc12 <__gethex+0x172>
 800bcc6:	9b00      	ldr	r3, [sp, #0]
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d8e9      	bhi.n	800bca0 <__gethex+0x200>
 800bccc:	2201      	movs	r2, #1
 800bcce:	0020      	movs	r0, r4
 800bcd0:	4927      	ldr	r1, [pc, #156]	; (800bd70 <__gethex+0x2d0>)
 800bcd2:	f7ff fe05 	bl	800b8e0 <strncmp>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d1e2      	bne.n	800bca0 <__gethex+0x200>
 800bcda:	e79a      	b.n	800bc12 <__gethex+0x172>
 800bcdc:	9b00      	ldr	r3, [sp, #0]
 800bcde:	2400      	movs	r4, #0
 800bce0:	429e      	cmp	r6, r3
 800bce2:	dacc      	bge.n	800bc7e <__gethex+0x1de>
 800bce4:	1b9e      	subs	r6, r3, r6
 800bce6:	0029      	movs	r1, r5
 800bce8:	0032      	movs	r2, r6
 800bcea:	9803      	ldr	r0, [sp, #12]
 800bcec:	f7fe f8ea 	bl	8009ec4 <__lshift>
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	3314      	adds	r3, #20
 800bcf4:	0005      	movs	r5, r0
 800bcf6:	1bbf      	subs	r7, r7, r6
 800bcf8:	9302      	str	r3, [sp, #8]
 800bcfa:	e7c0      	b.n	800bc7e <__gethex+0x1de>
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	685e      	ldr	r6, [r3, #4]
 800bd00:	42be      	cmp	r6, r7
 800bd02:	dd70      	ble.n	800bde6 <__gethex+0x346>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	1bf6      	subs	r6, r6, r7
 800bd08:	42b3      	cmp	r3, r6
 800bd0a:	dc37      	bgt.n	800bd7c <__gethex+0x2dc>
 800bd0c:	9b01      	ldr	r3, [sp, #4]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d024      	beq.n	800bd5e <__gethex+0x2be>
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d026      	beq.n	800bd66 <__gethex+0x2c6>
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d117      	bne.n	800bd4c <__gethex+0x2ac>
 800bd1c:	9b00      	ldr	r3, [sp, #0]
 800bd1e:	42b3      	cmp	r3, r6
 800bd20:	d114      	bne.n	800bd4c <__gethex+0x2ac>
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d10b      	bne.n	800bd3e <__gethex+0x29e>
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	9a07      	ldr	r2, [sp, #28]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	2662      	movs	r6, #98	; 0x62
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	2301      	movs	r3, #1
 800bd32:	9a02      	ldr	r2, [sp, #8]
 800bd34:	612b      	str	r3, [r5, #16]
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd3a:	601d      	str	r5, [r3, #0]
 800bd3c:	e739      	b.n	800bbb2 <__gethex+0x112>
 800bd3e:	9900      	ldr	r1, [sp, #0]
 800bd40:	0028      	movs	r0, r5
 800bd42:	3901      	subs	r1, #1
 800bd44:	f7fe faf2 	bl	800a32c <__any_on>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d1ec      	bne.n	800bd26 <__gethex+0x286>
 800bd4c:	0029      	movs	r1, r5
 800bd4e:	9803      	ldr	r0, [sp, #12]
 800bd50:	f7fd fe98 	bl	8009a84 <_Bfree>
 800bd54:	2300      	movs	r3, #0
 800bd56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd58:	2650      	movs	r6, #80	; 0x50
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	e729      	b.n	800bbb2 <__gethex+0x112>
 800bd5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1f3      	bne.n	800bd4c <__gethex+0x2ac>
 800bd64:	e7df      	b.n	800bd26 <__gethex+0x286>
 800bd66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1dc      	bne.n	800bd26 <__gethex+0x286>
 800bd6c:	e7ee      	b.n	800bd4c <__gethex+0x2ac>
 800bd6e:	46c0      	nop			; (mov r8, r8)
 800bd70:	0800d22c 	.word	0x0800d22c
 800bd74:	0800d0c5 	.word	0x0800d0c5
 800bd78:	0800d3d6 	.word	0x0800d3d6
 800bd7c:	1e77      	subs	r7, r6, #1
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	d12f      	bne.n	800bde2 <__gethex+0x342>
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	d004      	beq.n	800bd90 <__gethex+0x2f0>
 800bd86:	0039      	movs	r1, r7
 800bd88:	0028      	movs	r0, r5
 800bd8a:	f7fe facf 	bl	800a32c <__any_on>
 800bd8e:	0004      	movs	r4, r0
 800bd90:	231f      	movs	r3, #31
 800bd92:	117a      	asrs	r2, r7, #5
 800bd94:	401f      	ands	r7, r3
 800bd96:	3b1e      	subs	r3, #30
 800bd98:	40bb      	lsls	r3, r7
 800bd9a:	9902      	ldr	r1, [sp, #8]
 800bd9c:	0092      	lsls	r2, r2, #2
 800bd9e:	5852      	ldr	r2, [r2, r1]
 800bda0:	421a      	tst	r2, r3
 800bda2:	d001      	beq.n	800bda8 <__gethex+0x308>
 800bda4:	2302      	movs	r3, #2
 800bda6:	431c      	orrs	r4, r3
 800bda8:	9b00      	ldr	r3, [sp, #0]
 800bdaa:	0031      	movs	r1, r6
 800bdac:	1b9b      	subs	r3, r3, r6
 800bdae:	2602      	movs	r6, #2
 800bdb0:	0028      	movs	r0, r5
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	f7ff fe09 	bl	800b9ca <rshift>
 800bdb8:	9b01      	ldr	r3, [sp, #4]
 800bdba:	685f      	ldr	r7, [r3, #4]
 800bdbc:	2c00      	cmp	r4, #0
 800bdbe:	d041      	beq.n	800be44 <__gethex+0x3a4>
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d010      	beq.n	800bdea <__gethex+0x34a>
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	d012      	beq.n	800bdf2 <__gethex+0x352>
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d106      	bne.n	800bdde <__gethex+0x33e>
 800bdd0:	07a2      	lsls	r2, r4, #30
 800bdd2:	d504      	bpl.n	800bdde <__gethex+0x33e>
 800bdd4:	9a02      	ldr	r2, [sp, #8]
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	4314      	orrs	r4, r2
 800bdda:	421c      	tst	r4, r3
 800bddc:	d10c      	bne.n	800bdf8 <__gethex+0x358>
 800bdde:	2310      	movs	r3, #16
 800bde0:	e02f      	b.n	800be42 <__gethex+0x3a2>
 800bde2:	2401      	movs	r4, #1
 800bde4:	e7d4      	b.n	800bd90 <__gethex+0x2f0>
 800bde6:	2601      	movs	r6, #1
 800bde8:	e7e8      	b.n	800bdbc <__gethex+0x31c>
 800bdea:	2301      	movs	r3, #1
 800bdec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0f2      	beq.n	800bdde <__gethex+0x33e>
 800bdf8:	692b      	ldr	r3, [r5, #16]
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	9302      	str	r3, [sp, #8]
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	002b      	movs	r3, r5
 800be04:	9a04      	ldr	r2, [sp, #16]
 800be06:	3314      	adds	r3, #20
 800be08:	1899      	adds	r1, r3, r2
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	1c54      	adds	r4, r2, #1
 800be0e:	d01e      	beq.n	800be4e <__gethex+0x3ae>
 800be10:	3201      	adds	r2, #1
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	002b      	movs	r3, r5
 800be16:	3314      	adds	r3, #20
 800be18:	2e02      	cmp	r6, #2
 800be1a:	d141      	bne.n	800bea0 <__gethex+0x400>
 800be1c:	9a01      	ldr	r2, [sp, #4]
 800be1e:	9900      	ldr	r1, [sp, #0]
 800be20:	6812      	ldr	r2, [r2, #0]
 800be22:	3a01      	subs	r2, #1
 800be24:	428a      	cmp	r2, r1
 800be26:	d10b      	bne.n	800be40 <__gethex+0x3a0>
 800be28:	221f      	movs	r2, #31
 800be2a:	9800      	ldr	r0, [sp, #0]
 800be2c:	1149      	asrs	r1, r1, #5
 800be2e:	4002      	ands	r2, r0
 800be30:	2001      	movs	r0, #1
 800be32:	0004      	movs	r4, r0
 800be34:	4094      	lsls	r4, r2
 800be36:	0089      	lsls	r1, r1, #2
 800be38:	58cb      	ldr	r3, [r1, r3]
 800be3a:	4223      	tst	r3, r4
 800be3c:	d000      	beq.n	800be40 <__gethex+0x3a0>
 800be3e:	2601      	movs	r6, #1
 800be40:	2320      	movs	r3, #32
 800be42:	431e      	orrs	r6, r3
 800be44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be46:	601d      	str	r5, [r3, #0]
 800be48:	9b07      	ldr	r3, [sp, #28]
 800be4a:	601f      	str	r7, [r3, #0]
 800be4c:	e6b1      	b.n	800bbb2 <__gethex+0x112>
 800be4e:	c301      	stmia	r3!, {r0}
 800be50:	4299      	cmp	r1, r3
 800be52:	d8da      	bhi.n	800be0a <__gethex+0x36a>
 800be54:	68ab      	ldr	r3, [r5, #8]
 800be56:	9a02      	ldr	r2, [sp, #8]
 800be58:	429a      	cmp	r2, r3
 800be5a:	db18      	blt.n	800be8e <__gethex+0x3ee>
 800be5c:	6869      	ldr	r1, [r5, #4]
 800be5e:	9803      	ldr	r0, [sp, #12]
 800be60:	3101      	adds	r1, #1
 800be62:	f7fd fdcb 	bl	80099fc <_Balloc>
 800be66:	1e04      	subs	r4, r0, #0
 800be68:	d104      	bne.n	800be74 <__gethex+0x3d4>
 800be6a:	0022      	movs	r2, r4
 800be6c:	2184      	movs	r1, #132	; 0x84
 800be6e:	4b1c      	ldr	r3, [pc, #112]	; (800bee0 <__gethex+0x440>)
 800be70:	481c      	ldr	r0, [pc, #112]	; (800bee4 <__gethex+0x444>)
 800be72:	e6c2      	b.n	800bbfa <__gethex+0x15a>
 800be74:	0029      	movs	r1, r5
 800be76:	692a      	ldr	r2, [r5, #16]
 800be78:	310c      	adds	r1, #12
 800be7a:	3202      	adds	r2, #2
 800be7c:	0092      	lsls	r2, r2, #2
 800be7e:	300c      	adds	r0, #12
 800be80:	f7fc fe08 	bl	8008a94 <memcpy>
 800be84:	0029      	movs	r1, r5
 800be86:	9803      	ldr	r0, [sp, #12]
 800be88:	f7fd fdfc 	bl	8009a84 <_Bfree>
 800be8c:	0025      	movs	r5, r4
 800be8e:	692b      	ldr	r3, [r5, #16]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	612a      	str	r2, [r5, #16]
 800be94:	2201      	movs	r2, #1
 800be96:	3304      	adds	r3, #4
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	18eb      	adds	r3, r5, r3
 800be9c:	605a      	str	r2, [r3, #4]
 800be9e:	e7b9      	b.n	800be14 <__gethex+0x374>
 800bea0:	692a      	ldr	r2, [r5, #16]
 800bea2:	9902      	ldr	r1, [sp, #8]
 800bea4:	428a      	cmp	r2, r1
 800bea6:	dd09      	ble.n	800bebc <__gethex+0x41c>
 800bea8:	2101      	movs	r1, #1
 800beaa:	0028      	movs	r0, r5
 800beac:	f7ff fd8d 	bl	800b9ca <rshift>
 800beb0:	9b01      	ldr	r3, [sp, #4]
 800beb2:	3701      	adds	r7, #1
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	42bb      	cmp	r3, r7
 800beb8:	dac1      	bge.n	800be3e <__gethex+0x39e>
 800beba:	e6e4      	b.n	800bc86 <__gethex+0x1e6>
 800bebc:	221f      	movs	r2, #31
 800bebe:	9c00      	ldr	r4, [sp, #0]
 800bec0:	9900      	ldr	r1, [sp, #0]
 800bec2:	2601      	movs	r6, #1
 800bec4:	4014      	ands	r4, r2
 800bec6:	4211      	tst	r1, r2
 800bec8:	d0ba      	beq.n	800be40 <__gethex+0x3a0>
 800beca:	9a04      	ldr	r2, [sp, #16]
 800becc:	189b      	adds	r3, r3, r2
 800bece:	3b04      	subs	r3, #4
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	f7fd fe8b 	bl	8009bec <__hi0bits>
 800bed6:	2320      	movs	r3, #32
 800bed8:	1b1b      	subs	r3, r3, r4
 800beda:	4298      	cmp	r0, r3
 800bedc:	dbe4      	blt.n	800bea8 <__gethex+0x408>
 800bede:	e7af      	b.n	800be40 <__gethex+0x3a0>
 800bee0:	0800d0c5 	.word	0x0800d0c5
 800bee4:	0800d3d6 	.word	0x0800d3d6

0800bee8 <L_shift>:
 800bee8:	2308      	movs	r3, #8
 800beea:	b570      	push	{r4, r5, r6, lr}
 800beec:	2520      	movs	r5, #32
 800beee:	1a9a      	subs	r2, r3, r2
 800bef0:	0092      	lsls	r2, r2, #2
 800bef2:	1aad      	subs	r5, r5, r2
 800bef4:	6843      	ldr	r3, [r0, #4]
 800bef6:	6804      	ldr	r4, [r0, #0]
 800bef8:	001e      	movs	r6, r3
 800befa:	40ae      	lsls	r6, r5
 800befc:	40d3      	lsrs	r3, r2
 800befe:	4334      	orrs	r4, r6
 800bf00:	6004      	str	r4, [r0, #0]
 800bf02:	6043      	str	r3, [r0, #4]
 800bf04:	3004      	adds	r0, #4
 800bf06:	4288      	cmp	r0, r1
 800bf08:	d3f4      	bcc.n	800bef4 <L_shift+0xc>
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}

0800bf0c <__match>:
 800bf0c:	b530      	push	{r4, r5, lr}
 800bf0e:	6803      	ldr	r3, [r0, #0]
 800bf10:	780c      	ldrb	r4, [r1, #0]
 800bf12:	3301      	adds	r3, #1
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	d102      	bne.n	800bf1e <__match+0x12>
 800bf18:	6003      	str	r3, [r0, #0]
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	bd30      	pop	{r4, r5, pc}
 800bf1e:	781a      	ldrb	r2, [r3, #0]
 800bf20:	0015      	movs	r5, r2
 800bf22:	3d41      	subs	r5, #65	; 0x41
 800bf24:	2d19      	cmp	r5, #25
 800bf26:	d800      	bhi.n	800bf2a <__match+0x1e>
 800bf28:	3220      	adds	r2, #32
 800bf2a:	3101      	adds	r1, #1
 800bf2c:	42a2      	cmp	r2, r4
 800bf2e:	d0ef      	beq.n	800bf10 <__match+0x4>
 800bf30:	2000      	movs	r0, #0
 800bf32:	e7f3      	b.n	800bf1c <__match+0x10>

0800bf34 <__hexnan>:
 800bf34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf36:	680b      	ldr	r3, [r1, #0]
 800bf38:	b08b      	sub	sp, #44	; 0x2c
 800bf3a:	9201      	str	r2, [sp, #4]
 800bf3c:	9901      	ldr	r1, [sp, #4]
 800bf3e:	115a      	asrs	r2, r3, #5
 800bf40:	0092      	lsls	r2, r2, #2
 800bf42:	188a      	adds	r2, r1, r2
 800bf44:	9202      	str	r2, [sp, #8]
 800bf46:	0019      	movs	r1, r3
 800bf48:	221f      	movs	r2, #31
 800bf4a:	4011      	ands	r1, r2
 800bf4c:	9008      	str	r0, [sp, #32]
 800bf4e:	9106      	str	r1, [sp, #24]
 800bf50:	4213      	tst	r3, r2
 800bf52:	d002      	beq.n	800bf5a <__hexnan+0x26>
 800bf54:	9b02      	ldr	r3, [sp, #8]
 800bf56:	3304      	adds	r3, #4
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	9b02      	ldr	r3, [sp, #8]
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	1f1f      	subs	r7, r3, #4
 800bf60:	003e      	movs	r6, r7
 800bf62:	003c      	movs	r4, r7
 800bf64:	9b08      	ldr	r3, [sp, #32]
 800bf66:	603d      	str	r5, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	9507      	str	r5, [sp, #28]
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	9503      	str	r5, [sp, #12]
 800bf70:	9b05      	ldr	r3, [sp, #20]
 800bf72:	3301      	adds	r3, #1
 800bf74:	9309      	str	r3, [sp, #36]	; 0x24
 800bf76:	9b05      	ldr	r3, [sp, #20]
 800bf78:	785b      	ldrb	r3, [r3, #1]
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d028      	beq.n	800bfd2 <__hexnan+0x9e>
 800bf80:	9804      	ldr	r0, [sp, #16]
 800bf82:	f7ff fd77 	bl	800ba74 <__hexdig_fun>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d154      	bne.n	800c034 <__hexnan+0x100>
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	2b20      	cmp	r3, #32
 800bf8e:	d819      	bhi.n	800bfc4 <__hexnan+0x90>
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	9a07      	ldr	r2, [sp, #28]
 800bf94:	4293      	cmp	r3, r2
 800bf96:	dd12      	ble.n	800bfbe <__hexnan+0x8a>
 800bf98:	42b4      	cmp	r4, r6
 800bf9a:	d206      	bcs.n	800bfaa <__hexnan+0x76>
 800bf9c:	2d07      	cmp	r5, #7
 800bf9e:	dc04      	bgt.n	800bfaa <__hexnan+0x76>
 800bfa0:	002a      	movs	r2, r5
 800bfa2:	0031      	movs	r1, r6
 800bfa4:	0020      	movs	r0, r4
 800bfa6:	f7ff ff9f 	bl	800bee8 <L_shift>
 800bfaa:	9b01      	ldr	r3, [sp, #4]
 800bfac:	2508      	movs	r5, #8
 800bfae:	429c      	cmp	r4, r3
 800bfb0:	d905      	bls.n	800bfbe <__hexnan+0x8a>
 800bfb2:	1f26      	subs	r6, r4, #4
 800bfb4:	2500      	movs	r5, #0
 800bfb6:	0034      	movs	r4, r6
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	6035      	str	r5, [r6, #0]
 800bfbc:	9307      	str	r3, [sp, #28]
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	e7d5      	b.n	800bf70 <__hexnan+0x3c>
 800bfc4:	9b04      	ldr	r3, [sp, #16]
 800bfc6:	2b29      	cmp	r3, #41	; 0x29
 800bfc8:	d159      	bne.n	800c07e <__hexnan+0x14a>
 800bfca:	9b05      	ldr	r3, [sp, #20]
 800bfcc:	9a08      	ldr	r2, [sp, #32]
 800bfce:	3302      	adds	r3, #2
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d052      	beq.n	800c07e <__hexnan+0x14a>
 800bfd8:	42b4      	cmp	r4, r6
 800bfda:	d206      	bcs.n	800bfea <__hexnan+0xb6>
 800bfdc:	2d07      	cmp	r5, #7
 800bfde:	dc04      	bgt.n	800bfea <__hexnan+0xb6>
 800bfe0:	002a      	movs	r2, r5
 800bfe2:	0031      	movs	r1, r6
 800bfe4:	0020      	movs	r0, r4
 800bfe6:	f7ff ff7f 	bl	800bee8 <L_shift>
 800bfea:	9b01      	ldr	r3, [sp, #4]
 800bfec:	429c      	cmp	r4, r3
 800bfee:	d935      	bls.n	800c05c <__hexnan+0x128>
 800bff0:	001a      	movs	r2, r3
 800bff2:	0023      	movs	r3, r4
 800bff4:	cb02      	ldmia	r3!, {r1}
 800bff6:	c202      	stmia	r2!, {r1}
 800bff8:	429f      	cmp	r7, r3
 800bffa:	d2fb      	bcs.n	800bff4 <__hexnan+0xc0>
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	1c62      	adds	r2, r4, #1
 800c000:	1ed9      	subs	r1, r3, #3
 800c002:	2304      	movs	r3, #4
 800c004:	4291      	cmp	r1, r2
 800c006:	d305      	bcc.n	800c014 <__hexnan+0xe0>
 800c008:	9b02      	ldr	r3, [sp, #8]
 800c00a:	3b04      	subs	r3, #4
 800c00c:	1b1b      	subs	r3, r3, r4
 800c00e:	089b      	lsrs	r3, r3, #2
 800c010:	3301      	adds	r3, #1
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	9a01      	ldr	r2, [sp, #4]
 800c016:	18d3      	adds	r3, r2, r3
 800c018:	2200      	movs	r2, #0
 800c01a:	c304      	stmia	r3!, {r2}
 800c01c:	429f      	cmp	r7, r3
 800c01e:	d2fc      	bcs.n	800c01a <__hexnan+0xe6>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d104      	bne.n	800c030 <__hexnan+0xfc>
 800c026:	9b01      	ldr	r3, [sp, #4]
 800c028:	429f      	cmp	r7, r3
 800c02a:	d126      	bne.n	800c07a <__hexnan+0x146>
 800c02c:	2301      	movs	r3, #1
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	2005      	movs	r0, #5
 800c032:	e025      	b.n	800c080 <__hexnan+0x14c>
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	3501      	adds	r5, #1
 800c038:	3301      	adds	r3, #1
 800c03a:	9303      	str	r3, [sp, #12]
 800c03c:	2d08      	cmp	r5, #8
 800c03e:	dd06      	ble.n	800c04e <__hexnan+0x11a>
 800c040:	9b01      	ldr	r3, [sp, #4]
 800c042:	429c      	cmp	r4, r3
 800c044:	d9bb      	bls.n	800bfbe <__hexnan+0x8a>
 800c046:	2300      	movs	r3, #0
 800c048:	2501      	movs	r5, #1
 800c04a:	3c04      	subs	r4, #4
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	220f      	movs	r2, #15
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	4010      	ands	r0, r2
 800c054:	011b      	lsls	r3, r3, #4
 800c056:	4303      	orrs	r3, r0
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	e7b0      	b.n	800bfbe <__hexnan+0x8a>
 800c05c:	9b06      	ldr	r3, [sp, #24]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d0de      	beq.n	800c020 <__hexnan+0xec>
 800c062:	2320      	movs	r3, #32
 800c064:	9a06      	ldr	r2, [sp, #24]
 800c066:	9902      	ldr	r1, [sp, #8]
 800c068:	1a9b      	subs	r3, r3, r2
 800c06a:	2201      	movs	r2, #1
 800c06c:	4252      	negs	r2, r2
 800c06e:	40da      	lsrs	r2, r3
 800c070:	3904      	subs	r1, #4
 800c072:	680b      	ldr	r3, [r1, #0]
 800c074:	4013      	ands	r3, r2
 800c076:	600b      	str	r3, [r1, #0]
 800c078:	e7d2      	b.n	800c020 <__hexnan+0xec>
 800c07a:	3f04      	subs	r7, #4
 800c07c:	e7d0      	b.n	800c020 <__hexnan+0xec>
 800c07e:	2004      	movs	r0, #4
 800c080:	b00b      	add	sp, #44	; 0x2c
 800c082:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c084 <__ascii_mbtowc>:
 800c084:	b082      	sub	sp, #8
 800c086:	2900      	cmp	r1, #0
 800c088:	d100      	bne.n	800c08c <__ascii_mbtowc+0x8>
 800c08a:	a901      	add	r1, sp, #4
 800c08c:	1e10      	subs	r0, r2, #0
 800c08e:	d006      	beq.n	800c09e <__ascii_mbtowc+0x1a>
 800c090:	2b00      	cmp	r3, #0
 800c092:	d006      	beq.n	800c0a2 <__ascii_mbtowc+0x1e>
 800c094:	7813      	ldrb	r3, [r2, #0]
 800c096:	600b      	str	r3, [r1, #0]
 800c098:	7810      	ldrb	r0, [r2, #0]
 800c09a:	1e43      	subs	r3, r0, #1
 800c09c:	4198      	sbcs	r0, r3
 800c09e:	b002      	add	sp, #8
 800c0a0:	4770      	bx	lr
 800c0a2:	2002      	movs	r0, #2
 800c0a4:	4240      	negs	r0, r0
 800c0a6:	e7fa      	b.n	800c09e <__ascii_mbtowc+0x1a>

0800c0a8 <_realloc_r>:
 800c0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0aa:	0007      	movs	r7, r0
 800c0ac:	000e      	movs	r6, r1
 800c0ae:	0014      	movs	r4, r2
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d105      	bne.n	800c0c0 <_realloc_r+0x18>
 800c0b4:	0011      	movs	r1, r2
 800c0b6:	f7fd fc0f 	bl	80098d8 <_malloc_r>
 800c0ba:	0005      	movs	r5, r0
 800c0bc:	0028      	movs	r0, r5
 800c0be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0c0:	2a00      	cmp	r2, #0
 800c0c2:	d103      	bne.n	800c0cc <_realloc_r+0x24>
 800c0c4:	f7fd fb92 	bl	80097ec <_free_r>
 800c0c8:	0025      	movs	r5, r4
 800c0ca:	e7f7      	b.n	800c0bc <_realloc_r+0x14>
 800c0cc:	f000 f8c9 	bl	800c262 <_malloc_usable_size_r>
 800c0d0:	9001      	str	r0, [sp, #4]
 800c0d2:	4284      	cmp	r4, r0
 800c0d4:	d803      	bhi.n	800c0de <_realloc_r+0x36>
 800c0d6:	0035      	movs	r5, r6
 800c0d8:	0843      	lsrs	r3, r0, #1
 800c0da:	42a3      	cmp	r3, r4
 800c0dc:	d3ee      	bcc.n	800c0bc <_realloc_r+0x14>
 800c0de:	0021      	movs	r1, r4
 800c0e0:	0038      	movs	r0, r7
 800c0e2:	f7fd fbf9 	bl	80098d8 <_malloc_r>
 800c0e6:	1e05      	subs	r5, r0, #0
 800c0e8:	d0e8      	beq.n	800c0bc <_realloc_r+0x14>
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	0022      	movs	r2, r4
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	d900      	bls.n	800c0f4 <_realloc_r+0x4c>
 800c0f2:	001a      	movs	r2, r3
 800c0f4:	0031      	movs	r1, r6
 800c0f6:	0028      	movs	r0, r5
 800c0f8:	f7fc fccc 	bl	8008a94 <memcpy>
 800c0fc:	0031      	movs	r1, r6
 800c0fe:	0038      	movs	r0, r7
 800c100:	f7fd fb74 	bl	80097ec <_free_r>
 800c104:	e7da      	b.n	800c0bc <_realloc_r+0x14>

0800c106 <__ascii_wctomb>:
 800c106:	0003      	movs	r3, r0
 800c108:	1e08      	subs	r0, r1, #0
 800c10a:	d005      	beq.n	800c118 <__ascii_wctomb+0x12>
 800c10c:	2aff      	cmp	r2, #255	; 0xff
 800c10e:	d904      	bls.n	800c11a <__ascii_wctomb+0x14>
 800c110:	228a      	movs	r2, #138	; 0x8a
 800c112:	2001      	movs	r0, #1
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	4240      	negs	r0, r0
 800c118:	4770      	bx	lr
 800c11a:	2001      	movs	r0, #1
 800c11c:	700a      	strb	r2, [r1, #0]
 800c11e:	e7fb      	b.n	800c118 <__ascii_wctomb+0x12>

0800c120 <fiprintf>:
 800c120:	b40e      	push	{r1, r2, r3}
 800c122:	b517      	push	{r0, r1, r2, r4, lr}
 800c124:	4c05      	ldr	r4, [pc, #20]	; (800c13c <fiprintf+0x1c>)
 800c126:	ab05      	add	r3, sp, #20
 800c128:	cb04      	ldmia	r3!, {r2}
 800c12a:	0001      	movs	r1, r0
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	f7ff f95e 	bl	800b3f0 <_vfiprintf_r>
 800c134:	bc1e      	pop	{r1, r2, r3, r4}
 800c136:	bc08      	pop	{r3}
 800c138:	b003      	add	sp, #12
 800c13a:	4718      	bx	r3
 800c13c:	20000068 	.word	0x20000068

0800c140 <__swhatbuf_r>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	000e      	movs	r6, r1
 800c144:	001d      	movs	r5, r3
 800c146:	230e      	movs	r3, #14
 800c148:	5ec9      	ldrsh	r1, [r1, r3]
 800c14a:	0014      	movs	r4, r2
 800c14c:	b096      	sub	sp, #88	; 0x58
 800c14e:	2900      	cmp	r1, #0
 800c150:	da0c      	bge.n	800c16c <__swhatbuf_r+0x2c>
 800c152:	89b2      	ldrh	r2, [r6, #12]
 800c154:	2380      	movs	r3, #128	; 0x80
 800c156:	0011      	movs	r1, r2
 800c158:	4019      	ands	r1, r3
 800c15a:	421a      	tst	r2, r3
 800c15c:	d013      	beq.n	800c186 <__swhatbuf_r+0x46>
 800c15e:	2100      	movs	r1, #0
 800c160:	3b40      	subs	r3, #64	; 0x40
 800c162:	2000      	movs	r0, #0
 800c164:	6029      	str	r1, [r5, #0]
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	b016      	add	sp, #88	; 0x58
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	466a      	mov	r2, sp
 800c16e:	f000 f84d 	bl	800c20c <_fstat_r>
 800c172:	2800      	cmp	r0, #0
 800c174:	dbed      	blt.n	800c152 <__swhatbuf_r+0x12>
 800c176:	23f0      	movs	r3, #240	; 0xf0
 800c178:	9901      	ldr	r1, [sp, #4]
 800c17a:	021b      	lsls	r3, r3, #8
 800c17c:	4019      	ands	r1, r3
 800c17e:	4b03      	ldr	r3, [pc, #12]	; (800c18c <__swhatbuf_r+0x4c>)
 800c180:	18c9      	adds	r1, r1, r3
 800c182:	424b      	negs	r3, r1
 800c184:	4159      	adcs	r1, r3
 800c186:	2380      	movs	r3, #128	; 0x80
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	e7ea      	b.n	800c162 <__swhatbuf_r+0x22>
 800c18c:	ffffe000 	.word	0xffffe000

0800c190 <__smakebuf_r>:
 800c190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c192:	2602      	movs	r6, #2
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	0005      	movs	r5, r0
 800c198:	000c      	movs	r4, r1
 800c19a:	4233      	tst	r3, r6
 800c19c:	d006      	beq.n	800c1ac <__smakebuf_r+0x1c>
 800c19e:	0023      	movs	r3, r4
 800c1a0:	3347      	adds	r3, #71	; 0x47
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	6123      	str	r3, [r4, #16]
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	6163      	str	r3, [r4, #20]
 800c1aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c1ac:	466a      	mov	r2, sp
 800c1ae:	ab01      	add	r3, sp, #4
 800c1b0:	f7ff ffc6 	bl	800c140 <__swhatbuf_r>
 800c1b4:	9900      	ldr	r1, [sp, #0]
 800c1b6:	0007      	movs	r7, r0
 800c1b8:	0028      	movs	r0, r5
 800c1ba:	f7fd fb8d 	bl	80098d8 <_malloc_r>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d108      	bne.n	800c1d4 <__smakebuf_r+0x44>
 800c1c2:	220c      	movs	r2, #12
 800c1c4:	5ea3      	ldrsh	r3, [r4, r2]
 800c1c6:	059a      	lsls	r2, r3, #22
 800c1c8:	d4ef      	bmi.n	800c1aa <__smakebuf_r+0x1a>
 800c1ca:	2203      	movs	r2, #3
 800c1cc:	4393      	bics	r3, r2
 800c1ce:	431e      	orrs	r6, r3
 800c1d0:	81a6      	strh	r6, [r4, #12]
 800c1d2:	e7e4      	b.n	800c19e <__smakebuf_r+0xe>
 800c1d4:	2380      	movs	r3, #128	; 0x80
 800c1d6:	89a2      	ldrh	r2, [r4, #12]
 800c1d8:	6020      	str	r0, [r4, #0]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	6120      	str	r0, [r4, #16]
 800c1e2:	6163      	str	r3, [r4, #20]
 800c1e4:	9b01      	ldr	r3, [sp, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00c      	beq.n	800c204 <__smakebuf_r+0x74>
 800c1ea:	0028      	movs	r0, r5
 800c1ec:	230e      	movs	r3, #14
 800c1ee:	5ee1      	ldrsh	r1, [r4, r3]
 800c1f0:	f000 f81e 	bl	800c230 <_isatty_r>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d005      	beq.n	800c204 <__smakebuf_r+0x74>
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	89a2      	ldrh	r2, [r4, #12]
 800c1fc:	439a      	bics	r2, r3
 800c1fe:	3b02      	subs	r3, #2
 800c200:	4313      	orrs	r3, r2
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	433b      	orrs	r3, r7
 800c208:	81a3      	strh	r3, [r4, #12]
 800c20a:	e7ce      	b.n	800c1aa <__smakebuf_r+0x1a>

0800c20c <_fstat_r>:
 800c20c:	2300      	movs	r3, #0
 800c20e:	b570      	push	{r4, r5, r6, lr}
 800c210:	4d06      	ldr	r5, [pc, #24]	; (800c22c <_fstat_r+0x20>)
 800c212:	0004      	movs	r4, r0
 800c214:	0008      	movs	r0, r1
 800c216:	0011      	movs	r1, r2
 800c218:	602b      	str	r3, [r5, #0]
 800c21a:	f7f7 fe7e 	bl	8003f1a <_fstat>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d103      	bne.n	800c22a <_fstat_r+0x1e>
 800c222:	682b      	ldr	r3, [r5, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d000      	beq.n	800c22a <_fstat_r+0x1e>
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	20000768 	.word	0x20000768

0800c230 <_isatty_r>:
 800c230:	2300      	movs	r3, #0
 800c232:	b570      	push	{r4, r5, r6, lr}
 800c234:	4d06      	ldr	r5, [pc, #24]	; (800c250 <_isatty_r+0x20>)
 800c236:	0004      	movs	r4, r0
 800c238:	0008      	movs	r0, r1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f7f7 fe7b 	bl	8003f36 <_isatty>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d103      	bne.n	800c24c <_isatty_r+0x1c>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d000      	beq.n	800c24c <_isatty_r+0x1c>
 800c24a:	6023      	str	r3, [r4, #0]
 800c24c:	bd70      	pop	{r4, r5, r6, pc}
 800c24e:	46c0      	nop			; (mov r8, r8)
 800c250:	20000768 	.word	0x20000768

0800c254 <abort>:
 800c254:	2006      	movs	r0, #6
 800c256:	b510      	push	{r4, lr}
 800c258:	f000 f836 	bl	800c2c8 <raise>
 800c25c:	2001      	movs	r0, #1
 800c25e:	f7f7 fe0d 	bl	8003e7c <_exit>

0800c262 <_malloc_usable_size_r>:
 800c262:	1f0b      	subs	r3, r1, #4
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	1f18      	subs	r0, r3, #4
 800c268:	2b00      	cmp	r3, #0
 800c26a:	da01      	bge.n	800c270 <_malloc_usable_size_r+0xe>
 800c26c:	580b      	ldr	r3, [r1, r0]
 800c26e:	18c0      	adds	r0, r0, r3
 800c270:	4770      	bx	lr

0800c272 <_raise_r>:
 800c272:	b570      	push	{r4, r5, r6, lr}
 800c274:	0004      	movs	r4, r0
 800c276:	000d      	movs	r5, r1
 800c278:	291f      	cmp	r1, #31
 800c27a:	d904      	bls.n	800c286 <_raise_r+0x14>
 800c27c:	2316      	movs	r3, #22
 800c27e:	6003      	str	r3, [r0, #0]
 800c280:	2001      	movs	r0, #1
 800c282:	4240      	negs	r0, r0
 800c284:	bd70      	pop	{r4, r5, r6, pc}
 800c286:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <_raise_r+0x24>
 800c28c:	008a      	lsls	r2, r1, #2
 800c28e:	189b      	adds	r3, r3, r2
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	2a00      	cmp	r2, #0
 800c294:	d108      	bne.n	800c2a8 <_raise_r+0x36>
 800c296:	0020      	movs	r0, r4
 800c298:	f000 f832 	bl	800c300 <_getpid_r>
 800c29c:	002a      	movs	r2, r5
 800c29e:	0001      	movs	r1, r0
 800c2a0:	0020      	movs	r0, r4
 800c2a2:	f000 f81b 	bl	800c2dc <_kill_r>
 800c2a6:	e7ed      	b.n	800c284 <_raise_r+0x12>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	2a01      	cmp	r2, #1
 800c2ac:	d0ea      	beq.n	800c284 <_raise_r+0x12>
 800c2ae:	1c51      	adds	r1, r2, #1
 800c2b0:	d103      	bne.n	800c2ba <_raise_r+0x48>
 800c2b2:	2316      	movs	r3, #22
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	e7e4      	b.n	800c284 <_raise_r+0x12>
 800c2ba:	2400      	movs	r4, #0
 800c2bc:	0028      	movs	r0, r5
 800c2be:	601c      	str	r4, [r3, #0]
 800c2c0:	4790      	blx	r2
 800c2c2:	0020      	movs	r0, r4
 800c2c4:	e7de      	b.n	800c284 <_raise_r+0x12>
	...

0800c2c8 <raise>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	4b03      	ldr	r3, [pc, #12]	; (800c2d8 <raise+0x10>)
 800c2cc:	0001      	movs	r1, r0
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	f7ff ffcf 	bl	800c272 <_raise_r>
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	46c0      	nop			; (mov r8, r8)
 800c2d8:	20000068 	.word	0x20000068

0800c2dc <_kill_r>:
 800c2dc:	2300      	movs	r3, #0
 800c2de:	b570      	push	{r4, r5, r6, lr}
 800c2e0:	4d06      	ldr	r5, [pc, #24]	; (800c2fc <_kill_r+0x20>)
 800c2e2:	0004      	movs	r4, r0
 800c2e4:	0008      	movs	r0, r1
 800c2e6:	0011      	movs	r1, r2
 800c2e8:	602b      	str	r3, [r5, #0]
 800c2ea:	f7f7 fdb7 	bl	8003e5c <_kill>
 800c2ee:	1c43      	adds	r3, r0, #1
 800c2f0:	d103      	bne.n	800c2fa <_kill_r+0x1e>
 800c2f2:	682b      	ldr	r3, [r5, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d000      	beq.n	800c2fa <_kill_r+0x1e>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	20000768 	.word	0x20000768

0800c300 <_getpid_r>:
 800c300:	b510      	push	{r4, lr}
 800c302:	f7f7 fda5 	bl	8003e50 <_getpid>
 800c306:	bd10      	pop	{r4, pc}

0800c308 <_init>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	46c0      	nop			; (mov r8, r8)
 800c30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30e:	bc08      	pop	{r3}
 800c310:	469e      	mov	lr, r3
 800c312:	4770      	bx	lr

0800c314 <_fini>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	46c0      	nop			; (mov r8, r8)
 800c318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31a:	bc08      	pop	{r3}
 800c31c:	469e      	mov	lr, r3
 800c31e:	4770      	bx	lr
